// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ElasticCloud
{
    public static class GetDeployments
    {
        /// <summary>
        /// Use this data source to retrieve a list of IDs for the deployment and resource kinds, based on the specified query.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ElasticCloud = Pulumi.ElasticCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ElasticCloud.GetDeployments.Invoke(new()
        ///     {
        ///         NamePrefix = "test",
        ///         DeploymentTemplateId = "azure-compute-optimized",
        ///         Size = 200,
        ///         Tags = 
        ///         {
        ///             { "foo", "bar" },
        ///         },
        ///         Elasticsearches = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsElasticsearchInputArgs
        ///             {
        ///                 Healthy = "true",
        ///             },
        ///         },
        ///         Kibanas = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsKibanaInputArgs
        ///             {
        ///                 Status = "started",
        ///             },
        ///         },
        ///         IntegrationsServers = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsIntegrationsServerInputArgs
        ///             {
        ///                 Version = "8.0.0",
        ///             },
        ///         },
        ///         EnterpriseSearches = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsEnterpriseSearchInputArgs
        ///             {
        ///                 Healthy = "true",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDeploymentsResult> InvokeAsync(GetDeploymentsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentsResult>("ec:index/getDeployments:getDeployments", args ?? new GetDeploymentsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a list of IDs for the deployment and resource kinds, based on the specified query.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using ElasticCloud = Pulumi.ElasticCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = ElasticCloud.GetDeployments.Invoke(new()
        ///     {
        ///         NamePrefix = "test",
        ///         DeploymentTemplateId = "azure-compute-optimized",
        ///         Size = 200,
        ///         Tags = 
        ///         {
        ///             { "foo", "bar" },
        ///         },
        ///         Elasticsearches = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsElasticsearchInputArgs
        ///             {
        ///                 Healthy = "true",
        ///             },
        ///         },
        ///         Kibanas = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsKibanaInputArgs
        ///             {
        ///                 Status = "started",
        ///             },
        ///         },
        ///         IntegrationsServers = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsIntegrationsServerInputArgs
        ///             {
        ///                 Version = "8.0.0",
        ///             },
        ///         },
        ///         EnterpriseSearches = new[]
        ///         {
        ///             new ElasticCloud.Inputs.GetDeploymentsEnterpriseSearchInputArgs
        ///             {
        ///                 Healthy = "true",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDeploymentsResult> Invoke(GetDeploymentsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentsResult>("ec:index/getDeployments:getDeployments", args ?? new GetDeploymentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentsArgs : global::Pulumi.InvokeArgs
    {
        [Input("apms")]
        private List<Inputs.GetDeploymentsApmArgs>? _apms;

        /// <summary>
        /// Filter by APM resource kind status or configuration.
        /// </summary>
        public List<Inputs.GetDeploymentsApmArgs> Apms
        {
            get => _apms ?? (_apms = new List<Inputs.GetDeploymentsApmArgs>());
            set => _apms = value;
        }

        /// <summary>
        /// Filter the result set by the ID of the deployment template the deployment is based off.
        /// </summary>
        [Input("deploymentTemplateId")]
        public string? DeploymentTemplateId { get; set; }

        [Input("elasticsearches")]
        private List<Inputs.GetDeploymentsElasticsearchArgs>? _elasticsearches;

        /// <summary>
        /// Filter by Elasticsearch resource kind status or configuration.
        /// </summary>
        public List<Inputs.GetDeploymentsElasticsearchArgs> Elasticsearches
        {
            get => _elasticsearches ?? (_elasticsearches = new List<Inputs.GetDeploymentsElasticsearchArgs>());
            set => _elasticsearches = value;
        }

        [Input("enterpriseSearches")]
        private List<Inputs.GetDeploymentsEnterpriseSearchArgs>? _enterpriseSearches;

        /// <summary>
        /// Filter by Enterprise Search resource kind status or configuration.
        /// </summary>
        public List<Inputs.GetDeploymentsEnterpriseSearchArgs> EnterpriseSearches
        {
            get => _enterpriseSearches ?? (_enterpriseSearches = new List<Inputs.GetDeploymentsEnterpriseSearchArgs>());
            set => _enterpriseSearches = value;
        }

        /// <summary>
        /// Overall health status of the resource instances.
        /// </summary>
        [Input("healthy")]
        public string? Healthy { get; set; }

        [Input("integrationsServers")]
        private List<Inputs.GetDeploymentsIntegrationsServerArgs>? _integrationsServers;

        /// <summary>
        /// Filter by Integrations Server resource kind status or configuration.
        /// </summary>
        public List<Inputs.GetDeploymentsIntegrationsServerArgs> IntegrationsServers
        {
            get => _integrationsServers ?? (_integrationsServers = new List<Inputs.GetDeploymentsIntegrationsServerArgs>());
            set => _integrationsServers = value;
        }

        [Input("kibanas")]
        private List<Inputs.GetDeploymentsKibanaArgs>? _kibanas;

        /// <summary>
        /// Filter by Kibana resource kind status or configuration.
        /// </summary>
        public List<Inputs.GetDeploymentsKibanaArgs> Kibanas
        {
            get => _kibanas ?? (_kibanas = new List<Inputs.GetDeploymentsKibanaArgs>());
            set => _kibanas = value;
        }

        /// <summary>
        /// The name of the deployment.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Prefix to filter the returned deployment list by.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        /// <summary>
        /// The maximum number of deployments to return. Defaults to `100`.
        /// </summary>
        [Input("size")]
        public int? Size { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Filter the result set by their assigned tags.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDeploymentsArgs()
        {
        }
        public static new GetDeploymentsArgs Empty => new GetDeploymentsArgs();
    }

    public sealed class GetDeploymentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("apms")]
        private InputList<Inputs.GetDeploymentsApmInputArgs>? _apms;

        /// <summary>
        /// Filter by APM resource kind status or configuration.
        /// </summary>
        public InputList<Inputs.GetDeploymentsApmInputArgs> Apms
        {
            get => _apms ?? (_apms = new InputList<Inputs.GetDeploymentsApmInputArgs>());
            set => _apms = value;
        }

        /// <summary>
        /// Filter the result set by the ID of the deployment template the deployment is based off.
        /// </summary>
        [Input("deploymentTemplateId")]
        public Input<string>? DeploymentTemplateId { get; set; }

        [Input("elasticsearches")]
        private InputList<Inputs.GetDeploymentsElasticsearchInputArgs>? _elasticsearches;

        /// <summary>
        /// Filter by Elasticsearch resource kind status or configuration.
        /// </summary>
        public InputList<Inputs.GetDeploymentsElasticsearchInputArgs> Elasticsearches
        {
            get => _elasticsearches ?? (_elasticsearches = new InputList<Inputs.GetDeploymentsElasticsearchInputArgs>());
            set => _elasticsearches = value;
        }

        [Input("enterpriseSearches")]
        private InputList<Inputs.GetDeploymentsEnterpriseSearchInputArgs>? _enterpriseSearches;

        /// <summary>
        /// Filter by Enterprise Search resource kind status or configuration.
        /// </summary>
        public InputList<Inputs.GetDeploymentsEnterpriseSearchInputArgs> EnterpriseSearches
        {
            get => _enterpriseSearches ?? (_enterpriseSearches = new InputList<Inputs.GetDeploymentsEnterpriseSearchInputArgs>());
            set => _enterpriseSearches = value;
        }

        /// <summary>
        /// Overall health status of the resource instances.
        /// </summary>
        [Input("healthy")]
        public Input<string>? Healthy { get; set; }

        [Input("integrationsServers")]
        private InputList<Inputs.GetDeploymentsIntegrationsServerInputArgs>? _integrationsServers;

        /// <summary>
        /// Filter by Integrations Server resource kind status or configuration.
        /// </summary>
        public InputList<Inputs.GetDeploymentsIntegrationsServerInputArgs> IntegrationsServers
        {
            get => _integrationsServers ?? (_integrationsServers = new InputList<Inputs.GetDeploymentsIntegrationsServerInputArgs>());
            set => _integrationsServers = value;
        }

        [Input("kibanas")]
        private InputList<Inputs.GetDeploymentsKibanaInputArgs>? _kibanas;

        /// <summary>
        /// Filter by Kibana resource kind status or configuration.
        /// </summary>
        public InputList<Inputs.GetDeploymentsKibanaInputArgs> Kibanas
        {
            get => _kibanas ?? (_kibanas = new InputList<Inputs.GetDeploymentsKibanaInputArgs>());
            set => _kibanas = value;
        }

        /// <summary>
        /// The name of the deployment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Prefix to filter the returned deployment list by.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The maximum number of deployments to return. Defaults to `100`.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Filter the result set by their assigned tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetDeploymentsInvokeArgs()
        {
        }
        public static new GetDeploymentsInvokeArgs Empty => new GetDeploymentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentsResult
    {
        /// <summary>
        /// Filter by APM resource kind status or configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentsApmResult> Apms;
        /// <summary>
        /// Filter the result set by the ID of the deployment template the deployment is based off.
        /// </summary>
        public readonly string? DeploymentTemplateId;
        /// <summary>
        /// List of deployments which match the specified query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentsDeploymentResult> Deployments;
        /// <summary>
        /// Filter by Elasticsearch resource kind status or configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentsElasticsearchResult> Elasticsearches;
        /// <summary>
        /// Filter by Enterprise Search resource kind status or configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentsEnterpriseSearchResult> EnterpriseSearches;
        /// <summary>
        /// Filter the result set by their health status.
        /// </summary>
        public readonly string? Healthy;
        /// <summary>
        /// Unique identifier of this data source.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Filter by Integrations Server resource kind status or configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentsIntegrationsServerResult> IntegrationsServers;
        /// <summary>
        /// Filter by Kibana resource kind status or configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentsKibanaResult> Kibanas;
        /// <summary>
        /// Filter the result by the full deployment name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Prefix to filter the returned deployment list by.
        /// </summary>
        public readonly string? NamePrefix;
        /// <summary>
        /// The number of deployments actually returned.
        /// </summary>
        public readonly int ReturnCount;
        /// <summary>
        /// The maximum number of deployments to return. Defaults to `100`.
        /// </summary>
        public readonly int? Size;
        /// <summary>
        /// Filter the result set by their assigned tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetDeploymentsResult(
            ImmutableArray<Outputs.GetDeploymentsApmResult> apms,

            string? deploymentTemplateId,

            ImmutableArray<Outputs.GetDeploymentsDeploymentResult> deployments,

            ImmutableArray<Outputs.GetDeploymentsElasticsearchResult> elasticsearches,

            ImmutableArray<Outputs.GetDeploymentsEnterpriseSearchResult> enterpriseSearches,

            string? healthy,

            string id,

            ImmutableArray<Outputs.GetDeploymentsIntegrationsServerResult> integrationsServers,

            ImmutableArray<Outputs.GetDeploymentsKibanaResult> kibanas,

            string? name,

            string? namePrefix,

            int returnCount,

            int? size,

            ImmutableDictionary<string, string>? tags)
        {
            Apms = apms;
            DeploymentTemplateId = deploymentTemplateId;
            Deployments = deployments;
            Elasticsearches = elasticsearches;
            EnterpriseSearches = enterpriseSearches;
            Healthy = healthy;
            Id = id;
            IntegrationsServers = integrationsServers;
            Kibanas = kibanas;
            Name = name;
            NamePrefix = namePrefix;
            ReturnCount = returnCount;
            Size = size;
            Tags = tags;
        }
    }
}
