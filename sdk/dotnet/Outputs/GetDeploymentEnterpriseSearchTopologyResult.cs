// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ElasticCloud.Outputs
{

    [OutputType]
    public sealed class GetDeploymentEnterpriseSearchTopologyResult
    {
        /// <summary>
        /// Controls the allocation of this topology element as well as allowed sizes and node_types. It needs to match the ID of an existing instance configuration.
        /// </summary>
        public readonly string InstanceConfigurationId;
        /// <summary>
        /// Defines whether this instance should run as application/API server.
        /// </summary>
        public readonly bool NodeTypeAppserver;
        /// <summary>
        /// Defines whether this instance should run as connector.
        /// </summary>
        public readonly bool NodeTypeConnector;
        /// <summary>
        /// Defines whether this instance should run as background worker.
        /// </summary>
        public readonly bool NodeTypeWorker;
        /// <summary>
        /// Amount of "SizeResource" in Gigabytes. For example "4g".
        /// </summary>
        public readonly string Size;
        /// <summary>
        /// Type of resource ("memory" or "storage")
        /// </summary>
        public readonly string SizeResource;
        /// <summary>
        /// Number of zones in which nodes will be placed.
        /// </summary>
        public readonly int ZoneCount;

        [OutputConstructor]
        private GetDeploymentEnterpriseSearchTopologyResult(
            string instanceConfigurationId,

            bool nodeTypeAppserver,

            bool nodeTypeConnector,

            bool nodeTypeWorker,

            string size,

            string sizeResource,

            int zoneCount)
        {
            InstanceConfigurationId = instanceConfigurationId;
            NodeTypeAppserver = nodeTypeAppserver;
            NodeTypeConnector = nodeTypeConnector;
            NodeTypeWorker = nodeTypeWorker;
            Size = size;
            SizeResource = sizeResource;
            ZoneCount = zoneCount;
        }
    }
}
