// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ElasticCloud
{
    public static class GetStack
    {
        /// <summary>
        /// Use this data source to retrieve information about an existing Elastic Cloud stack.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using ElasticCloud = Pulumi.ElasticCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var latest = ElasticCloud.GetStack.Invoke(new()
        ///     {
        ///         Lock = true,
        ///         Region = "us-east-1",
        ///         VersionRegex = "latest",
        ///     });
        /// 
        ///     var latestPatch = ElasticCloud.GetStack.Invoke(new()
        ///     {
        ///         Region = "us-east-1",
        ///         VersionRegex = "7.9.?",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetStackResult> InvokeAsync(GetStackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStackResult>("ec:index/getStack:getStack", args ?? new GetStackArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an existing Elastic Cloud stack.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using ElasticCloud = Pulumi.ElasticCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var latest = ElasticCloud.GetStack.Invoke(new()
        ///     {
        ///         Lock = true,
        ///         Region = "us-east-1",
        ///         VersionRegex = "latest",
        ///     });
        /// 
        ///     var latestPatch = ElasticCloud.GetStack.Invoke(new()
        ///     {
        ///         Region = "us-east-1",
        ///         VersionRegex = "7.9.?",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("ec:index/getStack:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Lock the `"latest"` `version_regex` obtained, so that the new stack release doesn't cascade the changes down to the deployments. It can be changed at any time.
        /// </summary>
        [Input("lock")]
        public bool? Lock { get; set; }

        /// <summary>
        /// Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `"ece-region`.
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        /// <summary>
        /// Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `"latest"` is also accepted to obtain the latest available stack version.
        /// </summary>
        [Input("versionRegex", required: true)]
        public string VersionRegex { get; set; } = null!;

        public GetStackArgs()
        {
        }
        public static new GetStackArgs Empty => new GetStackArgs();
    }

    public sealed class GetStackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Lock the `"latest"` `version_regex` obtained, so that the new stack release doesn't cascade the changes down to the deployments. It can be changed at any time.
        /// </summary>
        [Input("lock")]
        public Input<bool>? Lock { get; set; }

        /// <summary>
        /// Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `"ece-region`.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `"latest"` is also accepted to obtain the latest available stack version.
        /// </summary>
        [Input("versionRegex", required: true)]
        public Input<string> VersionRegex { get; set; } = null!;

        public GetStackInvokeArgs()
        {
        }
        public static new GetStackInvokeArgs Empty => new GetStackInvokeArgs();
    }


    [OutputType]
    public sealed class GetStackResult
    {
        /// <summary>
        /// To have this version accessible/not accessible by the calling user. This is only relevant for Elasticsearch Service (ESS), not for ECE.
        /// </summary>
        public readonly bool Accessible;
        /// <summary>
        /// To include/not include this version in the `allowlist`. This is only relevant for Elasticsearch Service (ESS), not for ECE.
        /// </summary>
        public readonly bool Allowlisted;
        /// <summary>
        /// Information for APM workloads on this stack version.
        /// * `apm.#.denylist` - List of configuration options that cannot be overridden by user settings.
        /// * `apm.#.capacity_constraints_min` - Minimum size of the instances.
        /// * `apm.#.capacity_constraints_max` - Maximum size of the instances.
        /// * `apm.#.compatible_node_types` - List of node types compatible with this one.
        /// * `apm.#.docker_image` - Docker image to use for the APM instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackApmResult> Apms;
        /// <summary>
        /// Information for Elasticsearch workloads on this stack version.
        /// * `elasticsearch.#.denylist` - List of configuration options that cannot be overridden by user settings.
        /// * `elasticsearch.#.capacity_constraints_min` - Minimum size of the instances.
        /// * `elasticsearch.#.capacity_constraints_max` - Maximum size of the instances.
        /// * `elasticsearch.#.compatible_node_types` - List of node types compatible with this one.
        /// * `elasticsearch.#.default_plugins` - List of default plugins which are included in all Elasticsearch cluster instances.
        /// * `elasticsearch.#.docker_image` - Docker image to use for the Elasticsearch cluster instances.
        /// * `elasticsearch.#.plugins` - List of available plugins to be specified by users in Elasticsearch cluster instances.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackElasticsearchResult> Elasticsearches;
        /// <summary>
        /// Information for Enterprise Search workloads on this stack version.
        /// * `enterprise_search.#.denylist` - List of configuration options that cannot be overridden by user settings.
        /// * `enterprise_search.#.capacity_constraints_min` - Minimum size of the instances.
        /// * `enterprise_search.#.capacity_constraints_max` - Maximum size of the instances.
        /// * `enterprise_search.#.compatible_node_types` - List of node types compatible with this one.
        /// * `enterprise_search.#.docker_image` - Docker image to use for the Enterprise Search instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackEnterpriseSearchResult> EnterpriseSearches;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Information for Kibana workloads on this stack version.
        /// * `kibana.#.denylist` - List of configuration options that cannot be overridden by user settings.
        /// * `kibana.#.capacity_constraints_min` - Minimum size of the instances.
        /// * `kibana.#.capacity_constraints_max` - Maximum size of the instances.
        /// * `kibana.#.compatible_node_types` - List of node types compatible with this one.
        /// * `kibana.#.docker_image` - Docker image to use for the Kibana instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStackKibanaResult> Kibanas;
        public readonly bool? Lock;
        /// <summary>
        /// The minimum stack version recommended.
        /// </summary>
        public readonly string MinUpgradableFrom;
        public readonly string Region;
        /// <summary>
        /// The stack version you can upgrade to.
        /// </summary>
        public readonly ImmutableArray<string> UpgradableTos;
        /// <summary>
        /// The stack version.
        /// </summary>
        public readonly string Version;
        public readonly string VersionRegex;

        [OutputConstructor]
        private GetStackResult(
            bool accessible,

            bool allowlisted,

            ImmutableArray<Outputs.GetStackApmResult> apms,

            ImmutableArray<Outputs.GetStackElasticsearchResult> elasticsearches,

            ImmutableArray<Outputs.GetStackEnterpriseSearchResult> enterpriseSearches,

            string id,

            ImmutableArray<Outputs.GetStackKibanaResult> kibanas,

            bool? @lock,

            string minUpgradableFrom,

            string region,

            ImmutableArray<string> upgradableTos,

            string version,

            string versionRegex)
        {
            Accessible = accessible;
            Allowlisted = allowlisted;
            Apms = apms;
            Elasticsearches = elasticsearches;
            EnterpriseSearches = enterpriseSearches;
            Id = id;
            Kibanas = kibanas;
            Lock = @lock;
            MinUpgradableFrom = minUpgradableFrom;
            Region = region;
            UpgradableTos = upgradableTos;
            Version = version;
            VersionRegex = versionRegex;
        }
    }
}
