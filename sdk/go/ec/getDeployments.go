// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ec/sdk/go/ec/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a list of IDs for the deployment and resource kinds, based on the specified query.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ec/sdk/go/ec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec.GetDeployments(ctx, &ec.GetDeploymentsArgs{
//				DeploymentTemplateId: pulumi.StringRef("azure-compute-optimized"),
//				Elasticsearches: []ec.GetDeploymentsElasticsearch{
//					{
//						Healthy: pulumi.StringRef("true"),
//					},
//				},
//				EnterpriseSearches: []ec.GetDeploymentsEnterpriseSearch{
//					{
//						Healthy: pulumi.StringRef("true"),
//					},
//				},
//				IntegrationsServers: []ec.GetDeploymentsIntegrationsServer{
//					{
//						Version: pulumi.StringRef("8.0.0"),
//					},
//				},
//				Kibanas: []ec.GetDeploymentsKibana{
//					{
//						Status: pulumi.StringRef("started"),
//					},
//				},
//				NamePrefix: pulumi.StringRef("test"),
//				Size:       pulumi.IntRef(200),
//				Tags: map[string]interface{}{
//					"foo": "bar",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDeployments(ctx *pulumi.Context, args *GetDeploymentsArgs, opts ...pulumi.InvokeOption) (*GetDeploymentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDeploymentsResult
	err := ctx.Invoke("ec:index/getDeployments:getDeployments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeployments.
type GetDeploymentsArgs struct {
	// Filter by APM resource kind status or configuration.
	Apms []GetDeploymentsApm `pulumi:"apms"`
	// Filter the result set by the ID of the deployment template the deployment is based off.
	DeploymentTemplateId *string `pulumi:"deploymentTemplateId"`
	// Filter by Elasticsearch resource kind status or configuration.
	Elasticsearches []GetDeploymentsElasticsearch `pulumi:"elasticsearches"`
	// Filter by Enterprise Search resource kind status or configuration.
	EnterpriseSearches []GetDeploymentsEnterpriseSearch `pulumi:"enterpriseSearches"`
	// Filter the result set by their health status.
	Healthy *string `pulumi:"healthy"`
	// Filter by Integrations Server resource kind status or configuration.
	IntegrationsServers []GetDeploymentsIntegrationsServer `pulumi:"integrationsServers"`
	// Filter by Kibana resource kind status or configuration.
	Kibanas []GetDeploymentsKibana `pulumi:"kibanas"`
	// Prefix to filter the returned deployment list by.
	NamePrefix *string `pulumi:"namePrefix"`
	// The maximum number of deployments to return. Defaults to `100`.
	Size *int `pulumi:"size"`
	// Filter the result set by their assigned tags.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getDeployments.
type GetDeploymentsResult struct {
	// Filter by APM resource kind status or configuration.
	Apms []GetDeploymentsApm `pulumi:"apms"`
	// Filter the result set by the ID of the deployment template the deployment is based off.
	DeploymentTemplateId *string `pulumi:"deploymentTemplateId"`
	// List of deployments which match the specified query.
	Deployments []GetDeploymentsDeployment `pulumi:"deployments"`
	// Filter by Elasticsearch resource kind status or configuration.
	Elasticsearches []GetDeploymentsElasticsearch `pulumi:"elasticsearches"`
	// Filter by Enterprise Search resource kind status or configuration.
	EnterpriseSearches []GetDeploymentsEnterpriseSearch `pulumi:"enterpriseSearches"`
	// Filter the result set by their health status.
	Healthy *string `pulumi:"healthy"`
	// Unique identifier of this data source.
	Id string `pulumi:"id"`
	// Filter by Integrations Server resource kind status or configuration.
	IntegrationsServers []GetDeploymentsIntegrationsServer `pulumi:"integrationsServers"`
	// Filter by Kibana resource kind status or configuration.
	Kibanas []GetDeploymentsKibana `pulumi:"kibanas"`
	// Prefix to filter the returned deployment list by.
	NamePrefix *string `pulumi:"namePrefix"`
	// The number of deployments actually returned.
	ReturnCount int `pulumi:"returnCount"`
	// The maximum number of deployments to return. Defaults to `100`.
	Size *int `pulumi:"size"`
	// Filter the result set by their assigned tags.
	Tags map[string]string `pulumi:"tags"`
}

func GetDeploymentsOutput(ctx *pulumi.Context, args GetDeploymentsOutputArgs, opts ...pulumi.InvokeOption) GetDeploymentsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDeploymentsResult, error) {
			args := v.(GetDeploymentsArgs)
			r, err := GetDeployments(ctx, &args, opts...)
			var s GetDeploymentsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDeploymentsResultOutput)
}

// A collection of arguments for invoking getDeployments.
type GetDeploymentsOutputArgs struct {
	// Filter by APM resource kind status or configuration.
	Apms GetDeploymentsApmArrayInput `pulumi:"apms"`
	// Filter the result set by the ID of the deployment template the deployment is based off.
	DeploymentTemplateId pulumi.StringPtrInput `pulumi:"deploymentTemplateId"`
	// Filter by Elasticsearch resource kind status or configuration.
	Elasticsearches GetDeploymentsElasticsearchArrayInput `pulumi:"elasticsearches"`
	// Filter by Enterprise Search resource kind status or configuration.
	EnterpriseSearches GetDeploymentsEnterpriseSearchArrayInput `pulumi:"enterpriseSearches"`
	// Filter the result set by their health status.
	Healthy pulumi.StringPtrInput `pulumi:"healthy"`
	// Filter by Integrations Server resource kind status or configuration.
	IntegrationsServers GetDeploymentsIntegrationsServerArrayInput `pulumi:"integrationsServers"`
	// Filter by Kibana resource kind status or configuration.
	Kibanas GetDeploymentsKibanaArrayInput `pulumi:"kibanas"`
	// Prefix to filter the returned deployment list by.
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// The maximum number of deployments to return. Defaults to `100`.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// Filter the result set by their assigned tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetDeploymentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentsArgs)(nil)).Elem()
}

// A collection of values returned by getDeployments.
type GetDeploymentsResultOutput struct{ *pulumi.OutputState }

func (GetDeploymentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentsResult)(nil)).Elem()
}

func (o GetDeploymentsResultOutput) ToGetDeploymentsResultOutput() GetDeploymentsResultOutput {
	return o
}

func (o GetDeploymentsResultOutput) ToGetDeploymentsResultOutputWithContext(ctx context.Context) GetDeploymentsResultOutput {
	return o
}

// Filter by APM resource kind status or configuration.
func (o GetDeploymentsResultOutput) Apms() GetDeploymentsApmArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []GetDeploymentsApm { return v.Apms }).(GetDeploymentsApmArrayOutput)
}

// Filter the result set by the ID of the deployment template the deployment is based off.
func (o GetDeploymentsResultOutput) DeploymentTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeploymentsResult) *string { return v.DeploymentTemplateId }).(pulumi.StringPtrOutput)
}

// List of deployments which match the specified query.
func (o GetDeploymentsResultOutput) Deployments() GetDeploymentsDeploymentArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []GetDeploymentsDeployment { return v.Deployments }).(GetDeploymentsDeploymentArrayOutput)
}

// Filter by Elasticsearch resource kind status or configuration.
func (o GetDeploymentsResultOutput) Elasticsearches() GetDeploymentsElasticsearchArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []GetDeploymentsElasticsearch { return v.Elasticsearches }).(GetDeploymentsElasticsearchArrayOutput)
}

// Filter by Enterprise Search resource kind status or configuration.
func (o GetDeploymentsResultOutput) EnterpriseSearches() GetDeploymentsEnterpriseSearchArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []GetDeploymentsEnterpriseSearch { return v.EnterpriseSearches }).(GetDeploymentsEnterpriseSearchArrayOutput)
}

// Filter the result set by their health status.
func (o GetDeploymentsResultOutput) Healthy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeploymentsResult) *string { return v.Healthy }).(pulumi.StringPtrOutput)
}

// Unique identifier of this data source.
func (o GetDeploymentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Filter by Integrations Server resource kind status or configuration.
func (o GetDeploymentsResultOutput) IntegrationsServers() GetDeploymentsIntegrationsServerArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []GetDeploymentsIntegrationsServer { return v.IntegrationsServers }).(GetDeploymentsIntegrationsServerArrayOutput)
}

// Filter by Kibana resource kind status or configuration.
func (o GetDeploymentsResultOutput) Kibanas() GetDeploymentsKibanaArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []GetDeploymentsKibana { return v.Kibanas }).(GetDeploymentsKibanaArrayOutput)
}

// Prefix to filter the returned deployment list by.
func (o GetDeploymentsResultOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeploymentsResult) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// The number of deployments actually returned.
func (o GetDeploymentsResultOutput) ReturnCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetDeploymentsResult) int { return v.ReturnCount }).(pulumi.IntOutput)
}

// The maximum number of deployments to return. Defaults to `100`.
func (o GetDeploymentsResultOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDeploymentsResult) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// Filter the result set by their assigned tags.
func (o GetDeploymentsResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDeploymentsResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeploymentsResultOutput{})
}
