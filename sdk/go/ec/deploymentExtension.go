// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an Elastic Cloud extension resource, which allows extensions to be created, updated, and deleted.
//
// Extensions allow users of Elastic Cloud to use custom plugins, scripts, or dictionaries to enhance the core functionality of Elasticsearch. Before you install an extension, be sure to check out the supported and official [Elasticsearch plugins](https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html) already available.
//
// ## Example Usage
// ### With extension file
//
// ```go
// package main
//
// import (
//
//	"crypto/sha256"
//	"fmt"
//	"io/ioutil"
//
//	"github.com/pulumi/pulumi-ec/sdk/go/ec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64sha256OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := ioutil.ReadFile(path); err == nil {
//			hashedData := sha256.Sum256([]byte(fileData))
//			return pulumi.String(base64.StdEncoding.EncodeToString(hashedData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			filePath := "/path/to/plugin.zip"
//			_, err := ec.NewDeploymentExtension(ctx, "exampleExtension", &ec.DeploymentExtensionArgs{
//				Description:   pulumi.String("my extension"),
//				Version:       pulumi.String("*"),
//				ExtensionType: pulumi.String("bundle"),
//				FilePath:      pulumi.String(filePath),
//				FileHash:      filebase64sha256OrPanic(filePath),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With download URL
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ec/sdk/go/ec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec.NewDeploymentExtension(ctx, "exampleExtension", &ec.DeploymentExtensionArgs{
//				Description:   pulumi.String("my extension"),
//				DownloadUrl:   pulumi.String("https://example.net"),
//				ExtensionType: pulumi.String("bundle"),
//				Version:       pulumi.String("*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Using extension in Deployment
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ec/sdk/go/ec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleExtension, err := ec.NewDeploymentExtension(ctx, "exampleExtension", &ec.DeploymentExtensionArgs{
//				Description:   pulumi.String("my extension"),
//				Version:       pulumi.String("*"),
//				ExtensionType: pulumi.String("bundle"),
//				DownloadUrl:   pulumi.String("https://example.net"),
//			})
//			if err != nil {
//				return err
//			}
//			latest, err := ec.GetStack(ctx, &GetStackArgs{
//				VersionRegex: "latest",
//				Region:       "us-east-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ec.NewDeployment(ctx, "withExtension", &ec.DeploymentArgs{
//				Region:               pulumi.String("us-east-1"),
//				Version:              pulumi.String(latest.Version),
//				DeploymentTemplateId: pulumi.String("aws-io-optimized-v2"),
//				Elasticsearch: &DeploymentElasticsearchArgs{
//					Extensions: DeploymentElasticsearchExtensionArray{
//						&DeploymentElasticsearchExtensionArgs{
//							Name:    exampleExtension.Name,
//							Type:    pulumi.String("bundle"),
//							Version: pulumi.String(latest.Version),
//							Url:     exampleExtension.Url,
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # You can import extensions using the `id`, for example
//
// ```sh
//
//	$ pulumi import ec:index/deploymentExtension:DeploymentExtension name 320b7b540dfc967a7a649c18e2fce4ed
//
// ```
type DeploymentExtension struct {
	pulumi.CustomResourceState

	// Description of the extension.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The URL to download the extension archive.
	DownloadUrl pulumi.StringPtrOutput `pulumi:"downloadUrl"`
	// `bundle` or `plugin` allowed. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
	ExtensionType pulumi.StringOutput `pulumi:"extensionType"`
	// Hash value of the file. If it is changed, the file is reuploaded.
	FileHash pulumi.StringPtrOutput `pulumi:"fileHash"`
	// File path of the extension uploaded.
	FilePath pulumi.StringPtrOutput `pulumi:"filePath"`
	// The datetime the extension was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// Name of the extension.
	Name pulumi.StringOutput `pulumi:"name"`
	// The extension file size in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The extension URL to be used in the plan.
	Url pulumi.StringOutput `pulumi:"url"`
	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDeploymentExtension registers a new resource with the given unique name, arguments, and options.
func NewDeploymentExtension(ctx *pulumi.Context,
	name string, args *DeploymentExtensionArgs, opts ...pulumi.ResourceOption) (*DeploymentExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtensionType == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionType'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource DeploymentExtension
	err := ctx.RegisterResource("ec:index/deploymentExtension:DeploymentExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentExtension gets an existing DeploymentExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentExtensionState, opts ...pulumi.ResourceOption) (*DeploymentExtension, error) {
	var resource DeploymentExtension
	err := ctx.ReadResource("ec:index/deploymentExtension:DeploymentExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentExtension resources.
type deploymentExtensionState struct {
	// Description of the extension.
	Description *string `pulumi:"description"`
	// The URL to download the extension archive.
	DownloadUrl *string `pulumi:"downloadUrl"`
	// `bundle` or `plugin` allowed. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
	ExtensionType *string `pulumi:"extensionType"`
	// Hash value of the file. If it is changed, the file is reuploaded.
	FileHash *string `pulumi:"fileHash"`
	// File path of the extension uploaded.
	FilePath *string `pulumi:"filePath"`
	// The datetime the extension was last modified.
	LastModified *string `pulumi:"lastModified"`
	// Name of the extension.
	Name *string `pulumi:"name"`
	// The extension file size in bytes.
	Size *int `pulumi:"size"`
	// The extension URL to be used in the plan.
	Url *string `pulumi:"url"`
	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	Version *string `pulumi:"version"`
}

type DeploymentExtensionState struct {
	// Description of the extension.
	Description pulumi.StringPtrInput
	// The URL to download the extension archive.
	DownloadUrl pulumi.StringPtrInput
	// `bundle` or `plugin` allowed. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
	ExtensionType pulumi.StringPtrInput
	// Hash value of the file. If it is changed, the file is reuploaded.
	FileHash pulumi.StringPtrInput
	// File path of the extension uploaded.
	FilePath pulumi.StringPtrInput
	// The datetime the extension was last modified.
	LastModified pulumi.StringPtrInput
	// Name of the extension.
	Name pulumi.StringPtrInput
	// The extension file size in bytes.
	Size pulumi.IntPtrInput
	// The extension URL to be used in the plan.
	Url pulumi.StringPtrInput
	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	Version pulumi.StringPtrInput
}

func (DeploymentExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentExtensionState)(nil)).Elem()
}

type deploymentExtensionArgs struct {
	// Description of the extension.
	Description *string `pulumi:"description"`
	// The URL to download the extension archive.
	DownloadUrl *string `pulumi:"downloadUrl"`
	// `bundle` or `plugin` allowed. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
	ExtensionType string `pulumi:"extensionType"`
	// Hash value of the file. If it is changed, the file is reuploaded.
	FileHash *string `pulumi:"fileHash"`
	// File path of the extension uploaded.
	FilePath *string `pulumi:"filePath"`
	// Name of the extension.
	Name *string `pulumi:"name"`
	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a DeploymentExtension resource.
type DeploymentExtensionArgs struct {
	// Description of the extension.
	Description pulumi.StringPtrInput
	// The URL to download the extension archive.
	DownloadUrl pulumi.StringPtrInput
	// `bundle` or `plugin` allowed. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
	ExtensionType pulumi.StringInput
	// Hash value of the file. If it is changed, the file is reuploaded.
	FileHash pulumi.StringPtrInput
	// File path of the extension uploaded.
	FilePath pulumi.StringPtrInput
	// Name of the extension.
	Name pulumi.StringPtrInput
	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	Version pulumi.StringInput
}

func (DeploymentExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentExtensionArgs)(nil)).Elem()
}

type DeploymentExtensionInput interface {
	pulumi.Input

	ToDeploymentExtensionOutput() DeploymentExtensionOutput
	ToDeploymentExtensionOutputWithContext(ctx context.Context) DeploymentExtensionOutput
}

func (*DeploymentExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentExtension)(nil)).Elem()
}

func (i *DeploymentExtension) ToDeploymentExtensionOutput() DeploymentExtensionOutput {
	return i.ToDeploymentExtensionOutputWithContext(context.Background())
}

func (i *DeploymentExtension) ToDeploymentExtensionOutputWithContext(ctx context.Context) DeploymentExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentExtensionOutput)
}

// DeploymentExtensionArrayInput is an input type that accepts DeploymentExtensionArray and DeploymentExtensionArrayOutput values.
// You can construct a concrete instance of `DeploymentExtensionArrayInput` via:
//
//	DeploymentExtensionArray{ DeploymentExtensionArgs{...} }
type DeploymentExtensionArrayInput interface {
	pulumi.Input

	ToDeploymentExtensionArrayOutput() DeploymentExtensionArrayOutput
	ToDeploymentExtensionArrayOutputWithContext(context.Context) DeploymentExtensionArrayOutput
}

type DeploymentExtensionArray []DeploymentExtensionInput

func (DeploymentExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentExtension)(nil)).Elem()
}

func (i DeploymentExtensionArray) ToDeploymentExtensionArrayOutput() DeploymentExtensionArrayOutput {
	return i.ToDeploymentExtensionArrayOutputWithContext(context.Background())
}

func (i DeploymentExtensionArray) ToDeploymentExtensionArrayOutputWithContext(ctx context.Context) DeploymentExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentExtensionArrayOutput)
}

// DeploymentExtensionMapInput is an input type that accepts DeploymentExtensionMap and DeploymentExtensionMapOutput values.
// You can construct a concrete instance of `DeploymentExtensionMapInput` via:
//
//	DeploymentExtensionMap{ "key": DeploymentExtensionArgs{...} }
type DeploymentExtensionMapInput interface {
	pulumi.Input

	ToDeploymentExtensionMapOutput() DeploymentExtensionMapOutput
	ToDeploymentExtensionMapOutputWithContext(context.Context) DeploymentExtensionMapOutput
}

type DeploymentExtensionMap map[string]DeploymentExtensionInput

func (DeploymentExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentExtension)(nil)).Elem()
}

func (i DeploymentExtensionMap) ToDeploymentExtensionMapOutput() DeploymentExtensionMapOutput {
	return i.ToDeploymentExtensionMapOutputWithContext(context.Background())
}

func (i DeploymentExtensionMap) ToDeploymentExtensionMapOutputWithContext(ctx context.Context) DeploymentExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentExtensionMapOutput)
}

type DeploymentExtensionOutput struct{ *pulumi.OutputState }

func (DeploymentExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentExtension)(nil)).Elem()
}

func (o DeploymentExtensionOutput) ToDeploymentExtensionOutput() DeploymentExtensionOutput {
	return o
}

func (o DeploymentExtensionOutput) ToDeploymentExtensionOutputWithContext(ctx context.Context) DeploymentExtensionOutput {
	return o
}

type DeploymentExtensionArrayOutput struct{ *pulumi.OutputState }

func (DeploymentExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentExtension)(nil)).Elem()
}

func (o DeploymentExtensionArrayOutput) ToDeploymentExtensionArrayOutput() DeploymentExtensionArrayOutput {
	return o
}

func (o DeploymentExtensionArrayOutput) ToDeploymentExtensionArrayOutputWithContext(ctx context.Context) DeploymentExtensionArrayOutput {
	return o
}

func (o DeploymentExtensionArrayOutput) Index(i pulumi.IntInput) DeploymentExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeploymentExtension {
		return vs[0].([]*DeploymentExtension)[vs[1].(int)]
	}).(DeploymentExtensionOutput)
}

type DeploymentExtensionMapOutput struct{ *pulumi.OutputState }

func (DeploymentExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentExtension)(nil)).Elem()
}

func (o DeploymentExtensionMapOutput) ToDeploymentExtensionMapOutput() DeploymentExtensionMapOutput {
	return o
}

func (o DeploymentExtensionMapOutput) ToDeploymentExtensionMapOutputWithContext(ctx context.Context) DeploymentExtensionMapOutput {
	return o
}

func (o DeploymentExtensionMapOutput) MapIndex(k pulumi.StringInput) DeploymentExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeploymentExtension {
		return vs[0].(map[string]*DeploymentExtension)[vs[1].(string)]
	}).(DeploymentExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentExtensionInput)(nil)).Elem(), &DeploymentExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentExtensionArrayInput)(nil)).Elem(), DeploymentExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentExtensionMapInput)(nil)).Elem(), DeploymentExtensionMap{})
	pulumi.RegisterOutputType(DeploymentExtensionOutput{})
	pulumi.RegisterOutputType(DeploymentExtensionArrayOutput{})
	pulumi.RegisterOutputType(DeploymentExtensionMapOutput{})
}
