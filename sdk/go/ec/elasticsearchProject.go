// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ec/sdk/go/ec/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Technical preview
//
// This functionality is in technical preview and may be changed or removed in a future release.
// Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ec/sdk/go/ec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec.NewElasticsearchProject(ctx, "my_project", &ec.ElasticsearchProjectArgs{
//				Name:     pulumi.String("my_project"),
//				RegionId: pulumi.String("aws-us-east-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Projects can be imported using the `id`, for example:
//
// ```sh
// $ pulumi import ec:index/elasticsearchProject:ElasticsearchProject id 320b7b540dfc967a7a649c18e2fce4ed
// ```
type ElasticsearchProject struct {
	pulumi.CustomResourceState

	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
	CloudId pulumi.StringOutput `pulumi:"cloudId"`
	// Basic auth credentials to access the Elasticsearch API.
	Credentials ElasticsearchProjectCredentialsOutput `pulumi:"credentials"`
	// The endpoints to access the different apps of the project.
	Endpoints ElasticsearchProjectEndpointsOutput `pulumi:"endpoints"`
	// Additional details about the project.
	Metadata ElasticsearchProjectMetadataOutput `pulumi:"metadata"`
	// Descriptive name for a project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The purpose for which the hardware of this elasticsearch project is optimized for. Also known as the Elasticsearch project subtype.
	OptimizedFor pulumi.StringOutput `pulumi:"optimizedFor"`
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// Configuration for entire set of capabilities that make the data searchable in Elasticsearch.
	SearchLake ElasticsearchProjectSearchLakeOutput `pulumi:"searchLake"`
	// the type of the project
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewElasticsearchProject registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchProject(ctx *pulumi.Context,
	name string, args *ElasticsearchProjectArgs, opts ...pulumi.ResourceOption) (*ElasticsearchProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElasticsearchProject
	err := ctx.RegisterResource("ec:index/elasticsearchProject:ElasticsearchProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchProject gets an existing ElasticsearchProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchProjectState, opts ...pulumi.ResourceOption) (*ElasticsearchProject, error) {
	var resource ElasticsearchProject
	err := ctx.ReadResource("ec:index/elasticsearchProject:ElasticsearchProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchProject resources.
type elasticsearchProjectState struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias *string `pulumi:"alias"`
	// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
	CloudId *string `pulumi:"cloudId"`
	// Basic auth credentials to access the Elasticsearch API.
	Credentials *ElasticsearchProjectCredentials `pulumi:"credentials"`
	// The endpoints to access the different apps of the project.
	Endpoints *ElasticsearchProjectEndpoints `pulumi:"endpoints"`
	// Additional details about the project.
	Metadata *ElasticsearchProjectMetadata `pulumi:"metadata"`
	// Descriptive name for a project.
	Name *string `pulumi:"name"`
	// The purpose for which the hardware of this elasticsearch project is optimized for. Also known as the Elasticsearch project subtype.
	OptimizedFor *string `pulumi:"optimizedFor"`
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId *string `pulumi:"regionId"`
	// Configuration for entire set of capabilities that make the data searchable in Elasticsearch.
	SearchLake *ElasticsearchProjectSearchLake `pulumi:"searchLake"`
	// the type of the project
	Type *string `pulumi:"type"`
}

type ElasticsearchProjectState struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias pulumi.StringPtrInput
	// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
	CloudId pulumi.StringPtrInput
	// Basic auth credentials to access the Elasticsearch API.
	Credentials ElasticsearchProjectCredentialsPtrInput
	// The endpoints to access the different apps of the project.
	Endpoints ElasticsearchProjectEndpointsPtrInput
	// Additional details about the project.
	Metadata ElasticsearchProjectMetadataPtrInput
	// Descriptive name for a project.
	Name pulumi.StringPtrInput
	// The purpose for which the hardware of this elasticsearch project is optimized for. Also known as the Elasticsearch project subtype.
	OptimizedFor pulumi.StringPtrInput
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId pulumi.StringPtrInput
	// Configuration for entire set of capabilities that make the data searchable in Elasticsearch.
	SearchLake ElasticsearchProjectSearchLakePtrInput
	// the type of the project
	Type pulumi.StringPtrInput
}

func (ElasticsearchProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchProjectState)(nil)).Elem()
}

type elasticsearchProjectArgs struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias *string `pulumi:"alias"`
	// Descriptive name for a project.
	Name *string `pulumi:"name"`
	// The purpose for which the hardware of this elasticsearch project is optimized for. Also known as the Elasticsearch project subtype.
	OptimizedFor *string `pulumi:"optimizedFor"`
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId string `pulumi:"regionId"`
	// Configuration for entire set of capabilities that make the data searchable in Elasticsearch.
	SearchLake *ElasticsearchProjectSearchLake `pulumi:"searchLake"`
}

// The set of arguments for constructing a ElasticsearchProject resource.
type ElasticsearchProjectArgs struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias pulumi.StringPtrInput
	// Descriptive name for a project.
	Name pulumi.StringPtrInput
	// The purpose for which the hardware of this elasticsearch project is optimized for. Also known as the Elasticsearch project subtype.
	OptimizedFor pulumi.StringPtrInput
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId pulumi.StringInput
	// Configuration for entire set of capabilities that make the data searchable in Elasticsearch.
	SearchLake ElasticsearchProjectSearchLakePtrInput
}

func (ElasticsearchProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchProjectArgs)(nil)).Elem()
}

type ElasticsearchProjectInput interface {
	pulumi.Input

	ToElasticsearchProjectOutput() ElasticsearchProjectOutput
	ToElasticsearchProjectOutputWithContext(ctx context.Context) ElasticsearchProjectOutput
}

func (*ElasticsearchProject) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchProject)(nil)).Elem()
}

func (i *ElasticsearchProject) ToElasticsearchProjectOutput() ElasticsearchProjectOutput {
	return i.ToElasticsearchProjectOutputWithContext(context.Background())
}

func (i *ElasticsearchProject) ToElasticsearchProjectOutputWithContext(ctx context.Context) ElasticsearchProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchProjectOutput)
}

// ElasticsearchProjectArrayInput is an input type that accepts ElasticsearchProjectArray and ElasticsearchProjectArrayOutput values.
// You can construct a concrete instance of `ElasticsearchProjectArrayInput` via:
//
//	ElasticsearchProjectArray{ ElasticsearchProjectArgs{...} }
type ElasticsearchProjectArrayInput interface {
	pulumi.Input

	ToElasticsearchProjectArrayOutput() ElasticsearchProjectArrayOutput
	ToElasticsearchProjectArrayOutputWithContext(context.Context) ElasticsearchProjectArrayOutput
}

type ElasticsearchProjectArray []ElasticsearchProjectInput

func (ElasticsearchProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchProject)(nil)).Elem()
}

func (i ElasticsearchProjectArray) ToElasticsearchProjectArrayOutput() ElasticsearchProjectArrayOutput {
	return i.ToElasticsearchProjectArrayOutputWithContext(context.Background())
}

func (i ElasticsearchProjectArray) ToElasticsearchProjectArrayOutputWithContext(ctx context.Context) ElasticsearchProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchProjectArrayOutput)
}

// ElasticsearchProjectMapInput is an input type that accepts ElasticsearchProjectMap and ElasticsearchProjectMapOutput values.
// You can construct a concrete instance of `ElasticsearchProjectMapInput` via:
//
//	ElasticsearchProjectMap{ "key": ElasticsearchProjectArgs{...} }
type ElasticsearchProjectMapInput interface {
	pulumi.Input

	ToElasticsearchProjectMapOutput() ElasticsearchProjectMapOutput
	ToElasticsearchProjectMapOutputWithContext(context.Context) ElasticsearchProjectMapOutput
}

type ElasticsearchProjectMap map[string]ElasticsearchProjectInput

func (ElasticsearchProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchProject)(nil)).Elem()
}

func (i ElasticsearchProjectMap) ToElasticsearchProjectMapOutput() ElasticsearchProjectMapOutput {
	return i.ToElasticsearchProjectMapOutputWithContext(context.Background())
}

func (i ElasticsearchProjectMap) ToElasticsearchProjectMapOutputWithContext(ctx context.Context) ElasticsearchProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchProjectMapOutput)
}

type ElasticsearchProjectOutput struct{ *pulumi.OutputState }

func (ElasticsearchProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchProject)(nil)).Elem()
}

func (o ElasticsearchProjectOutput) ToElasticsearchProjectOutput() ElasticsearchProjectOutput {
	return o
}

func (o ElasticsearchProjectOutput) ToElasticsearchProjectOutputWithContext(ctx context.Context) ElasticsearchProjectOutput {
	return o
}

// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
func (o ElasticsearchProjectOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchProject) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
func (o ElasticsearchProjectOutput) CloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchProject) pulumi.StringOutput { return v.CloudId }).(pulumi.StringOutput)
}

// Basic auth credentials to access the Elasticsearch API.
func (o ElasticsearchProjectOutput) Credentials() ElasticsearchProjectCredentialsOutput {
	return o.ApplyT(func(v *ElasticsearchProject) ElasticsearchProjectCredentialsOutput { return v.Credentials }).(ElasticsearchProjectCredentialsOutput)
}

// The endpoints to access the different apps of the project.
func (o ElasticsearchProjectOutput) Endpoints() ElasticsearchProjectEndpointsOutput {
	return o.ApplyT(func(v *ElasticsearchProject) ElasticsearchProjectEndpointsOutput { return v.Endpoints }).(ElasticsearchProjectEndpointsOutput)
}

// Additional details about the project.
func (o ElasticsearchProjectOutput) Metadata() ElasticsearchProjectMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchProject) ElasticsearchProjectMetadataOutput { return v.Metadata }).(ElasticsearchProjectMetadataOutput)
}

// Descriptive name for a project.
func (o ElasticsearchProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The purpose for which the hardware of this elasticsearch project is optimized for. Also known as the Elasticsearch project subtype.
func (o ElasticsearchProjectOutput) OptimizedFor() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchProject) pulumi.StringOutput { return v.OptimizedFor }).(pulumi.StringOutput)
}

// Unique human-readable identifier for a region in Elastic Cloud.
func (o ElasticsearchProjectOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchProject) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// Configuration for entire set of capabilities that make the data searchable in Elasticsearch.
func (o ElasticsearchProjectOutput) SearchLake() ElasticsearchProjectSearchLakeOutput {
	return o.ApplyT(func(v *ElasticsearchProject) ElasticsearchProjectSearchLakeOutput { return v.SearchLake }).(ElasticsearchProjectSearchLakeOutput)
}

// the type of the project
func (o ElasticsearchProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchProject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ElasticsearchProjectArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchProject)(nil)).Elem()
}

func (o ElasticsearchProjectArrayOutput) ToElasticsearchProjectArrayOutput() ElasticsearchProjectArrayOutput {
	return o
}

func (o ElasticsearchProjectArrayOutput) ToElasticsearchProjectArrayOutputWithContext(ctx context.Context) ElasticsearchProjectArrayOutput {
	return o
}

func (o ElasticsearchProjectArrayOutput) Index(i pulumi.IntInput) ElasticsearchProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchProject {
		return vs[0].([]*ElasticsearchProject)[vs[1].(int)]
	}).(ElasticsearchProjectOutput)
}

type ElasticsearchProjectMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchProject)(nil)).Elem()
}

func (o ElasticsearchProjectMapOutput) ToElasticsearchProjectMapOutput() ElasticsearchProjectMapOutput {
	return o
}

func (o ElasticsearchProjectMapOutput) ToElasticsearchProjectMapOutputWithContext(ctx context.Context) ElasticsearchProjectMapOutput {
	return o
}

func (o ElasticsearchProjectMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchProject {
		return vs[0].(map[string]*ElasticsearchProject)[vs[1].(string)]
	}).(ElasticsearchProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchProjectInput)(nil)).Elem(), &ElasticsearchProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchProjectArrayInput)(nil)).Elem(), ElasticsearchProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchProjectMapInput)(nil)).Elem(), ElasticsearchProjectMap{})
	pulumi.RegisterOutputType(ElasticsearchProjectOutput{})
	pulumi.RegisterOutputType(ElasticsearchProjectArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchProjectMapOutput{})
}
