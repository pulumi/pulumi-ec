// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ec/sdk/go/ec/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The provider type for the ec package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// API Key to use for API authentication. The only valid authentication mechanism for the Elasticsearch Service.
	Apikey pulumi.StringPtrOutput `pulumi:"apikey"`
	// Endpoint where the terraform provider will point to. Defaults to "https://api.elastic-cloud.com".
	Endpoint pulumi.StringPtrOutput `pulumi:"endpoint"`
	// Password to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
	// Private.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Timeout used for individual HTTP calls. Defaults to "1m".
	Timeout pulumi.StringPtrOutput `pulumi:"timeout"`
	// Username to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
	// Private.
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// Timeout used for individual HTTP calls. Defaults to "1m".
	VerboseFile pulumi.StringPtrOutput `pulumi:"verboseFile"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Apikey != nil {
		args.Apikey = pulumi.ToSecret(args.Apikey).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apikey",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:ec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// API Key to use for API authentication. The only valid authentication mechanism for the Elasticsearch Service.
	Apikey *string `pulumi:"apikey"`
	// Endpoint where the terraform provider will point to. Defaults to "https://api.elastic-cloud.com".
	Endpoint *string `pulumi:"endpoint"`
	// Allow the provider to skip TLS validation on its outgoing HTTP calls.
	Insecure *bool `pulumi:"insecure"`
	// Password to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
	// Private.
	Password *string `pulumi:"password"`
	// Timeout used for individual HTTP calls. Defaults to "1m".
	Timeout *string `pulumi:"timeout"`
	// Username to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
	// Private.
	Username *string `pulumi:"username"`
	// When set, a "request.log" file will be written with all outgoing HTTP requests. Defaults to "false".
	Verbose *bool `pulumi:"verbose"`
	// When set with verbose, the contents of the Authorization header will not be redacted. Defaults to "false".
	VerboseCredentials *bool `pulumi:"verboseCredentials"`
	// Timeout used for individual HTTP calls. Defaults to "1m".
	VerboseFile *string `pulumi:"verboseFile"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// API Key to use for API authentication. The only valid authentication mechanism for the Elasticsearch Service.
	Apikey pulumi.StringPtrInput
	// Endpoint where the terraform provider will point to. Defaults to "https://api.elastic-cloud.com".
	Endpoint pulumi.StringPtrInput
	// Allow the provider to skip TLS validation on its outgoing HTTP calls.
	Insecure pulumi.BoolPtrInput
	// Password to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
	// Private.
	Password pulumi.StringPtrInput
	// Timeout used for individual HTTP calls. Defaults to "1m".
	Timeout pulumi.StringPtrInput
	// Username to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
	// Private.
	Username pulumi.StringPtrInput
	// When set, a "request.log" file will be written with all outgoing HTTP requests. Defaults to "false".
	Verbose pulumi.BoolPtrInput
	// When set with verbose, the contents of the Authorization header will not be redacted. Defaults to "false".
	VerboseCredentials pulumi.BoolPtrInput
	// Timeout used for individual HTTP calls. Defaults to "1m".
	VerboseFile pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: i.ToProviderOutputWithContext(ctx).OutputState,
	}
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: o.OutputState,
	}
}

// API Key to use for API authentication. The only valid authentication mechanism for the Elasticsearch Service.
func (o ProviderOutput) Apikey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Apikey }).(pulumi.StringPtrOutput)
}

// Endpoint where the terraform provider will point to. Defaults to "https://api.elastic-cloud.com".
func (o ProviderOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Password to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
// Private.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Timeout used for individual HTTP calls. Defaults to "1m".
func (o ProviderOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Username to use for API authentication. Available only when targeting ECE Installations or Elasticsearch Service
// Private.
func (o ProviderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// Timeout used for individual HTTP calls. Defaults to "1m".
func (o ProviderOutput) VerboseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.VerboseFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
