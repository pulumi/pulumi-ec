// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-ec/sdk/go/ec/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Technical preview
//
// This functionality is in technical preview and may be changed or removed in a future release.
// Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ec/sdk/go/ec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec.NewObservabilityProject(ctx, "my_project", &ec.ObservabilityProjectArgs{
//				Name:     pulumi.String("my_project"),
//				RegionId: pulumi.String("aws-us-east-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Projects can be imported using the `id`, for example:
//
// ```sh
// $ pulumi import ec:index/observabilityProject:ObservabilityProject id 320b7b540dfc967a7a649c18e2fce4ed
// ```
type ObservabilityProject struct {
	pulumi.CustomResourceState

	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
	CloudId pulumi.StringOutput `pulumi:"cloudId"`
	// Basic auth credentials to access the Elasticsearch API.
	Credentials ObservabilityProjectCredentialsOutput `pulumi:"credentials"`
	// The endpoints to access the different apps of the project.
	Endpoints ObservabilityProjectEndpointsOutput `pulumi:"endpoints"`
	// Additional details about the project.
	Metadata ObservabilityProjectMetadataOutput `pulumi:"metadata"`
	// Descriptive name for a project.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// the type of the project
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewObservabilityProject registers a new resource with the given unique name, arguments, and options.
func NewObservabilityProject(ctx *pulumi.Context,
	name string, args *ObservabilityProjectArgs, opts ...pulumi.ResourceOption) (*ObservabilityProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservabilityProject
	err := ctx.RegisterResource("ec:index/observabilityProject:ObservabilityProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservabilityProject gets an existing ObservabilityProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservabilityProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservabilityProjectState, opts ...pulumi.ResourceOption) (*ObservabilityProject, error) {
	var resource ObservabilityProject
	err := ctx.ReadResource("ec:index/observabilityProject:ObservabilityProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservabilityProject resources.
type observabilityProjectState struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias *string `pulumi:"alias"`
	// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
	CloudId *string `pulumi:"cloudId"`
	// Basic auth credentials to access the Elasticsearch API.
	Credentials *ObservabilityProjectCredentials `pulumi:"credentials"`
	// The endpoints to access the different apps of the project.
	Endpoints *ObservabilityProjectEndpoints `pulumi:"endpoints"`
	// Additional details about the project.
	Metadata *ObservabilityProjectMetadata `pulumi:"metadata"`
	// Descriptive name for a project.
	Name *string `pulumi:"name"`
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId *string `pulumi:"regionId"`
	// the type of the project
	Type *string `pulumi:"type"`
}

type ObservabilityProjectState struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias pulumi.StringPtrInput
	// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
	CloudId pulumi.StringPtrInput
	// Basic auth credentials to access the Elasticsearch API.
	Credentials ObservabilityProjectCredentialsPtrInput
	// The endpoints to access the different apps of the project.
	Endpoints ObservabilityProjectEndpointsPtrInput
	// Additional details about the project.
	Metadata ObservabilityProjectMetadataPtrInput
	// Descriptive name for a project.
	Name pulumi.StringPtrInput
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId pulumi.StringPtrInput
	// the type of the project
	Type pulumi.StringPtrInput
}

func (ObservabilityProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityProjectState)(nil)).Elem()
}

type observabilityProjectArgs struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias *string `pulumi:"alias"`
	// Descriptive name for a project.
	Name *string `pulumi:"name"`
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId string `pulumi:"regionId"`
}

// The set of arguments for constructing a ObservabilityProject resource.
type ObservabilityProjectArgs struct {
	// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
	Alias pulumi.StringPtrInput
	// Descriptive name for a project.
	Name pulumi.StringPtrInput
	// Unique human-readable identifier for a region in Elastic Cloud.
	RegionId pulumi.StringInput
}

func (ObservabilityProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observabilityProjectArgs)(nil)).Elem()
}

type ObservabilityProjectInput interface {
	pulumi.Input

	ToObservabilityProjectOutput() ObservabilityProjectOutput
	ToObservabilityProjectOutputWithContext(ctx context.Context) ObservabilityProjectOutput
}

func (*ObservabilityProject) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityProject)(nil)).Elem()
}

func (i *ObservabilityProject) ToObservabilityProjectOutput() ObservabilityProjectOutput {
	return i.ToObservabilityProjectOutputWithContext(context.Background())
}

func (i *ObservabilityProject) ToObservabilityProjectOutputWithContext(ctx context.Context) ObservabilityProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityProjectOutput)
}

// ObservabilityProjectArrayInput is an input type that accepts ObservabilityProjectArray and ObservabilityProjectArrayOutput values.
// You can construct a concrete instance of `ObservabilityProjectArrayInput` via:
//
//	ObservabilityProjectArray{ ObservabilityProjectArgs{...} }
type ObservabilityProjectArrayInput interface {
	pulumi.Input

	ToObservabilityProjectArrayOutput() ObservabilityProjectArrayOutput
	ToObservabilityProjectArrayOutputWithContext(context.Context) ObservabilityProjectArrayOutput
}

type ObservabilityProjectArray []ObservabilityProjectInput

func (ObservabilityProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityProject)(nil)).Elem()
}

func (i ObservabilityProjectArray) ToObservabilityProjectArrayOutput() ObservabilityProjectArrayOutput {
	return i.ToObservabilityProjectArrayOutputWithContext(context.Background())
}

func (i ObservabilityProjectArray) ToObservabilityProjectArrayOutputWithContext(ctx context.Context) ObservabilityProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityProjectArrayOutput)
}

// ObservabilityProjectMapInput is an input type that accepts ObservabilityProjectMap and ObservabilityProjectMapOutput values.
// You can construct a concrete instance of `ObservabilityProjectMapInput` via:
//
//	ObservabilityProjectMap{ "key": ObservabilityProjectArgs{...} }
type ObservabilityProjectMapInput interface {
	pulumi.Input

	ToObservabilityProjectMapOutput() ObservabilityProjectMapOutput
	ToObservabilityProjectMapOutputWithContext(context.Context) ObservabilityProjectMapOutput
}

type ObservabilityProjectMap map[string]ObservabilityProjectInput

func (ObservabilityProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityProject)(nil)).Elem()
}

func (i ObservabilityProjectMap) ToObservabilityProjectMapOutput() ObservabilityProjectMapOutput {
	return i.ToObservabilityProjectMapOutputWithContext(context.Background())
}

func (i ObservabilityProjectMap) ToObservabilityProjectMapOutputWithContext(ctx context.Context) ObservabilityProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservabilityProjectMapOutput)
}

type ObservabilityProjectOutput struct{ *pulumi.OutputState }

func (ObservabilityProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservabilityProject)(nil)).Elem()
}

func (o ObservabilityProjectOutput) ToObservabilityProjectOutput() ObservabilityProjectOutput {
	return o
}

func (o ObservabilityProjectOutput) ToObservabilityProjectOutputWithContext(ctx context.Context) ObservabilityProjectOutput {
	return o
}

// A custom domain label compatible with RFC-1035 standards. Derived from the project name by default.
func (o ObservabilityProjectOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityProject) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// The cloud ID, an encoded string that provides other Elastic services with the necessary information to connect to this Elasticsearch and Kibana.
func (o ObservabilityProjectOutput) CloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityProject) pulumi.StringOutput { return v.CloudId }).(pulumi.StringOutput)
}

// Basic auth credentials to access the Elasticsearch API.
func (o ObservabilityProjectOutput) Credentials() ObservabilityProjectCredentialsOutput {
	return o.ApplyT(func(v *ObservabilityProject) ObservabilityProjectCredentialsOutput { return v.Credentials }).(ObservabilityProjectCredentialsOutput)
}

// The endpoints to access the different apps of the project.
func (o ObservabilityProjectOutput) Endpoints() ObservabilityProjectEndpointsOutput {
	return o.ApplyT(func(v *ObservabilityProject) ObservabilityProjectEndpointsOutput { return v.Endpoints }).(ObservabilityProjectEndpointsOutput)
}

// Additional details about the project.
func (o ObservabilityProjectOutput) Metadata() ObservabilityProjectMetadataOutput {
	return o.ApplyT(func(v *ObservabilityProject) ObservabilityProjectMetadataOutput { return v.Metadata }).(ObservabilityProjectMetadataOutput)
}

// Descriptive name for a project.
func (o ObservabilityProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique human-readable identifier for a region in Elastic Cloud.
func (o ObservabilityProjectOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityProject) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// the type of the project
func (o ObservabilityProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservabilityProject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ObservabilityProjectArrayOutput struct{ *pulumi.OutputState }

func (ObservabilityProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservabilityProject)(nil)).Elem()
}

func (o ObservabilityProjectArrayOutput) ToObservabilityProjectArrayOutput() ObservabilityProjectArrayOutput {
	return o
}

func (o ObservabilityProjectArrayOutput) ToObservabilityProjectArrayOutputWithContext(ctx context.Context) ObservabilityProjectArrayOutput {
	return o
}

func (o ObservabilityProjectArrayOutput) Index(i pulumi.IntInput) ObservabilityProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservabilityProject {
		return vs[0].([]*ObservabilityProject)[vs[1].(int)]
	}).(ObservabilityProjectOutput)
}

type ObservabilityProjectMapOutput struct{ *pulumi.OutputState }

func (ObservabilityProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservabilityProject)(nil)).Elem()
}

func (o ObservabilityProjectMapOutput) ToObservabilityProjectMapOutput() ObservabilityProjectMapOutput {
	return o
}

func (o ObservabilityProjectMapOutput) ToObservabilityProjectMapOutputWithContext(ctx context.Context) ObservabilityProjectMapOutput {
	return o
}

func (o ObservabilityProjectMapOutput) MapIndex(k pulumi.StringInput) ObservabilityProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservabilityProject {
		return vs[0].(map[string]*ObservabilityProject)[vs[1].(string)]
	}).(ObservabilityProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityProjectInput)(nil)).Elem(), &ObservabilityProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityProjectArrayInput)(nil)).Elem(), ObservabilityProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservabilityProjectMapInput)(nil)).Elem(), ObservabilityProjectMap{})
	pulumi.RegisterOutputType(ObservabilityProjectOutput{})
	pulumi.RegisterOutputType(ObservabilityProjectArrayOutput{})
	pulumi.RegisterOutputType(ObservabilityProjectMapOutput{})
}
