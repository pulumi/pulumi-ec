// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-ec/sdk/go/ec/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about an existing Elastic Cloud deployment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-ec/sdk/go/ec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ec.LookupDeployment(ctx, &ec.LookupDeploymentArgs{
//				Id: "f759065e5e64e9f3546f6c44f2743893",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDeployment(ctx *pulumi.Context, args *LookupDeploymentArgs, opts ...pulumi.InvokeOption) (*LookupDeploymentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeploymentResult
	err := ctx.Invoke("ec:index/getDeployment:getDeployment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeployment.
type LookupDeploymentArgs struct {
	// The unique ID of the deployment.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDeployment.
type LookupDeploymentResult struct {
	// Deployment alias.
	Alias string `pulumi:"alias"`
	// Instance configuration of the APM type.
	Apms []GetDeploymentApm `pulumi:"apms"`
	// ID of the deployment template this deployment is based off.
	DeploymentTemplateId string `pulumi:"deploymentTemplateId"`
	// Instance configuration of the Elasticsearch Elasticsearch resource.
	Elasticsearches []GetDeploymentElasticsearch `pulumi:"elasticsearches"`
	// Instance configuration of the Enterprise Search type.
	EnterpriseSearches []GetDeploymentEnterpriseSearch `pulumi:"enterpriseSearches"`
	// Overall health status of the deployment.
	Healthy bool `pulumi:"healthy"`
	// The unique ID of the deployment.
	Id string `pulumi:"id"`
	// Instance configuration of the Integrations Server type.
	IntegrationsServers []GetDeploymentIntegrationsServer `pulumi:"integrationsServers"`
	// Instance configuration of the Kibana type.
	Kibanas []GetDeploymentKibana `pulumi:"kibanas"`
	// The name of the deployment.
	Name string `pulumi:"name"`
	// Observability settings. Information about logs and metrics shipped to a dedicated deployment.
	Observabilities []GetDeploymentObservability `pulumi:"observabilities"`
	// Region where the deployment is hosted.
	Region string `pulumi:"region"`
	// Key value map of arbitrary string tags.
	Tags map[string]string `pulumi:"tags"`
	// Traffic filter block, which contains a list of traffic filter rule identifiers.
	TrafficFilters []string `pulumi:"trafficFilters"`
}

func LookupDeploymentOutput(ctx *pulumi.Context, args LookupDeploymentOutputArgs, opts ...pulumi.InvokeOption) LookupDeploymentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDeploymentResultOutput, error) {
			args := v.(LookupDeploymentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ec:index/getDeployment:getDeployment", args, LookupDeploymentResultOutput{}, options).(LookupDeploymentResultOutput), nil
		}).(LookupDeploymentResultOutput)
}

// A collection of arguments for invoking getDeployment.
type LookupDeploymentOutputArgs struct {
	// The unique ID of the deployment.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDeploymentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeploymentArgs)(nil)).Elem()
}

// A collection of values returned by getDeployment.
type LookupDeploymentResultOutput struct{ *pulumi.OutputState }

func (LookupDeploymentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeploymentResult)(nil)).Elem()
}

func (o LookupDeploymentResultOutput) ToLookupDeploymentResultOutput() LookupDeploymentResultOutput {
	return o
}

func (o LookupDeploymentResultOutput) ToLookupDeploymentResultOutputWithContext(ctx context.Context) LookupDeploymentResultOutput {
	return o
}

// Deployment alias.
func (o LookupDeploymentResultOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Alias }).(pulumi.StringOutput)
}

// Instance configuration of the APM type.
func (o LookupDeploymentResultOutput) Apms() GetDeploymentApmArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentApm { return v.Apms }).(GetDeploymentApmArrayOutput)
}

// ID of the deployment template this deployment is based off.
func (o LookupDeploymentResultOutput) DeploymentTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.DeploymentTemplateId }).(pulumi.StringOutput)
}

// Instance configuration of the Elasticsearch Elasticsearch resource.
func (o LookupDeploymentResultOutput) Elasticsearches() GetDeploymentElasticsearchArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentElasticsearch { return v.Elasticsearches }).(GetDeploymentElasticsearchArrayOutput)
}

// Instance configuration of the Enterprise Search type.
func (o LookupDeploymentResultOutput) EnterpriseSearches() GetDeploymentEnterpriseSearchArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentEnterpriseSearch { return v.EnterpriseSearches }).(GetDeploymentEnterpriseSearchArrayOutput)
}

// Overall health status of the deployment.
func (o LookupDeploymentResultOutput) Healthy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeploymentResult) bool { return v.Healthy }).(pulumi.BoolOutput)
}

// The unique ID of the deployment.
func (o LookupDeploymentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Instance configuration of the Integrations Server type.
func (o LookupDeploymentResultOutput) IntegrationsServers() GetDeploymentIntegrationsServerArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentIntegrationsServer { return v.IntegrationsServers }).(GetDeploymentIntegrationsServerArrayOutput)
}

// Instance configuration of the Kibana type.
func (o LookupDeploymentResultOutput) Kibanas() GetDeploymentKibanaArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentKibana { return v.Kibanas }).(GetDeploymentKibanaArrayOutput)
}

// The name of the deployment.
func (o LookupDeploymentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Observability settings. Information about logs and metrics shipped to a dedicated deployment.
func (o LookupDeploymentResultOutput) Observabilities() GetDeploymentObservabilityArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentObservability { return v.Observabilities }).(GetDeploymentObservabilityArrayOutput)
}

// Region where the deployment is hosted.
func (o LookupDeploymentResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Region }).(pulumi.StringOutput)
}

// Key value map of arbitrary string tags.
func (o LookupDeploymentResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDeploymentResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Traffic filter block, which contains a list of traffic filter rule identifiers.
func (o LookupDeploymentResultOutput) TrafficFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []string { return v.TrafficFilters }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeploymentResultOutput{})
}
