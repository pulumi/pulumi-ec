// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DeploymentElasticsearchKeystore struct {
	pulumi.CustomResourceState

	// Optionally stores the remote keystore setting as a file. The default is false, which stores the keystore setting as
	// string when value is a plain string
	AsFile pulumi.BoolPtrOutput `pulumi:"asFile"`
	// Required deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written
	// to
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// Required name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be
	// overridden
	SettingName pulumi.StringOutput `pulumi:"settingName"`
	// Required value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the
	// keystore.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewDeploymentElasticsearchKeystore registers a new resource with the given unique name, arguments, and options.
func NewDeploymentElasticsearchKeystore(ctx *pulumi.Context,
	name string, args *DeploymentElasticsearchKeystoreArgs, opts ...pulumi.ResourceOption) (*DeploymentElasticsearchKeystore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentId'")
	}
	if args.SettingName == nil {
		return nil, errors.New("invalid value for required argument 'SettingName'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource DeploymentElasticsearchKeystore
	err := ctx.RegisterResource("elasticcloud:index/deploymentElasticsearchKeystore:DeploymentElasticsearchKeystore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentElasticsearchKeystore gets an existing DeploymentElasticsearchKeystore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentElasticsearchKeystore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentElasticsearchKeystoreState, opts ...pulumi.ResourceOption) (*DeploymentElasticsearchKeystore, error) {
	var resource DeploymentElasticsearchKeystore
	err := ctx.ReadResource("elasticcloud:index/deploymentElasticsearchKeystore:DeploymentElasticsearchKeystore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentElasticsearchKeystore resources.
type deploymentElasticsearchKeystoreState struct {
	// Optionally stores the remote keystore setting as a file. The default is false, which stores the keystore setting as
	// string when value is a plain string
	AsFile *bool `pulumi:"asFile"`
	// Required deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written
	// to
	DeploymentId *string `pulumi:"deploymentId"`
	// Required name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be
	// overridden
	SettingName *string `pulumi:"settingName"`
	// Required value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the
	// keystore.
	Value *string `pulumi:"value"`
}

type DeploymentElasticsearchKeystoreState struct {
	// Optionally stores the remote keystore setting as a file. The default is false, which stores the keystore setting as
	// string when value is a plain string
	AsFile pulumi.BoolPtrInput
	// Required deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written
	// to
	DeploymentId pulumi.StringPtrInput
	// Required name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be
	// overridden
	SettingName pulumi.StringPtrInput
	// Required value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the
	// keystore.
	Value pulumi.StringPtrInput
}

func (DeploymentElasticsearchKeystoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentElasticsearchKeystoreState)(nil)).Elem()
}

type deploymentElasticsearchKeystoreArgs struct {
	// Optionally stores the remote keystore setting as a file. The default is false, which stores the keystore setting as
	// string when value is a plain string
	AsFile *bool `pulumi:"asFile"`
	// Required deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written
	// to
	DeploymentId string `pulumi:"deploymentId"`
	// Required name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be
	// overridden
	SettingName string `pulumi:"settingName"`
	// Required value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the
	// keystore.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a DeploymentElasticsearchKeystore resource.
type DeploymentElasticsearchKeystoreArgs struct {
	// Optionally stores the remote keystore setting as a file. The default is false, which stores the keystore setting as
	// string when value is a plain string
	AsFile pulumi.BoolPtrInput
	// Required deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written
	// to
	DeploymentId pulumi.StringInput
	// Required name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be
	// overridden
	SettingName pulumi.StringInput
	// Required value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the
	// keystore.
	Value pulumi.StringInput
}

func (DeploymentElasticsearchKeystoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentElasticsearchKeystoreArgs)(nil)).Elem()
}

type DeploymentElasticsearchKeystoreInput interface {
	pulumi.Input

	ToDeploymentElasticsearchKeystoreOutput() DeploymentElasticsearchKeystoreOutput
	ToDeploymentElasticsearchKeystoreOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystoreOutput
}

func (*DeploymentElasticsearchKeystore) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentElasticsearchKeystore)(nil))
}

func (i *DeploymentElasticsearchKeystore) ToDeploymentElasticsearchKeystoreOutput() DeploymentElasticsearchKeystoreOutput {
	return i.ToDeploymentElasticsearchKeystoreOutputWithContext(context.Background())
}

func (i *DeploymentElasticsearchKeystore) ToDeploymentElasticsearchKeystoreOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentElasticsearchKeystoreOutput)
}

func (i *DeploymentElasticsearchKeystore) ToDeploymentElasticsearchKeystorePtrOutput() DeploymentElasticsearchKeystorePtrOutput {
	return i.ToDeploymentElasticsearchKeystorePtrOutputWithContext(context.Background())
}

func (i *DeploymentElasticsearchKeystore) ToDeploymentElasticsearchKeystorePtrOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentElasticsearchKeystorePtrOutput)
}

type DeploymentElasticsearchKeystorePtrInput interface {
	pulumi.Input

	ToDeploymentElasticsearchKeystorePtrOutput() DeploymentElasticsearchKeystorePtrOutput
	ToDeploymentElasticsearchKeystorePtrOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystorePtrOutput
}

type deploymentElasticsearchKeystorePtrType DeploymentElasticsearchKeystoreArgs

func (*deploymentElasticsearchKeystorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentElasticsearchKeystore)(nil))
}

func (i *deploymentElasticsearchKeystorePtrType) ToDeploymentElasticsearchKeystorePtrOutput() DeploymentElasticsearchKeystorePtrOutput {
	return i.ToDeploymentElasticsearchKeystorePtrOutputWithContext(context.Background())
}

func (i *deploymentElasticsearchKeystorePtrType) ToDeploymentElasticsearchKeystorePtrOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentElasticsearchKeystorePtrOutput)
}

// DeploymentElasticsearchKeystoreArrayInput is an input type that accepts DeploymentElasticsearchKeystoreArray and DeploymentElasticsearchKeystoreArrayOutput values.
// You can construct a concrete instance of `DeploymentElasticsearchKeystoreArrayInput` via:
//
//          DeploymentElasticsearchKeystoreArray{ DeploymentElasticsearchKeystoreArgs{...} }
type DeploymentElasticsearchKeystoreArrayInput interface {
	pulumi.Input

	ToDeploymentElasticsearchKeystoreArrayOutput() DeploymentElasticsearchKeystoreArrayOutput
	ToDeploymentElasticsearchKeystoreArrayOutputWithContext(context.Context) DeploymentElasticsearchKeystoreArrayOutput
}

type DeploymentElasticsearchKeystoreArray []DeploymentElasticsearchKeystoreInput

func (DeploymentElasticsearchKeystoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentElasticsearchKeystore)(nil)).Elem()
}

func (i DeploymentElasticsearchKeystoreArray) ToDeploymentElasticsearchKeystoreArrayOutput() DeploymentElasticsearchKeystoreArrayOutput {
	return i.ToDeploymentElasticsearchKeystoreArrayOutputWithContext(context.Background())
}

func (i DeploymentElasticsearchKeystoreArray) ToDeploymentElasticsearchKeystoreArrayOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentElasticsearchKeystoreArrayOutput)
}

// DeploymentElasticsearchKeystoreMapInput is an input type that accepts DeploymentElasticsearchKeystoreMap and DeploymentElasticsearchKeystoreMapOutput values.
// You can construct a concrete instance of `DeploymentElasticsearchKeystoreMapInput` via:
//
//          DeploymentElasticsearchKeystoreMap{ "key": DeploymentElasticsearchKeystoreArgs{...} }
type DeploymentElasticsearchKeystoreMapInput interface {
	pulumi.Input

	ToDeploymentElasticsearchKeystoreMapOutput() DeploymentElasticsearchKeystoreMapOutput
	ToDeploymentElasticsearchKeystoreMapOutputWithContext(context.Context) DeploymentElasticsearchKeystoreMapOutput
}

type DeploymentElasticsearchKeystoreMap map[string]DeploymentElasticsearchKeystoreInput

func (DeploymentElasticsearchKeystoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentElasticsearchKeystore)(nil)).Elem()
}

func (i DeploymentElasticsearchKeystoreMap) ToDeploymentElasticsearchKeystoreMapOutput() DeploymentElasticsearchKeystoreMapOutput {
	return i.ToDeploymentElasticsearchKeystoreMapOutputWithContext(context.Background())
}

func (i DeploymentElasticsearchKeystoreMap) ToDeploymentElasticsearchKeystoreMapOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentElasticsearchKeystoreMapOutput)
}

type DeploymentElasticsearchKeystoreOutput struct{ *pulumi.OutputState }

func (DeploymentElasticsearchKeystoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentElasticsearchKeystore)(nil))
}

func (o DeploymentElasticsearchKeystoreOutput) ToDeploymentElasticsearchKeystoreOutput() DeploymentElasticsearchKeystoreOutput {
	return o
}

func (o DeploymentElasticsearchKeystoreOutput) ToDeploymentElasticsearchKeystoreOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystoreOutput {
	return o
}

func (o DeploymentElasticsearchKeystoreOutput) ToDeploymentElasticsearchKeystorePtrOutput() DeploymentElasticsearchKeystorePtrOutput {
	return o.ToDeploymentElasticsearchKeystorePtrOutputWithContext(context.Background())
}

func (o DeploymentElasticsearchKeystoreOutput) ToDeploymentElasticsearchKeystorePtrOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentElasticsearchKeystore) *DeploymentElasticsearchKeystore {
		return &v
	}).(DeploymentElasticsearchKeystorePtrOutput)
}

type DeploymentElasticsearchKeystorePtrOutput struct{ *pulumi.OutputState }

func (DeploymentElasticsearchKeystorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentElasticsearchKeystore)(nil))
}

func (o DeploymentElasticsearchKeystorePtrOutput) ToDeploymentElasticsearchKeystorePtrOutput() DeploymentElasticsearchKeystorePtrOutput {
	return o
}

func (o DeploymentElasticsearchKeystorePtrOutput) ToDeploymentElasticsearchKeystorePtrOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystorePtrOutput {
	return o
}

func (o DeploymentElasticsearchKeystorePtrOutput) Elem() DeploymentElasticsearchKeystoreOutput {
	return o.ApplyT(func(v *DeploymentElasticsearchKeystore) DeploymentElasticsearchKeystore {
		if v != nil {
			return *v
		}
		var ret DeploymentElasticsearchKeystore
		return ret
	}).(DeploymentElasticsearchKeystoreOutput)
}

type DeploymentElasticsearchKeystoreArrayOutput struct{ *pulumi.OutputState }

func (DeploymentElasticsearchKeystoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentElasticsearchKeystore)(nil))
}

func (o DeploymentElasticsearchKeystoreArrayOutput) ToDeploymentElasticsearchKeystoreArrayOutput() DeploymentElasticsearchKeystoreArrayOutput {
	return o
}

func (o DeploymentElasticsearchKeystoreArrayOutput) ToDeploymentElasticsearchKeystoreArrayOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystoreArrayOutput {
	return o
}

func (o DeploymentElasticsearchKeystoreArrayOutput) Index(i pulumi.IntInput) DeploymentElasticsearchKeystoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentElasticsearchKeystore {
		return vs[0].([]DeploymentElasticsearchKeystore)[vs[1].(int)]
	}).(DeploymentElasticsearchKeystoreOutput)
}

type DeploymentElasticsearchKeystoreMapOutput struct{ *pulumi.OutputState }

func (DeploymentElasticsearchKeystoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeploymentElasticsearchKeystore)(nil))
}

func (o DeploymentElasticsearchKeystoreMapOutput) ToDeploymentElasticsearchKeystoreMapOutput() DeploymentElasticsearchKeystoreMapOutput {
	return o
}

func (o DeploymentElasticsearchKeystoreMapOutput) ToDeploymentElasticsearchKeystoreMapOutputWithContext(ctx context.Context) DeploymentElasticsearchKeystoreMapOutput {
	return o
}

func (o DeploymentElasticsearchKeystoreMapOutput) MapIndex(k pulumi.StringInput) DeploymentElasticsearchKeystoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeploymentElasticsearchKeystore {
		return vs[0].(map[string]DeploymentElasticsearchKeystore)[vs[1].(string)]
	}).(DeploymentElasticsearchKeystoreOutput)
}

func init() {
	pulumi.RegisterOutputType(DeploymentElasticsearchKeystoreOutput{})
	pulumi.RegisterOutputType(DeploymentElasticsearchKeystorePtrOutput{})
	pulumi.RegisterOutputType(DeploymentElasticsearchKeystoreArrayOutput{})
	pulumi.RegisterOutputType(DeploymentElasticsearchKeystoreMapOutput{})
}
