// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ec.inputs.DeploymentElasticsearchColdArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchConfigArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchCoordinatingArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchExtensionArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchFrozenArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchHotArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchKeystoreContentsArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchMasterArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchMlArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchRemoteClusterArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchSnapshotArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchSnapshotSourceArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchTrustAccountArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchTrustExternalArgs;
import com.pulumi.ec.inputs.DeploymentElasticsearchWarmArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentElasticsearchArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentElasticsearchArgs Empty = new DeploymentElasticsearchArgs();

    /**
     * Enable or disable autoscaling. Defaults to the setting coming from the deployment template.
     * 
     */
    @Import(name="autoscale")
    private @Nullable Output<Boolean> autoscale;

    /**
     * @return Enable or disable autoscaling. Defaults to the setting coming from the deployment template.
     * 
     */
    public Optional<Output<Boolean>> autoscale() {
        return Optional.ofNullable(this.autoscale);
    }

    /**
     * The encoded Elasticsearch credentials to use in Beats or Logstash
     * 
     */
    @Import(name="cloudId")
    private @Nullable Output<String> cloudId;

    /**
     * @return The encoded Elasticsearch credentials to use in Beats or Logstash
     * 
     */
    public Optional<Output<String>> cloudId() {
        return Optional.ofNullable(this.cloudId);
    }

    /**
     * &#39;cold&#39; topology element
     * 
     */
    @Import(name="cold")
    private @Nullable Output<DeploymentElasticsearchColdArgs> cold;

    /**
     * @return &#39;cold&#39; topology element
     * 
     */
    public Optional<Output<DeploymentElasticsearchColdArgs>> cold() {
        return Optional.ofNullable(this.cold);
    }

    /**
     * Elasticsearch settings which will be applied to all topologies
     * 
     */
    @Import(name="config")
    private @Nullable Output<DeploymentElasticsearchConfigArgs> config;

    /**
     * @return Elasticsearch settings which will be applied to all topologies
     * 
     */
    public Optional<Output<DeploymentElasticsearchConfigArgs>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * &#39;coordinating&#39; topology element
     * 
     */
    @Import(name="coordinating")
    private @Nullable Output<DeploymentElasticsearchCoordinatingArgs> coordinating;

    /**
     * @return &#39;coordinating&#39; topology element
     * 
     */
    public Optional<Output<DeploymentElasticsearchCoordinatingArgs>> coordinating() {
        return Optional.ofNullable(this.coordinating);
    }

    /**
     * Optional Elasticsearch extensions such as custom bundles or plugins.
     * 
     */
    @Import(name="extensions")
    private @Nullable Output<List<DeploymentElasticsearchExtensionArgs>> extensions;

    /**
     * @return Optional Elasticsearch extensions such as custom bundles or plugins.
     * 
     */
    public Optional<Output<List<DeploymentElasticsearchExtensionArgs>>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * &#39;frozen&#39; topology element
     * 
     */
    @Import(name="frozen")
    private @Nullable Output<DeploymentElasticsearchFrozenArgs> frozen;

    /**
     * @return &#39;frozen&#39; topology element
     * 
     */
    public Optional<Output<DeploymentElasticsearchFrozenArgs>> frozen() {
        return Optional.ofNullable(this.frozen);
    }

    /**
     * &#39;hot&#39; topology element
     * 
     */
    @Import(name="hot", required=true)
    private Output<DeploymentElasticsearchHotArgs> hot;

    /**
     * @return &#39;hot&#39; topology element
     * 
     */
    public Output<DeploymentElasticsearchHotArgs> hot() {
        return this.hot;
    }

    /**
     * The Elasticsearch resource HTTP endpoint
     * 
     */
    @Import(name="httpEndpoint")
    private @Nullable Output<String> httpEndpoint;

    /**
     * @return The Elasticsearch resource HTTP endpoint
     * 
     */
    public Optional<Output<String>> httpEndpoint() {
        return Optional.ofNullable(this.httpEndpoint);
    }

    /**
     * The Elasticsearch resource HTTPs endpoint
     * 
     */
    @Import(name="httpsEndpoint")
    private @Nullable Output<String> httpsEndpoint;

    /**
     * @return The Elasticsearch resource HTTPs endpoint
     * 
     */
    public Optional<Output<String>> httpsEndpoint() {
        return Optional.ofNullable(this.httpsEndpoint);
    }

    /**
     * Keystore contents that are controlled by the deployment resource.
     * 
     */
    @Import(name="keystoreContents")
    private @Nullable Output<Map<String,DeploymentElasticsearchKeystoreContentsArgs>> keystoreContents;

    /**
     * @return Keystore contents that are controlled by the deployment resource.
     * 
     */
    public Optional<Output<Map<String,DeploymentElasticsearchKeystoreContentsArgs>>> keystoreContents() {
        return Optional.ofNullable(this.keystoreContents);
    }

    /**
     * &#39;master&#39; topology element
     * 
     */
    @Import(name="master")
    private @Nullable Output<DeploymentElasticsearchMasterArgs> master;

    /**
     * @return &#39;master&#39; topology element
     * 
     */
    public Optional<Output<DeploymentElasticsearchMasterArgs>> master() {
        return Optional.ofNullable(this.master);
    }

    /**
     * &#39;ml&#39; topology element
     * 
     */
    @Import(name="ml")
    private @Nullable Output<DeploymentElasticsearchMlArgs> ml;

    /**
     * @return &#39;ml&#39; topology element
     * 
     */
    public Optional<Output<DeploymentElasticsearchMlArgs>> ml() {
        return Optional.ofNullable(this.ml);
    }

    /**
     * A human readable reference for the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
     * 
     */
    @Import(name="refId")
    private @Nullable Output<String> refId;

    /**
     * @return A human readable reference for the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
     * 
     */
    public Optional<Output<String>> refId() {
        return Optional.ofNullable(this.refId);
    }

    /**
     * Elasticsearch Service (ESS) region where the deployment should be hosted. For Elastic Cloud Enterprise (ECE) installations, set to `&#34;ece-region&#34;.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Elasticsearch Service (ESS) region where the deployment should be hosted. For Elastic Cloud Enterprise (ECE) installations, set to `&#34;ece-region&#34;.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
     * 
     */
    @Import(name="remoteClusters")
    private @Nullable Output<List<DeploymentElasticsearchRemoteClusterArgs>> remoteClusters;

    /**
     * @return Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
     * 
     */
    public Optional<Output<List<DeploymentElasticsearchRemoteClusterArgs>>> remoteClusters() {
        return Optional.ofNullable(this.remoteClusters);
    }

    /**
     * The Elasticsearch resource unique identifier
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The Elasticsearch resource unique identifier
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * (ECE only) Snapshot configuration settings for an Elasticsearch cluster.
     * 
     */
    @Import(name="snapshot")
    private @Nullable Output<DeploymentElasticsearchSnapshotArgs> snapshot;

    /**
     * @return (ECE only) Snapshot configuration settings for an Elasticsearch cluster.
     * 
     */
    public Optional<Output<DeploymentElasticsearchSnapshotArgs>> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }

    @Import(name="snapshotSource")
    private @Nullable Output<DeploymentElasticsearchSnapshotSourceArgs> snapshotSource;

    public Optional<Output<DeploymentElasticsearchSnapshotSourceArgs>> snapshotSource() {
        return Optional.ofNullable(this.snapshotSource);
    }

    /**
     * Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    /**
     * Optional Elasticsearch account trust settings.
     * 
     */
    @Import(name="trustAccounts")
    private @Nullable Output<List<DeploymentElasticsearchTrustAccountArgs>> trustAccounts;

    /**
     * @return Optional Elasticsearch account trust settings.
     * 
     */
    public Optional<Output<List<DeploymentElasticsearchTrustAccountArgs>>> trustAccounts() {
        return Optional.ofNullable(this.trustAccounts);
    }

    /**
     * Optional Elasticsearch external trust settings.
     * 
     */
    @Import(name="trustExternals")
    private @Nullable Output<List<DeploymentElasticsearchTrustExternalArgs>> trustExternals;

    /**
     * @return Optional Elasticsearch external trust settings.
     * 
     */
    public Optional<Output<List<DeploymentElasticsearchTrustExternalArgs>>> trustExternals() {
        return Optional.ofNullable(this.trustExternals);
    }

    /**
     * &#39;warm&#39; topology element
     * 
     */
    @Import(name="warm")
    private @Nullable Output<DeploymentElasticsearchWarmArgs> warm;

    /**
     * @return &#39;warm&#39; topology element
     * 
     */
    public Optional<Output<DeploymentElasticsearchWarmArgs>> warm() {
        return Optional.ofNullable(this.warm);
    }

    private DeploymentElasticsearchArgs() {}

    private DeploymentElasticsearchArgs(DeploymentElasticsearchArgs $) {
        this.autoscale = $.autoscale;
        this.cloudId = $.cloudId;
        this.cold = $.cold;
        this.config = $.config;
        this.coordinating = $.coordinating;
        this.extensions = $.extensions;
        this.frozen = $.frozen;
        this.hot = $.hot;
        this.httpEndpoint = $.httpEndpoint;
        this.httpsEndpoint = $.httpsEndpoint;
        this.keystoreContents = $.keystoreContents;
        this.master = $.master;
        this.ml = $.ml;
        this.refId = $.refId;
        this.region = $.region;
        this.remoteClusters = $.remoteClusters;
        this.resourceId = $.resourceId;
        this.snapshot = $.snapshot;
        this.snapshotSource = $.snapshotSource;
        this.strategy = $.strategy;
        this.trustAccounts = $.trustAccounts;
        this.trustExternals = $.trustExternals;
        this.warm = $.warm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentElasticsearchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentElasticsearchArgs $;

        public Builder() {
            $ = new DeploymentElasticsearchArgs();
        }

        public Builder(DeploymentElasticsearchArgs defaults) {
            $ = new DeploymentElasticsearchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscale Enable or disable autoscaling. Defaults to the setting coming from the deployment template.
         * 
         * @return builder
         * 
         */
        public Builder autoscale(@Nullable Output<Boolean> autoscale) {
            $.autoscale = autoscale;
            return this;
        }

        /**
         * @param autoscale Enable or disable autoscaling. Defaults to the setting coming from the deployment template.
         * 
         * @return builder
         * 
         */
        public Builder autoscale(Boolean autoscale) {
            return autoscale(Output.of(autoscale));
        }

        /**
         * @param cloudId The encoded Elasticsearch credentials to use in Beats or Logstash
         * 
         * @return builder
         * 
         */
        public Builder cloudId(@Nullable Output<String> cloudId) {
            $.cloudId = cloudId;
            return this;
        }

        /**
         * @param cloudId The encoded Elasticsearch credentials to use in Beats or Logstash
         * 
         * @return builder
         * 
         */
        public Builder cloudId(String cloudId) {
            return cloudId(Output.of(cloudId));
        }

        /**
         * @param cold &#39;cold&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder cold(@Nullable Output<DeploymentElasticsearchColdArgs> cold) {
            $.cold = cold;
            return this;
        }

        /**
         * @param cold &#39;cold&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder cold(DeploymentElasticsearchColdArgs cold) {
            return cold(Output.of(cold));
        }

        /**
         * @param config Elasticsearch settings which will be applied to all topologies
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<DeploymentElasticsearchConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config Elasticsearch settings which will be applied to all topologies
         * 
         * @return builder
         * 
         */
        public Builder config(DeploymentElasticsearchConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param coordinating &#39;coordinating&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder coordinating(@Nullable Output<DeploymentElasticsearchCoordinatingArgs> coordinating) {
            $.coordinating = coordinating;
            return this;
        }

        /**
         * @param coordinating &#39;coordinating&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder coordinating(DeploymentElasticsearchCoordinatingArgs coordinating) {
            return coordinating(Output.of(coordinating));
        }

        /**
         * @param extensions Optional Elasticsearch extensions such as custom bundles or plugins.
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Output<List<DeploymentElasticsearchExtensionArgs>> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions Optional Elasticsearch extensions such as custom bundles or plugins.
         * 
         * @return builder
         * 
         */
        public Builder extensions(List<DeploymentElasticsearchExtensionArgs> extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param extensions Optional Elasticsearch extensions such as custom bundles or plugins.
         * 
         * @return builder
         * 
         */
        public Builder extensions(DeploymentElasticsearchExtensionArgs... extensions) {
            return extensions(List.of(extensions));
        }

        /**
         * @param frozen &#39;frozen&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder frozen(@Nullable Output<DeploymentElasticsearchFrozenArgs> frozen) {
            $.frozen = frozen;
            return this;
        }

        /**
         * @param frozen &#39;frozen&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder frozen(DeploymentElasticsearchFrozenArgs frozen) {
            return frozen(Output.of(frozen));
        }

        /**
         * @param hot &#39;hot&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder hot(Output<DeploymentElasticsearchHotArgs> hot) {
            $.hot = hot;
            return this;
        }

        /**
         * @param hot &#39;hot&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder hot(DeploymentElasticsearchHotArgs hot) {
            return hot(Output.of(hot));
        }

        /**
         * @param httpEndpoint The Elasticsearch resource HTTP endpoint
         * 
         * @return builder
         * 
         */
        public Builder httpEndpoint(@Nullable Output<String> httpEndpoint) {
            $.httpEndpoint = httpEndpoint;
            return this;
        }

        /**
         * @param httpEndpoint The Elasticsearch resource HTTP endpoint
         * 
         * @return builder
         * 
         */
        public Builder httpEndpoint(String httpEndpoint) {
            return httpEndpoint(Output.of(httpEndpoint));
        }

        /**
         * @param httpsEndpoint The Elasticsearch resource HTTPs endpoint
         * 
         * @return builder
         * 
         */
        public Builder httpsEndpoint(@Nullable Output<String> httpsEndpoint) {
            $.httpsEndpoint = httpsEndpoint;
            return this;
        }

        /**
         * @param httpsEndpoint The Elasticsearch resource HTTPs endpoint
         * 
         * @return builder
         * 
         */
        public Builder httpsEndpoint(String httpsEndpoint) {
            return httpsEndpoint(Output.of(httpsEndpoint));
        }

        /**
         * @param keystoreContents Keystore contents that are controlled by the deployment resource.
         * 
         * @return builder
         * 
         */
        public Builder keystoreContents(@Nullable Output<Map<String,DeploymentElasticsearchKeystoreContentsArgs>> keystoreContents) {
            $.keystoreContents = keystoreContents;
            return this;
        }

        /**
         * @param keystoreContents Keystore contents that are controlled by the deployment resource.
         * 
         * @return builder
         * 
         */
        public Builder keystoreContents(Map<String,DeploymentElasticsearchKeystoreContentsArgs> keystoreContents) {
            return keystoreContents(Output.of(keystoreContents));
        }

        /**
         * @param master &#39;master&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder master(@Nullable Output<DeploymentElasticsearchMasterArgs> master) {
            $.master = master;
            return this;
        }

        /**
         * @param master &#39;master&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder master(DeploymentElasticsearchMasterArgs master) {
            return master(Output.of(master));
        }

        /**
         * @param ml &#39;ml&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder ml(@Nullable Output<DeploymentElasticsearchMlArgs> ml) {
            $.ml = ml;
            return this;
        }

        /**
         * @param ml &#39;ml&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder ml(DeploymentElasticsearchMlArgs ml) {
            return ml(Output.of(ml));
        }

        /**
         * @param refId A human readable reference for the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
         * 
         * @return builder
         * 
         */
        public Builder refId(@Nullable Output<String> refId) {
            $.refId = refId;
            return this;
        }

        /**
         * @param refId A human readable reference for the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
         * 
         * @return builder
         * 
         */
        public Builder refId(String refId) {
            return refId(Output.of(refId));
        }

        /**
         * @param region Elasticsearch Service (ESS) region where the deployment should be hosted. For Elastic Cloud Enterprise (ECE) installations, set to `&#34;ece-region&#34;.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Elasticsearch Service (ESS) region where the deployment should be hosted. For Elastic Cloud Enterprise (ECE) installations, set to `&#34;ece-region&#34;.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param remoteClusters Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
         * 
         * @return builder
         * 
         */
        public Builder remoteClusters(@Nullable Output<List<DeploymentElasticsearchRemoteClusterArgs>> remoteClusters) {
            $.remoteClusters = remoteClusters;
            return this;
        }

        /**
         * @param remoteClusters Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
         * 
         * @return builder
         * 
         */
        public Builder remoteClusters(List<DeploymentElasticsearchRemoteClusterArgs> remoteClusters) {
            return remoteClusters(Output.of(remoteClusters));
        }

        /**
         * @param remoteClusters Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
         * 
         * @return builder
         * 
         */
        public Builder remoteClusters(DeploymentElasticsearchRemoteClusterArgs... remoteClusters) {
            return remoteClusters(List.of(remoteClusters));
        }

        /**
         * @param resourceId The Elasticsearch resource unique identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The Elasticsearch resource unique identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param snapshot (ECE only) Snapshot configuration settings for an Elasticsearch cluster.
         * 
         * @return builder
         * 
         */
        public Builder snapshot(@Nullable Output<DeploymentElasticsearchSnapshotArgs> snapshot) {
            $.snapshot = snapshot;
            return this;
        }

        /**
         * @param snapshot (ECE only) Snapshot configuration settings for an Elasticsearch cluster.
         * 
         * @return builder
         * 
         */
        public Builder snapshot(DeploymentElasticsearchSnapshotArgs snapshot) {
            return snapshot(Output.of(snapshot));
        }

        public Builder snapshotSource(@Nullable Output<DeploymentElasticsearchSnapshotSourceArgs> snapshotSource) {
            $.snapshotSource = snapshotSource;
            return this;
        }

        public Builder snapshotSource(DeploymentElasticsearchSnapshotSourceArgs snapshotSource) {
            return snapshotSource(Output.of(snapshotSource));
        }

        /**
         * @param strategy Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        /**
         * @param trustAccounts Optional Elasticsearch account trust settings.
         * 
         * @return builder
         * 
         */
        public Builder trustAccounts(@Nullable Output<List<DeploymentElasticsearchTrustAccountArgs>> trustAccounts) {
            $.trustAccounts = trustAccounts;
            return this;
        }

        /**
         * @param trustAccounts Optional Elasticsearch account trust settings.
         * 
         * @return builder
         * 
         */
        public Builder trustAccounts(List<DeploymentElasticsearchTrustAccountArgs> trustAccounts) {
            return trustAccounts(Output.of(trustAccounts));
        }

        /**
         * @param trustAccounts Optional Elasticsearch account trust settings.
         * 
         * @return builder
         * 
         */
        public Builder trustAccounts(DeploymentElasticsearchTrustAccountArgs... trustAccounts) {
            return trustAccounts(List.of(trustAccounts));
        }

        /**
         * @param trustExternals Optional Elasticsearch external trust settings.
         * 
         * @return builder
         * 
         */
        public Builder trustExternals(@Nullable Output<List<DeploymentElasticsearchTrustExternalArgs>> trustExternals) {
            $.trustExternals = trustExternals;
            return this;
        }

        /**
         * @param trustExternals Optional Elasticsearch external trust settings.
         * 
         * @return builder
         * 
         */
        public Builder trustExternals(List<DeploymentElasticsearchTrustExternalArgs> trustExternals) {
            return trustExternals(Output.of(trustExternals));
        }

        /**
         * @param trustExternals Optional Elasticsearch external trust settings.
         * 
         * @return builder
         * 
         */
        public Builder trustExternals(DeploymentElasticsearchTrustExternalArgs... trustExternals) {
            return trustExternals(List.of(trustExternals));
        }

        /**
         * @param warm &#39;warm&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder warm(@Nullable Output<DeploymentElasticsearchWarmArgs> warm) {
            $.warm = warm;
            return this;
        }

        /**
         * @param warm &#39;warm&#39; topology element
         * 
         * @return builder
         * 
         */
        public Builder warm(DeploymentElasticsearchWarmArgs warm) {
            return warm(Output.of(warm));
        }

        public DeploymentElasticsearchArgs build() {
            if ($.hot == null) {
                throw new MissingRequiredPropertyException("DeploymentElasticsearchArgs", "hot");
            }
            return $;
        }
    }

}
