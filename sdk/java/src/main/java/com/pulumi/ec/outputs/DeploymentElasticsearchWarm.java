// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.ec.outputs.DeploymentElasticsearchWarmAutoscaling;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeploymentElasticsearchWarm {
    /**
     * @return Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
     * 
     */
    private DeploymentElasticsearchWarmAutoscaling autoscaling;
    /**
     * @return Instance Configuration ID of the topology element
     * 
     */
    private @Nullable String instanceConfigurationId;
    /**
     * @return Instance Configuration version of the topology element
     * 
     */
    private @Nullable Integer instanceConfigurationVersion;
    /**
     * @return Latest Instance Configuration ID available on the deployment template for the topology element
     * 
     */
    private @Nullable String latestInstanceConfigurationId;
    /**
     * @return Latest version available for the Instance Configuration with the latest*instance*configuration_id
     * 
     */
    private @Nullable Integer latestInstanceConfigurationVersion;
    /**
     * @return The computed list of node roles for the current topology element
     * 
     */
    private @Nullable List<String> nodeRoles;
    /**
     * @return The node type for the Elasticsearch Topology element (data node)
     * 
     */
    private @Nullable String nodeTypeData;
    /**
     * @return The node type for the Elasticsearch Topology element (ingest node)
     * 
     */
    private @Nullable String nodeTypeIngest;
    /**
     * @return The node type for the Elasticsearch Topology element (master node)
     * 
     */
    private @Nullable String nodeTypeMaster;
    /**
     * @return The node type for the Elasticsearch Topology element (machine learning node)
     * 
     */
    private @Nullable String nodeTypeMl;
    /**
     * @return Amount of &#34;size_resource&#34; per node in the &#34;\n\ng&#34; notation
     * 
     */
    private @Nullable String size;
    /**
     * @return Size type, defaults to &#34;memory&#34;.
     * 
     */
    private @Nullable String sizeResource;
    /**
     * @return Number of zones that the Elasticsearch cluster will span. This is used to set HA
     * 
     */
    private @Nullable Integer zoneCount;

    private DeploymentElasticsearchWarm() {}
    /**
     * @return Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
     * 
     */
    public DeploymentElasticsearchWarmAutoscaling autoscaling() {
        return this.autoscaling;
    }
    /**
     * @return Instance Configuration ID of the topology element
     * 
     */
    public Optional<String> instanceConfigurationId() {
        return Optional.ofNullable(this.instanceConfigurationId);
    }
    /**
     * @return Instance Configuration version of the topology element
     * 
     */
    public Optional<Integer> instanceConfigurationVersion() {
        return Optional.ofNullable(this.instanceConfigurationVersion);
    }
    /**
     * @return Latest Instance Configuration ID available on the deployment template for the topology element
     * 
     */
    public Optional<String> latestInstanceConfigurationId() {
        return Optional.ofNullable(this.latestInstanceConfigurationId);
    }
    /**
     * @return Latest version available for the Instance Configuration with the latest*instance*configuration_id
     * 
     */
    public Optional<Integer> latestInstanceConfigurationVersion() {
        return Optional.ofNullable(this.latestInstanceConfigurationVersion);
    }
    /**
     * @return The computed list of node roles for the current topology element
     * 
     */
    public List<String> nodeRoles() {
        return this.nodeRoles == null ? List.of() : this.nodeRoles;
    }
    /**
     * @return The node type for the Elasticsearch Topology element (data node)
     * 
     */
    public Optional<String> nodeTypeData() {
        return Optional.ofNullable(this.nodeTypeData);
    }
    /**
     * @return The node type for the Elasticsearch Topology element (ingest node)
     * 
     */
    public Optional<String> nodeTypeIngest() {
        return Optional.ofNullable(this.nodeTypeIngest);
    }
    /**
     * @return The node type for the Elasticsearch Topology element (master node)
     * 
     */
    public Optional<String> nodeTypeMaster() {
        return Optional.ofNullable(this.nodeTypeMaster);
    }
    /**
     * @return The node type for the Elasticsearch Topology element (machine learning node)
     * 
     */
    public Optional<String> nodeTypeMl() {
        return Optional.ofNullable(this.nodeTypeMl);
    }
    /**
     * @return Amount of &#34;size_resource&#34; per node in the &#34;\n\ng&#34; notation
     * 
     */
    public Optional<String> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return Size type, defaults to &#34;memory&#34;.
     * 
     */
    public Optional<String> sizeResource() {
        return Optional.ofNullable(this.sizeResource);
    }
    /**
     * @return Number of zones that the Elasticsearch cluster will span. This is used to set HA
     * 
     */
    public Optional<Integer> zoneCount() {
        return Optional.ofNullable(this.zoneCount);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeploymentElasticsearchWarm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private DeploymentElasticsearchWarmAutoscaling autoscaling;
        private @Nullable String instanceConfigurationId;
        private @Nullable Integer instanceConfigurationVersion;
        private @Nullable String latestInstanceConfigurationId;
        private @Nullable Integer latestInstanceConfigurationVersion;
        private @Nullable List<String> nodeRoles;
        private @Nullable String nodeTypeData;
        private @Nullable String nodeTypeIngest;
        private @Nullable String nodeTypeMaster;
        private @Nullable String nodeTypeMl;
        private @Nullable String size;
        private @Nullable String sizeResource;
        private @Nullable Integer zoneCount;
        public Builder() {}
        public Builder(DeploymentElasticsearchWarm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoscaling = defaults.autoscaling;
    	      this.instanceConfigurationId = defaults.instanceConfigurationId;
    	      this.instanceConfigurationVersion = defaults.instanceConfigurationVersion;
    	      this.latestInstanceConfigurationId = defaults.latestInstanceConfigurationId;
    	      this.latestInstanceConfigurationVersion = defaults.latestInstanceConfigurationVersion;
    	      this.nodeRoles = defaults.nodeRoles;
    	      this.nodeTypeData = defaults.nodeTypeData;
    	      this.nodeTypeIngest = defaults.nodeTypeIngest;
    	      this.nodeTypeMaster = defaults.nodeTypeMaster;
    	      this.nodeTypeMl = defaults.nodeTypeMl;
    	      this.size = defaults.size;
    	      this.sizeResource = defaults.sizeResource;
    	      this.zoneCount = defaults.zoneCount;
        }

        @CustomType.Setter
        public Builder autoscaling(DeploymentElasticsearchWarmAutoscaling autoscaling) {
            if (autoscaling == null) {
              throw new MissingRequiredPropertyException("DeploymentElasticsearchWarm", "autoscaling");
            }
            this.autoscaling = autoscaling;
            return this;
        }
        @CustomType.Setter
        public Builder instanceConfigurationId(@Nullable String instanceConfigurationId) {

            this.instanceConfigurationId = instanceConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceConfigurationVersion(@Nullable Integer instanceConfigurationVersion) {

            this.instanceConfigurationVersion = instanceConfigurationVersion;
            return this;
        }
        @CustomType.Setter
        public Builder latestInstanceConfigurationId(@Nullable String latestInstanceConfigurationId) {

            this.latestInstanceConfigurationId = latestInstanceConfigurationId;
            return this;
        }
        @CustomType.Setter
        public Builder latestInstanceConfigurationVersion(@Nullable Integer latestInstanceConfigurationVersion) {

            this.latestInstanceConfigurationVersion = latestInstanceConfigurationVersion;
            return this;
        }
        @CustomType.Setter
        public Builder nodeRoles(@Nullable List<String> nodeRoles) {

            this.nodeRoles = nodeRoles;
            return this;
        }
        public Builder nodeRoles(String... nodeRoles) {
            return nodeRoles(List.of(nodeRoles));
        }
        @CustomType.Setter
        public Builder nodeTypeData(@Nullable String nodeTypeData) {

            this.nodeTypeData = nodeTypeData;
            return this;
        }
        @CustomType.Setter
        public Builder nodeTypeIngest(@Nullable String nodeTypeIngest) {

            this.nodeTypeIngest = nodeTypeIngest;
            return this;
        }
        @CustomType.Setter
        public Builder nodeTypeMaster(@Nullable String nodeTypeMaster) {

            this.nodeTypeMaster = nodeTypeMaster;
            return this;
        }
        @CustomType.Setter
        public Builder nodeTypeMl(@Nullable String nodeTypeMl) {

            this.nodeTypeMl = nodeTypeMl;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable String size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sizeResource(@Nullable String sizeResource) {

            this.sizeResource = sizeResource;
            return this;
        }
        @CustomType.Setter
        public Builder zoneCount(@Nullable Integer zoneCount) {

            this.zoneCount = zoneCount;
            return this;
        }
        public DeploymentElasticsearchWarm build() {
            final var _resultValue = new DeploymentElasticsearchWarm();
            _resultValue.autoscaling = autoscaling;
            _resultValue.instanceConfigurationId = instanceConfigurationId;
            _resultValue.instanceConfigurationVersion = instanceConfigurationVersion;
            _resultValue.latestInstanceConfigurationId = latestInstanceConfigurationId;
            _resultValue.latestInstanceConfigurationVersion = latestInstanceConfigurationVersion;
            _resultValue.nodeRoles = nodeRoles;
            _resultValue.nodeTypeData = nodeTypeData;
            _resultValue.nodeTypeIngest = nodeTypeIngest;
            _resultValue.nodeTypeMaster = nodeTypeMaster;
            _resultValue.nodeTypeMl = nodeTypeMl;
            _resultValue.size = size;
            _resultValue.sizeResource = sizeResource;
            _resultValue.zoneCount = zoneCount;
            return _resultValue;
        }
    }
}
