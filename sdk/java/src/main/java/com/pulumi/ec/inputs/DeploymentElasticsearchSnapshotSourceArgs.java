// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentElasticsearchSnapshotSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentElasticsearchSnapshotSourceArgs Empty = new DeploymentElasticsearchSnapshotSourceArgs();

    @Import(name="snapshotName")
    private @Nullable Output<String> snapshotName;

    public Optional<Output<String>> snapshotName() {
        return Optional.ofNullable(this.snapshotName);
    }

    /**
     * ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
     * 
     */
    @Import(name="sourceElasticsearchClusterId", required=true)
    private Output<String> sourceElasticsearchClusterId;

    /**
     * @return ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
     * 
     */
    public Output<String> sourceElasticsearchClusterId() {
        return this.sourceElasticsearchClusterId;
    }

    private DeploymentElasticsearchSnapshotSourceArgs() {}

    private DeploymentElasticsearchSnapshotSourceArgs(DeploymentElasticsearchSnapshotSourceArgs $) {
        this.snapshotName = $.snapshotName;
        this.sourceElasticsearchClusterId = $.sourceElasticsearchClusterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentElasticsearchSnapshotSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentElasticsearchSnapshotSourceArgs $;

        public Builder() {
            $ = new DeploymentElasticsearchSnapshotSourceArgs();
        }

        public Builder(DeploymentElasticsearchSnapshotSourceArgs defaults) {
            $ = new DeploymentElasticsearchSnapshotSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        /**
         * @param sourceElasticsearchClusterId ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
         * 
         * @return builder
         * 
         */
        public Builder sourceElasticsearchClusterId(Output<String> sourceElasticsearchClusterId) {
            $.sourceElasticsearchClusterId = sourceElasticsearchClusterId;
            return this;
        }

        /**
         * @param sourceElasticsearchClusterId ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
         * 
         * @return builder
         * 
         */
        public Builder sourceElasticsearchClusterId(String sourceElasticsearchClusterId) {
            return sourceElasticsearchClusterId(Output.of(sourceElasticsearchClusterId));
        }

        public DeploymentElasticsearchSnapshotSourceArgs build() {
            $.sourceElasticsearchClusterId = Objects.requireNonNull($.sourceElasticsearchClusterId, "expected parameter 'sourceElasticsearchClusterId' to be non-null");
            return $;
        }
    }

}
