// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentKibanaTopologyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentKibanaTopologyArgs Empty = new DeploymentKibanaTopologyArgs();

    /**
     * Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
     * 
     */
    @Import(name="instanceConfigurationId")
    private @Nullable Output<String> instanceConfigurationId;

    /**
     * @return Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
     * 
     */
    public Optional<Output<String>> instanceConfigurationId() {
        return Optional.ofNullable(this.instanceConfigurationId);
    }

    /**
     * Amount in Gigabytes per topology element in the `&#34;&lt;size in GB&gt;g&#34;` notation. When omitted, it defaults to the deployment template value.
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    /**
     * @return Amount in Gigabytes per topology element in the `&#34;&lt;size in GB&gt;g&#34;` notation. When omitted, it defaults to the deployment template value.
     * 
     */
    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Type of resource to which the size is assigned. Defaults to `&#34;memory&#34;`.
     * 
     */
    @Import(name="sizeResource")
    private @Nullable Output<String> sizeResource;

    /**
     * @return Type of resource to which the size is assigned. Defaults to `&#34;memory&#34;`.
     * 
     */
    public Optional<Output<String>> sizeResource() {
        return Optional.ofNullable(this.sizeResource);
    }

    /**
     * Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
     * 
     */
    @Import(name="zoneCount")
    private @Nullable Output<Integer> zoneCount;

    /**
     * @return Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
     * 
     */
    public Optional<Output<Integer>> zoneCount() {
        return Optional.ofNullable(this.zoneCount);
    }

    private DeploymentKibanaTopologyArgs() {}

    private DeploymentKibanaTopologyArgs(DeploymentKibanaTopologyArgs $) {
        this.instanceConfigurationId = $.instanceConfigurationId;
        this.size = $.size;
        this.sizeResource = $.sizeResource;
        this.zoneCount = $.zoneCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentKibanaTopologyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentKibanaTopologyArgs $;

        public Builder() {
            $ = new DeploymentKibanaTopologyArgs();
        }

        public Builder(DeploymentKibanaTopologyArgs defaults) {
            $ = new DeploymentKibanaTopologyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceConfigurationId Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
         * 
         * @return builder
         * 
         */
        public Builder instanceConfigurationId(@Nullable Output<String> instanceConfigurationId) {
            $.instanceConfigurationId = instanceConfigurationId;
            return this;
        }

        /**
         * @param instanceConfigurationId Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
         * 
         * @return builder
         * 
         */
        public Builder instanceConfigurationId(String instanceConfigurationId) {
            return instanceConfigurationId(Output.of(instanceConfigurationId));
        }

        /**
         * @param size Amount in Gigabytes per topology element in the `&#34;&lt;size in GB&gt;g&#34;` notation. When omitted, it defaults to the deployment template value.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Amount in Gigabytes per topology element in the `&#34;&lt;size in GB&gt;g&#34;` notation. When omitted, it defaults to the deployment template value.
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param sizeResource Type of resource to which the size is assigned. Defaults to `&#34;memory&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder sizeResource(@Nullable Output<String> sizeResource) {
            $.sizeResource = sizeResource;
            return this;
        }

        /**
         * @param sizeResource Type of resource to which the size is assigned. Defaults to `&#34;memory&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder sizeResource(String sizeResource) {
            return sizeResource(Output.of(sizeResource));
        }

        /**
         * @param zoneCount Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
         * 
         * @return builder
         * 
         */
        public Builder zoneCount(@Nullable Output<Integer> zoneCount) {
            $.zoneCount = zoneCount;
            return this;
        }

        /**
         * @param zoneCount Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
         * 
         * @return builder
         * 
         */
        public Builder zoneCount(Integer zoneCount) {
            return zoneCount(Output.of(zoneCount));
        }

        public DeploymentKibanaTopologyArgs build() {
            return $;
        }
    }

}
