// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElasticsearchProjectSearchLakeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ElasticsearchProjectSearchLakeArgs Empty = new ElasticsearchProjectSearchLakeArgs();

    /**
     * Determines how much data can benefit from faster search. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. The system dynamically adjusts the cache allocated to your project based on how much data you ingest during the period defined by your Search Boost Window.
     * 
     */
    @Import(name="boostWindow")
    private @Nullable Output<Integer> boostWindow;

    /**
     * @return Determines how much data can benefit from faster search. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. The system dynamically adjusts the cache allocated to your project based on how much data you ingest during the period defined by your Search Boost Window.
     * 
     */
    public Optional<Output<Integer>> boostWindow() {
        return Optional.ofNullable(this.boostWindow);
    }

    /**
     * Controls how fast searches are against your project data. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. You can either increase the performance of searches on cached data by adding replicas, or reduce the quantity of cached data by a static factor to save on costs.
     * 
     */
    @Import(name="searchPower")
    private @Nullable Output<Integer> searchPower;

    /**
     * @return Controls how fast searches are against your project data. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. You can either increase the performance of searches on cached data by adding replicas, or reduce the quantity of cached data by a static factor to save on costs.
     * 
     */
    public Optional<Output<Integer>> searchPower() {
        return Optional.ofNullable(this.searchPower);
    }

    private ElasticsearchProjectSearchLakeArgs() {}

    private ElasticsearchProjectSearchLakeArgs(ElasticsearchProjectSearchLakeArgs $) {
        this.boostWindow = $.boostWindow;
        this.searchPower = $.searchPower;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElasticsearchProjectSearchLakeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElasticsearchProjectSearchLakeArgs $;

        public Builder() {
            $ = new ElasticsearchProjectSearchLakeArgs();
        }

        public Builder(ElasticsearchProjectSearchLakeArgs defaults) {
            $ = new ElasticsearchProjectSearchLakeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param boostWindow Determines how much data can benefit from faster search. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. The system dynamically adjusts the cache allocated to your project based on how much data you ingest during the period defined by your Search Boost Window.
         * 
         * @return builder
         * 
         */
        public Builder boostWindow(@Nullable Output<Integer> boostWindow) {
            $.boostWindow = boostWindow;
            return this;
        }

        /**
         * @param boostWindow Determines how much data can benefit from faster search. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. The system dynamically adjusts the cache allocated to your project based on how much data you ingest during the period defined by your Search Boost Window.
         * 
         * @return builder
         * 
         */
        public Builder boostWindow(Integer boostWindow) {
            return boostWindow(Output.of(boostWindow));
        }

        /**
         * @param searchPower Controls how fast searches are against your project data. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. You can either increase the performance of searches on cached data by adding replicas, or reduce the quantity of cached data by a static factor to save on costs.
         * 
         * @return builder
         * 
         */
        public Builder searchPower(@Nullable Output<Integer> searchPower) {
            $.searchPower = searchPower;
            return this;
        }

        /**
         * @param searchPower Controls how fast searches are against your project data. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. You can either increase the performance of searches on cached data by adding replicas, or reduce the quantity of cached data by a static factor to save on costs.
         * 
         * @return builder
         * 
         */
        public Builder searchPower(Integer searchPower) {
            return searchPower(Output.of(searchPower));
        }

        public ElasticsearchProjectSearchLakeArgs build() {
            return $;
        }
    }

}
