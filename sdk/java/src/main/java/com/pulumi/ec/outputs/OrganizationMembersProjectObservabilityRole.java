// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OrganizationMembersProjectObservabilityRole {
    /**
     * @return Role applies to all projects in the organization.
     * 
     */
    private @Nullable Boolean allProjects;
    /**
     * @return If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
     * 
     */
    private @Nullable List<String> applicationRoles;
    /**
     * @return Role applies to projects listed here.
     * 
     */
    private @Nullable List<String> projectIds;
    /**
     * @return Assigned role. (Allowed values: `admin`, `editor`, `viewer`)
     * 
     */
    private String role;

    private OrganizationMembersProjectObservabilityRole() {}
    /**
     * @return Role applies to all projects in the organization.
     * 
     */
    public Optional<Boolean> allProjects() {
        return Optional.ofNullable(this.allProjects);
    }
    /**
     * @return If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
     * 
     */
    public List<String> applicationRoles() {
        return this.applicationRoles == null ? List.of() : this.applicationRoles;
    }
    /**
     * @return Role applies to projects listed here.
     * 
     */
    public List<String> projectIds() {
        return this.projectIds == null ? List.of() : this.projectIds;
    }
    /**
     * @return Assigned role. (Allowed values: `admin`, `editor`, `viewer`)
     * 
     */
    public String role() {
        return this.role;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OrganizationMembersProjectObservabilityRole defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allProjects;
        private @Nullable List<String> applicationRoles;
        private @Nullable List<String> projectIds;
        private String role;
        public Builder() {}
        public Builder(OrganizationMembersProjectObservabilityRole defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allProjects = defaults.allProjects;
    	      this.applicationRoles = defaults.applicationRoles;
    	      this.projectIds = defaults.projectIds;
    	      this.role = defaults.role;
        }

        @CustomType.Setter
        public Builder allProjects(@Nullable Boolean allProjects) {

            this.allProjects = allProjects;
            return this;
        }
        @CustomType.Setter
        public Builder applicationRoles(@Nullable List<String> applicationRoles) {

            this.applicationRoles = applicationRoles;
            return this;
        }
        public Builder applicationRoles(String... applicationRoles) {
            return applicationRoles(List.of(applicationRoles));
        }
        @CustomType.Setter
        public Builder projectIds(@Nullable List<String> projectIds) {

            this.projectIds = projectIds;
            return this;
        }
        public Builder projectIds(String... projectIds) {
            return projectIds(List.of(projectIds));
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("OrganizationMembersProjectObservabilityRole", "role");
            }
            this.role = role;
            return this;
        }
        public OrganizationMembersProjectObservabilityRole build() {
            final var _resultValue = new OrganizationMembersProjectObservabilityRole();
            _resultValue.allProjects = allProjects;
            _resultValue.applicationRoles = applicationRoles;
            _resultValue.projectIds = projectIds;
            _resultValue.role = role;
            return _resultValue;
        }
    }
}
