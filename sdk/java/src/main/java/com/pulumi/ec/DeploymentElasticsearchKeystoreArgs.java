// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentElasticsearchKeystoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentElasticsearchKeystoreArgs Empty = new DeploymentElasticsearchKeystoreArgs();

    /**
     * Indicates the the remote keystore setting should be stored as a file. The default is false, which stores the keystore setting as string when value is a plain string.
     * 
     */
    @Import(name="asFile")
    private @Nullable Output<Boolean> asFile;

    /**
     * @return Indicates the the remote keystore setting should be stored as a file. The default is false, which stores the keystore setting as string when value is a plain string.
     * 
     */
    public Optional<Output<Boolean>> asFile() {
        return Optional.ofNullable(this.asFile);
    }

    /**
     * Deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to.
     * 
     */
    @Import(name="deploymentId", required=true)
    private Output<String> deploymentId;

    /**
     * @return Deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to.
     * 
     */
    public Output<String> deploymentId() {
        return this.deploymentId;
    }

    /**
     * Name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden.
     * 
     */
    @Import(name="settingName", required=true)
    private Output<String> settingName;

    /**
     * @return Name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden.
     * 
     */
    public Output<String> settingName() {
        return this.settingName;
    }

    /**
     * Value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private DeploymentElasticsearchKeystoreArgs() {}

    private DeploymentElasticsearchKeystoreArgs(DeploymentElasticsearchKeystoreArgs $) {
        this.asFile = $.asFile;
        this.deploymentId = $.deploymentId;
        this.settingName = $.settingName;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentElasticsearchKeystoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentElasticsearchKeystoreArgs $;

        public Builder() {
            $ = new DeploymentElasticsearchKeystoreArgs();
        }

        public Builder(DeploymentElasticsearchKeystoreArgs defaults) {
            $ = new DeploymentElasticsearchKeystoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asFile Indicates the the remote keystore setting should be stored as a file. The default is false, which stores the keystore setting as string when value is a plain string.
         * 
         * @return builder
         * 
         */
        public Builder asFile(@Nullable Output<Boolean> asFile) {
            $.asFile = asFile;
            return this;
        }

        /**
         * @param asFile Indicates the the remote keystore setting should be stored as a file. The default is false, which stores the keystore setting as string when value is a plain string.
         * 
         * @return builder
         * 
         */
        public Builder asFile(Boolean asFile) {
            return asFile(Output.of(asFile));
        }

        /**
         * @param deploymentId Deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId Deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param settingName Name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden.
         * 
         * @return builder
         * 
         */
        public Builder settingName(Output<String> settingName) {
            $.settingName = settingName;
            return this;
        }

        /**
         * @param settingName Name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden.
         * 
         * @return builder
         * 
         */
        public Builder settingName(String settingName) {
            return settingName(Output.of(settingName));
        }

        /**
         * @param value Value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public DeploymentElasticsearchKeystoreArgs build() {
            if ($.deploymentId == null) {
                throw new MissingRequiredPropertyException("DeploymentElasticsearchKeystoreArgs", "deploymentId");
            }
            if ($.settingName == null) {
                throw new MissingRequiredPropertyException("DeploymentElasticsearchKeystoreArgs", "settingName");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("DeploymentElasticsearchKeystoreArgs", "value");
            }
            return $;
        }
    }

}
