// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.ec.outputs.GetDeploymentApm;
import com.pulumi.ec.outputs.GetDeploymentElasticsearch;
import com.pulumi.ec.outputs.GetDeploymentEnterpriseSearch;
import com.pulumi.ec.outputs.GetDeploymentIntegrationsServer;
import com.pulumi.ec.outputs.GetDeploymentKibana;
import com.pulumi.ec.outputs.GetDeploymentObservability;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetDeploymentResult {
    /**
     * @return Deployment alias.
     * 
     */
    private String alias;
    /**
     * @return Instance configuration of the APM type.
     * 
     */
    private List<GetDeploymentApm> apms;
    /**
     * @return ID of the deployment template this deployment is based off.
     * 
     */
    private String deploymentTemplateId;
    /**
     * @return Instance configuration of the Elasticsearch Elasticsearch resource.
     * 
     */
    private List<GetDeploymentElasticsearch> elasticsearches;
    /**
     * @return Instance configuration of the Enterprise Search type.
     * 
     */
    private List<GetDeploymentEnterpriseSearch> enterpriseSearches;
    /**
     * @return Overall health status of the deployment.
     * 
     */
    private Boolean healthy;
    /**
     * @return The unique ID of the deployment.
     * 
     */
    private String id;
    /**
     * @return Instance configuration of the Integrations Server type.
     * 
     */
    private List<GetDeploymentIntegrationsServer> integrationsServers;
    /**
     * @return Instance configuration of the Kibana type.
     * 
     */
    private List<GetDeploymentKibana> kibanas;
    /**
     * @return The name of the deployment.
     * 
     */
    private String name;
    /**
     * @return Observability settings. Information about logs and metrics shipped to a dedicated deployment.
     * 
     */
    private List<GetDeploymentObservability> observabilities;
    /**
     * @return Region where the deployment is hosted.
     * 
     */
    private String region;
    /**
     * @return Key value map of arbitrary string tags.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Traffic filter block, which contains a list of traffic filter rule identifiers.
     * 
     */
    private List<String> trafficFilters;

    private GetDeploymentResult() {}
    /**
     * @return Deployment alias.
     * 
     */
    public String alias() {
        return this.alias;
    }
    /**
     * @return Instance configuration of the APM type.
     * 
     */
    public List<GetDeploymentApm> apms() {
        return this.apms;
    }
    /**
     * @return ID of the deployment template this deployment is based off.
     * 
     */
    public String deploymentTemplateId() {
        return this.deploymentTemplateId;
    }
    /**
     * @return Instance configuration of the Elasticsearch Elasticsearch resource.
     * 
     */
    public List<GetDeploymentElasticsearch> elasticsearches() {
        return this.elasticsearches;
    }
    /**
     * @return Instance configuration of the Enterprise Search type.
     * 
     */
    public List<GetDeploymentEnterpriseSearch> enterpriseSearches() {
        return this.enterpriseSearches;
    }
    /**
     * @return Overall health status of the deployment.
     * 
     */
    public Boolean healthy() {
        return this.healthy;
    }
    /**
     * @return The unique ID of the deployment.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Instance configuration of the Integrations Server type.
     * 
     */
    public List<GetDeploymentIntegrationsServer> integrationsServers() {
        return this.integrationsServers;
    }
    /**
     * @return Instance configuration of the Kibana type.
     * 
     */
    public List<GetDeploymentKibana> kibanas() {
        return this.kibanas;
    }
    /**
     * @return The name of the deployment.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Observability settings. Information about logs and metrics shipped to a dedicated deployment.
     * 
     */
    public List<GetDeploymentObservability> observabilities() {
        return this.observabilities;
    }
    /**
     * @return Region where the deployment is hosted.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Key value map of arbitrary string tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Traffic filter block, which contains a list of traffic filter rule identifiers.
     * 
     */
    public List<String> trafficFilters() {
        return this.trafficFilters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeploymentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alias;
        private List<GetDeploymentApm> apms;
        private String deploymentTemplateId;
        private List<GetDeploymentElasticsearch> elasticsearches;
        private List<GetDeploymentEnterpriseSearch> enterpriseSearches;
        private Boolean healthy;
        private String id;
        private List<GetDeploymentIntegrationsServer> integrationsServers;
        private List<GetDeploymentKibana> kibanas;
        private String name;
        private List<GetDeploymentObservability> observabilities;
        private String region;
        private Map<String,String> tags;
        private List<String> trafficFilters;
        public Builder() {}
        public Builder(GetDeploymentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.apms = defaults.apms;
    	      this.deploymentTemplateId = defaults.deploymentTemplateId;
    	      this.elasticsearches = defaults.elasticsearches;
    	      this.enterpriseSearches = defaults.enterpriseSearches;
    	      this.healthy = defaults.healthy;
    	      this.id = defaults.id;
    	      this.integrationsServers = defaults.integrationsServers;
    	      this.kibanas = defaults.kibanas;
    	      this.name = defaults.name;
    	      this.observabilities = defaults.observabilities;
    	      this.region = defaults.region;
    	      this.tags = defaults.tags;
    	      this.trafficFilters = defaults.trafficFilters;
        }

        @CustomType.Setter
        public Builder alias(String alias) {
            if (alias == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "alias");
            }
            this.alias = alias;
            return this;
        }
        @CustomType.Setter
        public Builder apms(List<GetDeploymentApm> apms) {
            if (apms == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "apms");
            }
            this.apms = apms;
            return this;
        }
        public Builder apms(GetDeploymentApm... apms) {
            return apms(List.of(apms));
        }
        @CustomType.Setter
        public Builder deploymentTemplateId(String deploymentTemplateId) {
            if (deploymentTemplateId == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "deploymentTemplateId");
            }
            this.deploymentTemplateId = deploymentTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder elasticsearches(List<GetDeploymentElasticsearch> elasticsearches) {
            if (elasticsearches == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "elasticsearches");
            }
            this.elasticsearches = elasticsearches;
            return this;
        }
        public Builder elasticsearches(GetDeploymentElasticsearch... elasticsearches) {
            return elasticsearches(List.of(elasticsearches));
        }
        @CustomType.Setter
        public Builder enterpriseSearches(List<GetDeploymentEnterpriseSearch> enterpriseSearches) {
            if (enterpriseSearches == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "enterpriseSearches");
            }
            this.enterpriseSearches = enterpriseSearches;
            return this;
        }
        public Builder enterpriseSearches(GetDeploymentEnterpriseSearch... enterpriseSearches) {
            return enterpriseSearches(List.of(enterpriseSearches));
        }
        @CustomType.Setter
        public Builder healthy(Boolean healthy) {
            if (healthy == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "healthy");
            }
            this.healthy = healthy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder integrationsServers(List<GetDeploymentIntegrationsServer> integrationsServers) {
            if (integrationsServers == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "integrationsServers");
            }
            this.integrationsServers = integrationsServers;
            return this;
        }
        public Builder integrationsServers(GetDeploymentIntegrationsServer... integrationsServers) {
            return integrationsServers(List.of(integrationsServers));
        }
        @CustomType.Setter
        public Builder kibanas(List<GetDeploymentKibana> kibanas) {
            if (kibanas == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "kibanas");
            }
            this.kibanas = kibanas;
            return this;
        }
        public Builder kibanas(GetDeploymentKibana... kibanas) {
            return kibanas(List.of(kibanas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder observabilities(List<GetDeploymentObservability> observabilities) {
            if (observabilities == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "observabilities");
            }
            this.observabilities = observabilities;
            return this;
        }
        public Builder observabilities(GetDeploymentObservability... observabilities) {
            return observabilities(List.of(observabilities));
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder trafficFilters(List<String> trafficFilters) {
            if (trafficFilters == null) {
              throw new MissingRequiredPropertyException("GetDeploymentResult", "trafficFilters");
            }
            this.trafficFilters = trafficFilters;
            return this;
        }
        public Builder trafficFilters(String... trafficFilters) {
            return trafficFilters(List.of(trafficFilters));
        }
        public GetDeploymentResult build() {
            final var _resultValue = new GetDeploymentResult();
            _resultValue.alias = alias;
            _resultValue.apms = apms;
            _resultValue.deploymentTemplateId = deploymentTemplateId;
            _resultValue.elasticsearches = elasticsearches;
            _resultValue.enterpriseSearches = enterpriseSearches;
            _resultValue.healthy = healthy;
            _resultValue.id = id;
            _resultValue.integrationsServers = integrationsServers;
            _resultValue.kibanas = kibanas;
            _resultValue.name = name;
            _resultValue.observabilities = observabilities;
            _resultValue.region = region;
            _resultValue.tags = tags;
            _resultValue.trafficFilters = trafficFilters;
            return _resultValue;
        }
    }
}
