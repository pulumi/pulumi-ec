// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStackArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStackArgs Empty = new GetStackArgs();

    /**
     * Lock the `latest` `version_regex` obtained, so that the new stack release doesn&#39;t cascade the changes down to the deployments. It can be changed at any time.
     * 
     */
    @Import(name="lock")
    private @Nullable Output<Boolean> lock;

    /**
     * @return Lock the `latest` `version_regex` obtained, so that the new stack release doesn&#39;t cascade the changes down to the deployments. It can be changed at any time.
     * 
     */
    public Optional<Output<Boolean>> lock() {
        return Optional.ofNullable(this.lock);
    }

    /**
     * Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `ece-region`.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `ece-region`.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `latest` is also accepted to obtain the latest available stack version.
     * 
     */
    @Import(name="versionRegex", required=true)
    private Output<String> versionRegex;

    /**
     * @return Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `latest` is also accepted to obtain the latest available stack version.
     * 
     */
    public Output<String> versionRegex() {
        return this.versionRegex;
    }

    private GetStackArgs() {}

    private GetStackArgs(GetStackArgs $) {
        this.lock = $.lock;
        this.region = $.region;
        this.versionRegex = $.versionRegex;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStackArgs $;

        public Builder() {
            $ = new GetStackArgs();
        }

        public Builder(GetStackArgs defaults) {
            $ = new GetStackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lock Lock the `latest` `version_regex` obtained, so that the new stack release doesn&#39;t cascade the changes down to the deployments. It can be changed at any time.
         * 
         * @return builder
         * 
         */
        public Builder lock(@Nullable Output<Boolean> lock) {
            $.lock = lock;
            return this;
        }

        /**
         * @param lock Lock the `latest` `version_regex` obtained, so that the new stack release doesn&#39;t cascade the changes down to the deployments. It can be changed at any time.
         * 
         * @return builder
         * 
         */
        public Builder lock(Boolean lock) {
            return lock(Output.of(lock));
        }

        /**
         * @param region Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `ece-region`.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `ece-region`.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param versionRegex Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `latest` is also accepted to obtain the latest available stack version.
         * 
         * @return builder
         * 
         */
        public Builder versionRegex(Output<String> versionRegex) {
            $.versionRegex = versionRegex;
            return this;
        }

        /**
         * @param versionRegex Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `latest` is also accepted to obtain the latest available stack version.
         * 
         * @return builder
         * 
         */
        public Builder versionRegex(String versionRegex) {
            return versionRegex(Output.of(versionRegex));
        }

        public GetStackArgs build() {
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GetStackArgs", "region");
            }
            if ($.versionRegex == null) {
                throw new MissingRequiredPropertyException("GetStackArgs", "versionRegex");
            }
            return $;
        }
    }

}
