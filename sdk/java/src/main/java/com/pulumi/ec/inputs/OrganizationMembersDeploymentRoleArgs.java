// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationMembersDeploymentRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationMembersDeploymentRoleArgs Empty = new OrganizationMembersDeploymentRoleArgs();

    /**
     * Role applies to all deployments in the organization.
     * 
     */
    @Import(name="allDeployments")
    private @Nullable Output<Boolean> allDeployments;

    /**
     * @return Role applies to all deployments in the organization.
     * 
     */
    public Optional<Output<Boolean>> allDeployments() {
        return Optional.ofNullable(this.allDeployments);
    }

    /**
     * If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
     * 
     */
    @Import(name="applicationRoles")
    private @Nullable Output<List<String>> applicationRoles;

    /**
     * @return If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
     * 
     */
    public Optional<Output<List<String>>> applicationRoles() {
        return Optional.ofNullable(this.applicationRoles);
    }

    /**
     * Role applies to deployments listed here.
     * 
     */
    @Import(name="deploymentIds")
    private @Nullable Output<List<String>> deploymentIds;

    /**
     * @return Role applies to deployments listed here.
     * 
     */
    public Optional<Output<List<String>>> deploymentIds() {
        return Optional.ofNullable(this.deploymentIds);
    }

    /**
     * Assigned role. Must be on of `viewer`, `editor` or `admin`.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return Assigned role. Must be on of `viewer`, `editor` or `admin`.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private OrganizationMembersDeploymentRoleArgs() {}

    private OrganizationMembersDeploymentRoleArgs(OrganizationMembersDeploymentRoleArgs $) {
        this.allDeployments = $.allDeployments;
        this.applicationRoles = $.applicationRoles;
        this.deploymentIds = $.deploymentIds;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationMembersDeploymentRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationMembersDeploymentRoleArgs $;

        public Builder() {
            $ = new OrganizationMembersDeploymentRoleArgs();
        }

        public Builder(OrganizationMembersDeploymentRoleArgs defaults) {
            $ = new OrganizationMembersDeploymentRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allDeployments Role applies to all deployments in the organization.
         * 
         * @return builder
         * 
         */
        public Builder allDeployments(@Nullable Output<Boolean> allDeployments) {
            $.allDeployments = allDeployments;
            return this;
        }

        /**
         * @param allDeployments Role applies to all deployments in the organization.
         * 
         * @return builder
         * 
         */
        public Builder allDeployments(Boolean allDeployments) {
            return allDeployments(Output.of(allDeployments));
        }

        /**
         * @param applicationRoles If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
         * 
         * @return builder
         * 
         */
        public Builder applicationRoles(@Nullable Output<List<String>> applicationRoles) {
            $.applicationRoles = applicationRoles;
            return this;
        }

        /**
         * @param applicationRoles If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
         * 
         * @return builder
         * 
         */
        public Builder applicationRoles(List<String> applicationRoles) {
            return applicationRoles(Output.of(applicationRoles));
        }

        /**
         * @param applicationRoles If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
         * 
         * @return builder
         * 
         */
        public Builder applicationRoles(String... applicationRoles) {
            return applicationRoles(List.of(applicationRoles));
        }

        /**
         * @param deploymentIds Role applies to deployments listed here.
         * 
         * @return builder
         * 
         */
        public Builder deploymentIds(@Nullable Output<List<String>> deploymentIds) {
            $.deploymentIds = deploymentIds;
            return this;
        }

        /**
         * @param deploymentIds Role applies to deployments listed here.
         * 
         * @return builder
         * 
         */
        public Builder deploymentIds(List<String> deploymentIds) {
            return deploymentIds(Output.of(deploymentIds));
        }

        /**
         * @param deploymentIds Role applies to deployments listed here.
         * 
         * @return builder
         * 
         */
        public Builder deploymentIds(String... deploymentIds) {
            return deploymentIds(List.of(deploymentIds));
        }

        /**
         * @param role Assigned role. Must be on of `viewer`, `editor` or `admin`.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Assigned role. Must be on of `viewer`, `editor` or `admin`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public OrganizationMembersDeploymentRoleArgs build() {
            if ($.role == null) {
                throw new MissingRequiredPropertyException("OrganizationMembersDeploymentRoleArgs", "role");
            }
            return $;
        }
    }

}
