// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ec.inputs.GetDeploymentsApmArgs;
import com.pulumi.ec.inputs.GetDeploymentsElasticsearchArgs;
import com.pulumi.ec.inputs.GetDeploymentsEnterpriseSearchArgs;
import com.pulumi.ec.inputs.GetDeploymentsIntegrationsServerArgs;
import com.pulumi.ec.inputs.GetDeploymentsKibanaArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDeploymentsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDeploymentsArgs Empty = new GetDeploymentsArgs();

    /**
     * **DEPRECATED** Filter by APM resource kind status or configuration.
     * * `apm.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `apm.#.version` - Elastic stack version.
     * * `apm.#.healthy` - Overall health status of the APM instances.
     * 
     */
    @Import(name="apm")
    private @Nullable Output<GetDeploymentsApmArgs> apm;

    /**
     * @return **DEPRECATED** Filter by APM resource kind status or configuration.
     * * `apm.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `apm.#.version` - Elastic stack version.
     * * `apm.#.healthy` - Overall health status of the APM instances.
     * 
     */
    public Optional<Output<GetDeploymentsApmArgs>> apm() {
        return Optional.ofNullable(this.apm);
    }

    /**
     * ID of the deployment template used to create the deployment.
     * 
     */
    @Import(name="deploymentTemplateId")
    private @Nullable Output<String> deploymentTemplateId;

    /**
     * @return ID of the deployment template used to create the deployment.
     * 
     */
    public Optional<Output<String>> deploymentTemplateId() {
        return Optional.ofNullable(this.deploymentTemplateId);
    }

    /**
     * Filter by Elasticsearch resource kind status or configuration.
     * * `elasticsearch.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `elasticsearch.#.version` - Elastic stack version.
     * * `elasticsearch.#.healthy` - Overall health status of the Elasticsearch instances.
     * 
     */
    @Import(name="elasticsearch")
    private @Nullable Output<GetDeploymentsElasticsearchArgs> elasticsearch;

    /**
     * @return Filter by Elasticsearch resource kind status or configuration.
     * * `elasticsearch.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `elasticsearch.#.version` - Elastic stack version.
     * * `elasticsearch.#.healthy` - Overall health status of the Elasticsearch instances.
     * 
     */
    public Optional<Output<GetDeploymentsElasticsearchArgs>> elasticsearch() {
        return Optional.ofNullable(this.elasticsearch);
    }

    /**
     * Filter by Enterprise Search resource kind status or configuration.
     * * `enterprise_search.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `enterprise_search.#.version` - Elastic stack version.
     * * `enterprise_search.#.healthy` - Overall health status of the Enterprise Search instances.
     * 
     * &gt; **NOTE:** The `apm` resource has been deprecated starting on the Elastic Stack Version 8.0.0. New deployments  should use `integrations_server` instead.
     * 
     */
    @Import(name="enterpriseSearch")
    private @Nullable Output<GetDeploymentsEnterpriseSearchArgs> enterpriseSearch;

    /**
     * @return Filter by Enterprise Search resource kind status or configuration.
     * * `enterprise_search.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `enterprise_search.#.version` - Elastic stack version.
     * * `enterprise_search.#.healthy` - Overall health status of the Enterprise Search instances.
     * 
     * &gt; **NOTE:** The `apm` resource has been deprecated starting on the Elastic Stack Version 8.0.0. New deployments  should use `integrations_server` instead.
     * 
     */
    public Optional<Output<GetDeploymentsEnterpriseSearchArgs>> enterpriseSearch() {
        return Optional.ofNullable(this.enterpriseSearch);
    }

    /**
     * Overall health status of the deployment.
     * 
     */
    @Import(name="healthy")
    private @Nullable Output<String> healthy;

    /**
     * @return Overall health status of the deployment.
     * 
     */
    public Optional<Output<String>> healthy() {
        return Optional.ofNullable(this.healthy);
    }

    /**
     * Filter by Integrations Server resource kind status or configuration.
     * * `integrations_server.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `integrations_server.#.version` - Elastic stack version.
     * * `integrations_server.#.healthy` - Overall health status of the Integrations Server instances.
     * 
     */
    @Import(name="integrationsServer")
    private @Nullable Output<GetDeploymentsIntegrationsServerArgs> integrationsServer;

    /**
     * @return Filter by Integrations Server resource kind status or configuration.
     * * `integrations_server.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `integrations_server.#.version` - Elastic stack version.
     * * `integrations_server.#.healthy` - Overall health status of the Integrations Server instances.
     * 
     */
    public Optional<Output<GetDeploymentsIntegrationsServerArgs>> integrationsServer() {
        return Optional.ofNullable(this.integrationsServer);
    }

    /**
     * Filter by Kibana resource kind status or configuration.
     * * `kibana.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `kibana.#.version` - Elastic stack version.
     * * `kibana.#.healthy` - Overall health status of the Kibana instances.
     * 
     */
    @Import(name="kibana")
    private @Nullable Output<GetDeploymentsKibanaArgs> kibana;

    /**
     * @return Filter by Kibana resource kind status or configuration.
     * * `kibana.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
     * * `kibana.#.version` - Elastic stack version.
     * * `kibana.#.healthy` - Overall health status of the Kibana instances.
     * 
     */
    public Optional<Output<GetDeploymentsKibanaArgs>> kibana() {
        return Optional.ofNullable(this.kibana);
    }

    /**
     * Prefix that one or several deployment names have in common.
     * 
     */
    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    /**
     * @return Prefix that one or several deployment names have in common.
     * 
     */
    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * The maximum number of deployments to return. Defaults to `100`.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The maximum number of deployments to return. Defaults to `100`.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Key value map of arbitrary string tags for the deployment.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Key value map of arbitrary string tags for the deployment.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetDeploymentsArgs() {}

    private GetDeploymentsArgs(GetDeploymentsArgs $) {
        this.apm = $.apm;
        this.deploymentTemplateId = $.deploymentTemplateId;
        this.elasticsearch = $.elasticsearch;
        this.enterpriseSearch = $.enterpriseSearch;
        this.healthy = $.healthy;
        this.integrationsServer = $.integrationsServer;
        this.kibana = $.kibana;
        this.namePrefix = $.namePrefix;
        this.size = $.size;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDeploymentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDeploymentsArgs $;

        public Builder() {
            $ = new GetDeploymentsArgs();
        }

        public Builder(GetDeploymentsArgs defaults) {
            $ = new GetDeploymentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apm **DEPRECATED** Filter by APM resource kind status or configuration.
         * * `apm.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `apm.#.version` - Elastic stack version.
         * * `apm.#.healthy` - Overall health status of the APM instances.
         * 
         * @return builder
         * 
         */
        public Builder apm(@Nullable Output<GetDeploymentsApmArgs> apm) {
            $.apm = apm;
            return this;
        }

        /**
         * @param apm **DEPRECATED** Filter by APM resource kind status or configuration.
         * * `apm.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `apm.#.version` - Elastic stack version.
         * * `apm.#.healthy` - Overall health status of the APM instances.
         * 
         * @return builder
         * 
         */
        public Builder apm(GetDeploymentsApmArgs apm) {
            return apm(Output.of(apm));
        }

        /**
         * @param deploymentTemplateId ID of the deployment template used to create the deployment.
         * 
         * @return builder
         * 
         */
        public Builder deploymentTemplateId(@Nullable Output<String> deploymentTemplateId) {
            $.deploymentTemplateId = deploymentTemplateId;
            return this;
        }

        /**
         * @param deploymentTemplateId ID of the deployment template used to create the deployment.
         * 
         * @return builder
         * 
         */
        public Builder deploymentTemplateId(String deploymentTemplateId) {
            return deploymentTemplateId(Output.of(deploymentTemplateId));
        }

        /**
         * @param elasticsearch Filter by Elasticsearch resource kind status or configuration.
         * * `elasticsearch.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `elasticsearch.#.version` - Elastic stack version.
         * * `elasticsearch.#.healthy` - Overall health status of the Elasticsearch instances.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearch(@Nullable Output<GetDeploymentsElasticsearchArgs> elasticsearch) {
            $.elasticsearch = elasticsearch;
            return this;
        }

        /**
         * @param elasticsearch Filter by Elasticsearch resource kind status or configuration.
         * * `elasticsearch.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `elasticsearch.#.version` - Elastic stack version.
         * * `elasticsearch.#.healthy` - Overall health status of the Elasticsearch instances.
         * 
         * @return builder
         * 
         */
        public Builder elasticsearch(GetDeploymentsElasticsearchArgs elasticsearch) {
            return elasticsearch(Output.of(elasticsearch));
        }

        /**
         * @param enterpriseSearch Filter by Enterprise Search resource kind status or configuration.
         * * `enterprise_search.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `enterprise_search.#.version` - Elastic stack version.
         * * `enterprise_search.#.healthy` - Overall health status of the Enterprise Search instances.
         * 
         * &gt; **NOTE:** The `apm` resource has been deprecated starting on the Elastic Stack Version 8.0.0. New deployments  should use `integrations_server` instead.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseSearch(@Nullable Output<GetDeploymentsEnterpriseSearchArgs> enterpriseSearch) {
            $.enterpriseSearch = enterpriseSearch;
            return this;
        }

        /**
         * @param enterpriseSearch Filter by Enterprise Search resource kind status or configuration.
         * * `enterprise_search.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `enterprise_search.#.version` - Elastic stack version.
         * * `enterprise_search.#.healthy` - Overall health status of the Enterprise Search instances.
         * 
         * &gt; **NOTE:** The `apm` resource has been deprecated starting on the Elastic Stack Version 8.0.0. New deployments  should use `integrations_server` instead.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseSearch(GetDeploymentsEnterpriseSearchArgs enterpriseSearch) {
            return enterpriseSearch(Output.of(enterpriseSearch));
        }

        /**
         * @param healthy Overall health status of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder healthy(@Nullable Output<String> healthy) {
            $.healthy = healthy;
            return this;
        }

        /**
         * @param healthy Overall health status of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder healthy(String healthy) {
            return healthy(Output.of(healthy));
        }

        /**
         * @param integrationsServer Filter by Integrations Server resource kind status or configuration.
         * * `integrations_server.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `integrations_server.#.version` - Elastic stack version.
         * * `integrations_server.#.healthy` - Overall health status of the Integrations Server instances.
         * 
         * @return builder
         * 
         */
        public Builder integrationsServer(@Nullable Output<GetDeploymentsIntegrationsServerArgs> integrationsServer) {
            $.integrationsServer = integrationsServer;
            return this;
        }

        /**
         * @param integrationsServer Filter by Integrations Server resource kind status or configuration.
         * * `integrations_server.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `integrations_server.#.version` - Elastic stack version.
         * * `integrations_server.#.healthy` - Overall health status of the Integrations Server instances.
         * 
         * @return builder
         * 
         */
        public Builder integrationsServer(GetDeploymentsIntegrationsServerArgs integrationsServer) {
            return integrationsServer(Output.of(integrationsServer));
        }

        /**
         * @param kibana Filter by Kibana resource kind status or configuration.
         * * `kibana.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `kibana.#.version` - Elastic stack version.
         * * `kibana.#.healthy` - Overall health status of the Kibana instances.
         * 
         * @return builder
         * 
         */
        public Builder kibana(@Nullable Output<GetDeploymentsKibanaArgs> kibana) {
            $.kibana = kibana;
            return this;
        }

        /**
         * @param kibana Filter by Kibana resource kind status or configuration.
         * * `kibana.#.status` - Resource kind status (Available statuses are: initializing, stopping, stopped, rebooting, restarting, reconfiguring, and started).
         * * `kibana.#.version` - Elastic stack version.
         * * `kibana.#.healthy` - Overall health status of the Kibana instances.
         * 
         * @return builder
         * 
         */
        public Builder kibana(GetDeploymentsKibanaArgs kibana) {
            return kibana(Output.of(kibana));
        }

        /**
         * @param namePrefix Prefix that one or several deployment names have in common.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix Prefix that one or several deployment names have in common.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        /**
         * @param size The maximum number of deployments to return. Defaults to `100`.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The maximum number of deployments to return. Defaults to `100`.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param tags Key value map of arbitrary string tags for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Key value map of arbitrary string tags for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GetDeploymentsArgs build() {
            return $;
        }
    }

}
