// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.ec.DeploymentExtensionArgs;
import com.pulumi.ec.Utilities;
import com.pulumi.ec.inputs.DeploymentExtensionState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides an Elastic Cloud extension resource, which allows extensions to be created, updated, and deleted.
 * 
 * Extensions allow users of Elastic Cloud to use custom plugins, scripts, or dictionaries to enhance the core functionality of Elasticsearch. Before you install an extension, be sure to check out the supported and official [Elasticsearch plugins](https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html) already available.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * You can import extensions using the `id`, for example
 * 
 * ```sh
 *  $ pulumi import ec:index/deploymentExtension:DeploymentExtension name 320b7b540dfc967a7a649c18e2fce4ed
 * ```
 * 
 */
@ResourceType(type="ec:index/deploymentExtension:DeploymentExtension")
public class DeploymentExtension extends com.pulumi.resources.CustomResource {
    /**
     * Description of the extension.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the extension.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The URL to download the extension archive.
     * 
     */
    @Export(name="downloadUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> downloadUrl;

    /**
     * @return The URL to download the extension archive.
     * 
     */
    public Output<Optional<String>> downloadUrl() {
        return Codegen.optional(this.downloadUrl);
    }
    /**
     * `bundle` or `plugin` allowed. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
     * 
     */
    @Export(name="extensionType", type=String.class, parameters={})
    private Output<String> extensionType;

    /**
     * @return `bundle` or `plugin` allowed. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
     * 
     */
    public Output<String> extensionType() {
        return this.extensionType;
    }
    /**
     * Hash value of the file. If it is changed, the file is reuploaded.
     * 
     */
    @Export(name="fileHash", type=String.class, parameters={})
    private Output</* @Nullable */ String> fileHash;

    /**
     * @return Hash value of the file. If it is changed, the file is reuploaded.
     * 
     */
    public Output<Optional<String>> fileHash() {
        return Codegen.optional(this.fileHash);
    }
    /**
     * File path of the extension uploaded.
     * 
     */
    @Export(name="filePath", type=String.class, parameters={})
    private Output</* @Nullable */ String> filePath;

    /**
     * @return File path of the extension uploaded.
     * 
     */
    public Output<Optional<String>> filePath() {
        return Codegen.optional(this.filePath);
    }
    /**
     * The datetime the extension was last modified.
     * 
     */
    @Export(name="lastModified", type=String.class, parameters={})
    private Output<String> lastModified;

    /**
     * @return The datetime the extension was last modified.
     * 
     */
    public Output<String> lastModified() {
        return this.lastModified;
    }
    /**
     * Name of the extension.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the extension.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The extension file size in bytes.
     * 
     */
    @Export(name="size", type=Integer.class, parameters={})
    private Output<Integer> size;

    /**
     * @return The extension file size in bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * The extension URL to be used in the plan.
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return The extension URL to be used in the plan.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
     * 
     */
    @Export(name="version", type=String.class, parameters={})
    private Output<String> version;

    /**
     * @return Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeploymentExtension(String name) {
        this(name, DeploymentExtensionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeploymentExtension(String name, DeploymentExtensionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeploymentExtension(String name, DeploymentExtensionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ec:index/deploymentExtension:DeploymentExtension", name, args == null ? DeploymentExtensionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DeploymentExtension(String name, Output<String> id, @Nullable DeploymentExtensionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("ec:index/deploymentExtension:DeploymentExtension", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeploymentExtension get(String name, Output<String> id, @Nullable DeploymentExtensionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DeploymentExtension(name, id, state, options);
    }
}
