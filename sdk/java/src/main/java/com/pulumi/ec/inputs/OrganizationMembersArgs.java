// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.ec.inputs.OrganizationMembersDeploymentRoleArgs;
import com.pulumi.ec.inputs.OrganizationMembersProjectElasticsearchRoleArgs;
import com.pulumi.ec.inputs.OrganizationMembersProjectObservabilityRoleArgs;
import com.pulumi.ec.inputs.OrganizationMembersProjectSecurityRoleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationMembersArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationMembersArgs Empty = new OrganizationMembersArgs();

    /**
     * Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
     * 
     */
    @Import(name="deploymentRoles")
    private @Nullable Output<List<OrganizationMembersDeploymentRoleArgs>> deploymentRoles;

    /**
     * @return Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
     * 
     */
    public Optional<Output<List<OrganizationMembersDeploymentRoleArgs>>> deploymentRoles() {
        return Optional.ofNullable(this.deploymentRoles);
    }

    /**
     * Email address of the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email address of the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Set to true while the user has not yet accepted their invitation to the organization.
     * 
     */
    @Import(name="invitationPending")
    private @Nullable Output<Boolean> invitationPending;

    /**
     * @return Set to true while the user has not yet accepted their invitation to the organization.
     * 
     */
    public Optional<Output<Boolean>> invitationPending() {
        return Optional.ofNullable(this.invitationPending);
    }

    /**
     * The optional organization role for the member. Can be one of `organization-admin`, `billing-admin`. For more info see: [Organization roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_organization_level_roles)
     * 
     */
    @Import(name="organizationRole")
    private @Nullable Output<String> organizationRole;

    /**
     * @return The optional organization role for the member. Can be one of `organization-admin`, `billing-admin`. For more info see: [Organization roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_organization_level_roles)
     * 
     */
    public Optional<Output<String>> organizationRole() {
        return Optional.ofNullable(this.organizationRole);
    }

    /**
     * Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
     * 
     */
    @Import(name="projectElasticsearchRoles")
    private @Nullable Output<List<OrganizationMembersProjectElasticsearchRoleArgs>> projectElasticsearchRoles;

    /**
     * @return Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
     * 
     */
    public Optional<Output<List<OrganizationMembersProjectElasticsearchRoleArgs>>> projectElasticsearchRoles() {
        return Optional.ofNullable(this.projectElasticsearchRoles);
    }

    /**
     * Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
     * 
     */
    @Import(name="projectObservabilityRoles")
    private @Nullable Output<List<OrganizationMembersProjectObservabilityRoleArgs>> projectObservabilityRoles;

    /**
     * @return Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
     * 
     */
    public Optional<Output<List<OrganizationMembersProjectObservabilityRoleArgs>>> projectObservabilityRoles() {
        return Optional.ofNullable(this.projectObservabilityRoles);
    }

    /**
     * Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
     * 
     */
    @Import(name="projectSecurityRoles")
    private @Nullable Output<List<OrganizationMembersProjectSecurityRoleArgs>> projectSecurityRoles;

    /**
     * @return Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
     * 
     */
    public Optional<Output<List<OrganizationMembersProjectSecurityRoleArgs>>> projectSecurityRoles() {
        return Optional.ofNullable(this.projectSecurityRoles);
    }

    /**
     * User ID.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return User ID.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private OrganizationMembersArgs() {}

    private OrganizationMembersArgs(OrganizationMembersArgs $) {
        this.deploymentRoles = $.deploymentRoles;
        this.email = $.email;
        this.invitationPending = $.invitationPending;
        this.organizationRole = $.organizationRole;
        this.projectElasticsearchRoles = $.projectElasticsearchRoles;
        this.projectObservabilityRoles = $.projectObservabilityRoles;
        this.projectSecurityRoles = $.projectSecurityRoles;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationMembersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationMembersArgs $;

        public Builder() {
            $ = new OrganizationMembersArgs();
        }

        public Builder(OrganizationMembersArgs defaults) {
            $ = new OrganizationMembersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deploymentRoles Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
         * 
         * @return builder
         * 
         */
        public Builder deploymentRoles(@Nullable Output<List<OrganizationMembersDeploymentRoleArgs>> deploymentRoles) {
            $.deploymentRoles = deploymentRoles;
            return this;
        }

        /**
         * @param deploymentRoles Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
         * 
         * @return builder
         * 
         */
        public Builder deploymentRoles(List<OrganizationMembersDeploymentRoleArgs> deploymentRoles) {
            return deploymentRoles(Output.of(deploymentRoles));
        }

        /**
         * @param deploymentRoles Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
         * 
         * @return builder
         * 
         */
        public Builder deploymentRoles(OrganizationMembersDeploymentRoleArgs... deploymentRoles) {
            return deploymentRoles(List.of(deploymentRoles));
        }

        /**
         * @param email Email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param invitationPending Set to true while the user has not yet accepted their invitation to the organization.
         * 
         * @return builder
         * 
         */
        public Builder invitationPending(@Nullable Output<Boolean> invitationPending) {
            $.invitationPending = invitationPending;
            return this;
        }

        /**
         * @param invitationPending Set to true while the user has not yet accepted their invitation to the organization.
         * 
         * @return builder
         * 
         */
        public Builder invitationPending(Boolean invitationPending) {
            return invitationPending(Output.of(invitationPending));
        }

        /**
         * @param organizationRole The optional organization role for the member. Can be one of `organization-admin`, `billing-admin`. For more info see: [Organization roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_organization_level_roles)
         * 
         * @return builder
         * 
         */
        public Builder organizationRole(@Nullable Output<String> organizationRole) {
            $.organizationRole = organizationRole;
            return this;
        }

        /**
         * @param organizationRole The optional organization role for the member. Can be one of `organization-admin`, `billing-admin`. For more info see: [Organization roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_organization_level_roles)
         * 
         * @return builder
         * 
         */
        public Builder organizationRole(String organizationRole) {
            return organizationRole(Output.of(organizationRole));
        }

        /**
         * @param projectElasticsearchRoles Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
         * 
         * @return builder
         * 
         */
        public Builder projectElasticsearchRoles(@Nullable Output<List<OrganizationMembersProjectElasticsearchRoleArgs>> projectElasticsearchRoles) {
            $.projectElasticsearchRoles = projectElasticsearchRoles;
            return this;
        }

        /**
         * @param projectElasticsearchRoles Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
         * 
         * @return builder
         * 
         */
        public Builder projectElasticsearchRoles(List<OrganizationMembersProjectElasticsearchRoleArgs> projectElasticsearchRoles) {
            return projectElasticsearchRoles(Output.of(projectElasticsearchRoles));
        }

        /**
         * @param projectElasticsearchRoles Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
         * 
         * @return builder
         * 
         */
        public Builder projectElasticsearchRoles(OrganizationMembersProjectElasticsearchRoleArgs... projectElasticsearchRoles) {
            return projectElasticsearchRoles(List.of(projectElasticsearchRoles));
        }

        /**
         * @param projectObservabilityRoles Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
         * 
         * @return builder
         * 
         */
        public Builder projectObservabilityRoles(@Nullable Output<List<OrganizationMembersProjectObservabilityRoleArgs>> projectObservabilityRoles) {
            $.projectObservabilityRoles = projectObservabilityRoles;
            return this;
        }

        /**
         * @param projectObservabilityRoles Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
         * 
         * @return builder
         * 
         */
        public Builder projectObservabilityRoles(List<OrganizationMembersProjectObservabilityRoleArgs> projectObservabilityRoles) {
            return projectObservabilityRoles(Output.of(projectObservabilityRoles));
        }

        /**
         * @param projectObservabilityRoles Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
         * 
         * @return builder
         * 
         */
        public Builder projectObservabilityRoles(OrganizationMembersProjectObservabilityRoleArgs... projectObservabilityRoles) {
            return projectObservabilityRoles(List.of(projectObservabilityRoles));
        }

        /**
         * @param projectSecurityRoles Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
         * 
         * @return builder
         * 
         */
        public Builder projectSecurityRoles(@Nullable Output<List<OrganizationMembersProjectSecurityRoleArgs>> projectSecurityRoles) {
            $.projectSecurityRoles = projectSecurityRoles;
            return this;
        }

        /**
         * @param projectSecurityRoles Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
         * 
         * @return builder
         * 
         */
        public Builder projectSecurityRoles(List<OrganizationMembersProjectSecurityRoleArgs> projectSecurityRoles) {
            return projectSecurityRoles(Output.of(projectSecurityRoles));
        }

        /**
         * @param projectSecurityRoles Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
         * 
         * @return builder
         * 
         */
        public Builder projectSecurityRoles(OrganizationMembersProjectSecurityRoleArgs... projectSecurityRoles) {
            return projectSecurityRoles(List.of(projectSecurityRoles));
        }

        /**
         * @param userId User ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId User ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public OrganizationMembersArgs build() {
            return $;
        }
    }

}
