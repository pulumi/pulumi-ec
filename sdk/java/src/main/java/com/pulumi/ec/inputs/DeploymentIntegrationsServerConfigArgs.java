// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentIntegrationsServerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentIntegrationsServerConfigArgs Empty = new DeploymentIntegrationsServerConfigArgs();

    /**
     * Optionally enable debug mode for Integrations Server instances - defaults to false
     * 
     */
    @Import(name="debugEnabled")
    private @Nullable Output<Boolean> debugEnabled;

    /**
     * @return Optionally enable debug mode for Integrations Server instances - defaults to false
     * 
     */
    public Optional<Output<Boolean>> debugEnabled() {
        return Optional.ofNullable(this.debugEnabled);
    }

    /**
     * Optionally override the docker image the Integrations Server nodes will use. Note that this field will only work for internal users only.
     * 
     */
    @Import(name="dockerImage")
    private @Nullable Output<String> dockerImage;

    /**
     * @return Optionally override the docker image the Integrations Server nodes will use. Note that this field will only work for internal users only.
     * 
     */
    public Optional<Output<String>> dockerImage() {
        return Optional.ofNullable(this.dockerImage);
    }

    /**
     * An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*yaml&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (This field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
     * 
     */
    @Import(name="userSettingsJson")
    private @Nullable Output<String> userSettingsJson;

    /**
     * @return An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*yaml&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (This field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
     * 
     */
    public Optional<Output<String>> userSettingsJson() {
        return Optional.ofNullable(this.userSettingsJson);
    }

    /**
     * An arbitrary JSON object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*yaml&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
     * 
     */
    @Import(name="userSettingsOverrideJson")
    private @Nullable Output<String> userSettingsOverrideJson;

    /**
     * @return An arbitrary JSON object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*yaml&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
     * 
     */
    public Optional<Output<String>> userSettingsOverrideJson() {
        return Optional.ofNullable(this.userSettingsOverrideJson);
    }

    /**
     * An arbitrary YAML object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*json&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
     * 
     */
    @Import(name="userSettingsOverrideYaml")
    private @Nullable Output<String> userSettingsOverrideYaml;

    /**
     * @return An arbitrary YAML object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*json&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
     * 
     */
    public Optional<Output<String>> userSettingsOverrideYaml() {
        return Optional.ofNullable(this.userSettingsOverrideYaml);
    }

    /**
     * An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*json&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (These field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
     * 
     */
    @Import(name="userSettingsYaml")
    private @Nullable Output<String> userSettingsYaml;

    /**
     * @return An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*json&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (These field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
     * 
     */
    public Optional<Output<String>> userSettingsYaml() {
        return Optional.ofNullable(this.userSettingsYaml);
    }

    private DeploymentIntegrationsServerConfigArgs() {}

    private DeploymentIntegrationsServerConfigArgs(DeploymentIntegrationsServerConfigArgs $) {
        this.debugEnabled = $.debugEnabled;
        this.dockerImage = $.dockerImage;
        this.userSettingsJson = $.userSettingsJson;
        this.userSettingsOverrideJson = $.userSettingsOverrideJson;
        this.userSettingsOverrideYaml = $.userSettingsOverrideYaml;
        this.userSettingsYaml = $.userSettingsYaml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentIntegrationsServerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentIntegrationsServerConfigArgs $;

        public Builder() {
            $ = new DeploymentIntegrationsServerConfigArgs();
        }

        public Builder(DeploymentIntegrationsServerConfigArgs defaults) {
            $ = new DeploymentIntegrationsServerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param debugEnabled Optionally enable debug mode for Integrations Server instances - defaults to false
         * 
         * @return builder
         * 
         */
        public Builder debugEnabled(@Nullable Output<Boolean> debugEnabled) {
            $.debugEnabled = debugEnabled;
            return this;
        }

        /**
         * @param debugEnabled Optionally enable debug mode for Integrations Server instances - defaults to false
         * 
         * @return builder
         * 
         */
        public Builder debugEnabled(Boolean debugEnabled) {
            return debugEnabled(Output.of(debugEnabled));
        }

        /**
         * @param dockerImage Optionally override the docker image the Integrations Server nodes will use. Note that this field will only work for internal users only.
         * 
         * @return builder
         * 
         */
        public Builder dockerImage(@Nullable Output<String> dockerImage) {
            $.dockerImage = dockerImage;
            return this;
        }

        /**
         * @param dockerImage Optionally override the docker image the Integrations Server nodes will use. Note that this field will only work for internal users only.
         * 
         * @return builder
         * 
         */
        public Builder dockerImage(String dockerImage) {
            return dockerImage(Output.of(dockerImage));
        }

        /**
         * @param userSettingsJson An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*yaml&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (This field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsJson(@Nullable Output<String> userSettingsJson) {
            $.userSettingsJson = userSettingsJson;
            return this;
        }

        /**
         * @param userSettingsJson An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*yaml&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (This field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsJson(String userSettingsJson) {
            return userSettingsJson(Output.of(userSettingsJson));
        }

        /**
         * @param userSettingsOverrideJson An arbitrary JSON object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*yaml&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsOverrideJson(@Nullable Output<String> userSettingsOverrideJson) {
            $.userSettingsOverrideJson = userSettingsOverrideJson;
            return this;
        }

        /**
         * @param userSettingsOverrideJson An arbitrary JSON object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*yaml&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsOverrideJson(String userSettingsOverrideJson) {
            return userSettingsOverrideJson(Output.of(userSettingsOverrideJson));
        }

        /**
         * @param userSettingsOverrideYaml An arbitrary YAML object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*json&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsOverrideYaml(@Nullable Output<String> userSettingsOverrideYaml) {
            $.userSettingsOverrideYaml = userSettingsOverrideYaml;
            return this;
        }

        /**
         * @param userSettingsOverrideYaml An arbitrary YAML object allowing ECE admins owners to set clusters&#39; parameters (only one of this and &#39;user*settings*override*json&#39; is allowed), ie in addition to the documented &#39;system*settings&#39;. (This field together with &#39;system*settings&#39; and &#39;user*settings*&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsOverrideYaml(String userSettingsOverrideYaml) {
            return userSettingsOverrideYaml(Output.of(userSettingsOverrideYaml));
        }

        /**
         * @param userSettingsYaml An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*json&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (These field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsYaml(@Nullable Output<String> userSettingsYaml) {
            $.userSettingsYaml = userSettingsYaml;
            return this;
        }

        /**
         * @param userSettingsYaml An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and &#39;user*settings*json&#39; is allowed), provided they are on the whitelist (&#39;user*settings*whitelist&#39;) and not on the blacklist (&#39;user*settings*blacklist&#39;). (These field together with &#39;user*settings*override*&#39; and &#39;system_settings&#39; defines the total set of resource settings)
         * 
         * @return builder
         * 
         */
        public Builder userSettingsYaml(String userSettingsYaml) {
            return userSettingsYaml(Output.of(userSettingsYaml));
        }

        public DeploymentIntegrationsServerConfigArgs build() {
            return $;
        }
    }

}
