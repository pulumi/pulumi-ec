// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.ec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentTrafficFilterAssociationState extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentTrafficFilterAssociationState Empty = new DeploymentTrafficFilterAssociationState();

    /**
     * Deployment ID of the deployment to which the traffic filter rule is attached.
     * 
     */
    @Import(name="deploymentId")
    private @Nullable Output<String> deploymentId;

    /**
     * @return Deployment ID of the deployment to which the traffic filter rule is attached.
     * 
     */
    public Optional<Output<String>> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }

    /**
     * Traffic filter ID of the rule to use for the attachment.
     * 
     */
    @Import(name="trafficFilterId")
    private @Nullable Output<String> trafficFilterId;

    /**
     * @return Traffic filter ID of the rule to use for the attachment.
     * 
     */
    public Optional<Output<String>> trafficFilterId() {
        return Optional.ofNullable(this.trafficFilterId);
    }

    private DeploymentTrafficFilterAssociationState() {}

    private DeploymentTrafficFilterAssociationState(DeploymentTrafficFilterAssociationState $) {
        this.deploymentId = $.deploymentId;
        this.trafficFilterId = $.trafficFilterId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentTrafficFilterAssociationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentTrafficFilterAssociationState $;

        public Builder() {
            $ = new DeploymentTrafficFilterAssociationState();
        }

        public Builder(DeploymentTrafficFilterAssociationState defaults) {
            $ = new DeploymentTrafficFilterAssociationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param deploymentId Deployment ID of the deployment to which the traffic filter rule is attached.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param deploymentId Deployment ID of the deployment to which the traffic filter rule is attached.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            return deploymentId(Output.of(deploymentId));
        }

        /**
         * @param trafficFilterId Traffic filter ID of the rule to use for the attachment.
         * 
         * @return builder
         * 
         */
        public Builder trafficFilterId(@Nullable Output<String> trafficFilterId) {
            $.trafficFilterId = trafficFilterId;
            return this;
        }

        /**
         * @param trafficFilterId Traffic filter ID of the rule to use for the attachment.
         * 
         * @return builder
         * 
         */
        public Builder trafficFilterId(String trafficFilterId) {
            return trafficFilterId(Output.of(trafficFilterId));
        }

        public DeploymentTrafficFilterAssociationState build() {
            return $;
        }
    }

}
