# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'DeploymentApmArgs',
    'DeploymentApmArgsDict',
    'DeploymentApmConfigArgs',
    'DeploymentApmConfigArgsDict',
    'DeploymentElasticsearchArgs',
    'DeploymentElasticsearchArgsDict',
    'DeploymentElasticsearchColdArgs',
    'DeploymentElasticsearchColdArgsDict',
    'DeploymentElasticsearchColdAutoscalingArgs',
    'DeploymentElasticsearchColdAutoscalingArgsDict',
    'DeploymentElasticsearchConfigArgs',
    'DeploymentElasticsearchConfigArgsDict',
    'DeploymentElasticsearchCoordinatingArgs',
    'DeploymentElasticsearchCoordinatingArgsDict',
    'DeploymentElasticsearchCoordinatingAutoscalingArgs',
    'DeploymentElasticsearchCoordinatingAutoscalingArgsDict',
    'DeploymentElasticsearchExtensionArgs',
    'DeploymentElasticsearchExtensionArgsDict',
    'DeploymentElasticsearchFrozenArgs',
    'DeploymentElasticsearchFrozenArgsDict',
    'DeploymentElasticsearchFrozenAutoscalingArgs',
    'DeploymentElasticsearchFrozenAutoscalingArgsDict',
    'DeploymentElasticsearchHotArgs',
    'DeploymentElasticsearchHotArgsDict',
    'DeploymentElasticsearchHotAutoscalingArgs',
    'DeploymentElasticsearchHotAutoscalingArgsDict',
    'DeploymentElasticsearchKeystoreContentsArgs',
    'DeploymentElasticsearchKeystoreContentsArgsDict',
    'DeploymentElasticsearchMasterArgs',
    'DeploymentElasticsearchMasterArgsDict',
    'DeploymentElasticsearchMasterAutoscalingArgs',
    'DeploymentElasticsearchMasterAutoscalingArgsDict',
    'DeploymentElasticsearchMlArgs',
    'DeploymentElasticsearchMlArgsDict',
    'DeploymentElasticsearchMlAutoscalingArgs',
    'DeploymentElasticsearchMlAutoscalingArgsDict',
    'DeploymentElasticsearchRemoteClusterArgs',
    'DeploymentElasticsearchRemoteClusterArgsDict',
    'DeploymentElasticsearchSnapshotArgs',
    'DeploymentElasticsearchSnapshotArgsDict',
    'DeploymentElasticsearchSnapshotRepositoryArgs',
    'DeploymentElasticsearchSnapshotRepositoryArgsDict',
    'DeploymentElasticsearchSnapshotRepositoryReferenceArgs',
    'DeploymentElasticsearchSnapshotRepositoryReferenceArgsDict',
    'DeploymentElasticsearchSnapshotSourceArgs',
    'DeploymentElasticsearchSnapshotSourceArgsDict',
    'DeploymentElasticsearchTrustAccountArgs',
    'DeploymentElasticsearchTrustAccountArgsDict',
    'DeploymentElasticsearchTrustExternalArgs',
    'DeploymentElasticsearchTrustExternalArgsDict',
    'DeploymentElasticsearchWarmArgs',
    'DeploymentElasticsearchWarmArgsDict',
    'DeploymentElasticsearchWarmAutoscalingArgs',
    'DeploymentElasticsearchWarmAutoscalingArgsDict',
    'DeploymentEnterpriseSearchArgs',
    'DeploymentEnterpriseSearchArgsDict',
    'DeploymentEnterpriseSearchConfigArgs',
    'DeploymentEnterpriseSearchConfigArgsDict',
    'DeploymentIntegrationsServerArgs',
    'DeploymentIntegrationsServerArgsDict',
    'DeploymentIntegrationsServerConfigArgs',
    'DeploymentIntegrationsServerConfigArgsDict',
    'DeploymentIntegrationsServerEndpointsArgs',
    'DeploymentIntegrationsServerEndpointsArgsDict',
    'DeploymentKibanaArgs',
    'DeploymentKibanaArgsDict',
    'DeploymentKibanaConfigArgs',
    'DeploymentKibanaConfigArgsDict',
    'DeploymentObservabilityArgs',
    'DeploymentObservabilityArgsDict',
    'DeploymentTrafficFilterRuleArgs',
    'DeploymentTrafficFilterRuleArgsDict',
    'ElasticsearchProjectCredentialsArgs',
    'ElasticsearchProjectCredentialsArgsDict',
    'ElasticsearchProjectEndpointsArgs',
    'ElasticsearchProjectEndpointsArgsDict',
    'ElasticsearchProjectMetadataArgs',
    'ElasticsearchProjectMetadataArgsDict',
    'ElasticsearchProjectSearchLakeArgs',
    'ElasticsearchProjectSearchLakeArgsDict',
    'ObservabilityProjectCredentialsArgs',
    'ObservabilityProjectCredentialsArgsDict',
    'ObservabilityProjectEndpointsArgs',
    'ObservabilityProjectEndpointsArgsDict',
    'ObservabilityProjectMetadataArgs',
    'ObservabilityProjectMetadataArgsDict',
    'OrganizationMembersArgs',
    'OrganizationMembersArgsDict',
    'OrganizationMembersDeploymentRoleArgs',
    'OrganizationMembersDeploymentRoleArgsDict',
    'OrganizationMembersProjectElasticsearchRoleArgs',
    'OrganizationMembersProjectElasticsearchRoleArgsDict',
    'OrganizationMembersProjectObservabilityRoleArgs',
    'OrganizationMembersProjectObservabilityRoleArgsDict',
    'OrganizationMembersProjectSecurityRoleArgs',
    'OrganizationMembersProjectSecurityRoleArgsDict',
    'SecurityProjectCredentialsArgs',
    'SecurityProjectCredentialsArgsDict',
    'SecurityProjectEndpointsArgs',
    'SecurityProjectEndpointsArgsDict',
    'SecurityProjectMetadataArgs',
    'SecurityProjectMetadataArgsDict',
    'SecurityProjectProductTypeArgs',
    'SecurityProjectProductTypeArgsDict',
    'SnapshotRepositoryGenericArgs',
    'SnapshotRepositoryGenericArgsDict',
    'SnapshotRepositoryS3Args',
    'SnapshotRepositoryS3ArgsDict',
    'GetDeploymentsApmArgs',
    'GetDeploymentsApmArgsDict',
    'GetDeploymentsElasticsearchArgs',
    'GetDeploymentsElasticsearchArgsDict',
    'GetDeploymentsEnterpriseSearchArgs',
    'GetDeploymentsEnterpriseSearchArgsDict',
    'GetDeploymentsIntegrationsServerArgs',
    'GetDeploymentsIntegrationsServerArgsDict',
    'GetDeploymentsKibanaArgs',
    'GetDeploymentsKibanaArgsDict',
]

MYPY = False

if not MYPY:
    class DeploymentApmArgsDict(TypedDict):
        config: NotRequired[pulumi.Input['DeploymentApmConfigArgsDict']]
        """
        Optionally define the Apm configuration options for the APM Server
        """
        elasticsearch_cluster_ref_id: NotRequired[pulumi.Input[str]]
        http_endpoint: NotRequired[pulumi.Input[str]]
        https_endpoint: NotRequired[pulumi.Input[str]]
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        ref_id: NotRequired[pulumi.Input[str]]
        region: NotRequired[pulumi.Input[str]]
        resource_id: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Optional size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
elif False:
    DeploymentApmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentApmArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentApmConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentApmConfigArgs'] config: Optionally define the Apm configuration options for the APM Server
        :param pulumi.Input[str] size_resource: Optional size type, defaults to "memory".
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentApmConfigArgs']]:
        """
        Optionally define the Apm configuration options for the APM Server
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentApmConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Optional size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentApmConfigArgsDict(TypedDict):
        debug_enabled: NotRequired[pulumi.Input[bool]]
        """
        Optionally enable debug mode for APM servers - defaults to false
        """
        docker_image: NotRequired[pulumi.Input[str]]
        """
        Optionally override the docker image the APM nodes will use. This option will not work in ESS customers and should only be changed if you know what you're doing.
        """
        user_settings_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        user_settings_override_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_override_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
elif False:
    DeploymentApmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentApmConfigArgs:
    def __init__(__self__, *,
                 debug_enabled: Optional[pulumi.Input[bool]] = None,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] debug_enabled: Optionally enable debug mode for APM servers - defaults to false
        :param pulumi.Input[str] docker_image: Optionally override the docker image the APM nodes will use. This option will not work in ESS customers and should only be changed if you know what you're doing.
        :param pulumi.Input[str] user_settings_json: An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_json: An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_yaml: An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_yaml: An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Optionally enable debug mode for APM servers - defaults to false
        """
        return pulumi.get(self, "debug_enabled")

    @debug_enabled.setter
    def debug_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug_enabled", value)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally override the docker image the APM nodes will use. This option will not work in ESS customers and should only be changed if you know what you're doing.
        """
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


if not MYPY:
    class DeploymentElasticsearchArgsDict(TypedDict):
        hot: pulumi.Input['DeploymentElasticsearchHotArgsDict']
        """
        'hot' topology element
        """
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Enable or disable autoscaling. Defaults to the setting coming from the deployment template.
        """
        cloud_id: NotRequired[pulumi.Input[str]]
        """
        The encoded Elasticsearch credentials to use in Beats or Logstash
        """
        cold: NotRequired[pulumi.Input['DeploymentElasticsearchColdArgsDict']]
        """
        'cold' topology element
        """
        config: NotRequired[pulumi.Input['DeploymentElasticsearchConfigArgsDict']]
        """
        Elasticsearch settings which will be applied to all topologies
        """
        coordinating: NotRequired[pulumi.Input['DeploymentElasticsearchCoordinatingArgsDict']]
        """
        'coordinating' topology element
        """
        extensions: NotRequired[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgsDict']]]]
        """
        Optional Elasticsearch extensions such as custom bundles or plugins.
        """
        frozen: NotRequired[pulumi.Input['DeploymentElasticsearchFrozenArgsDict']]
        """
        'frozen' topology element
        """
        http_endpoint: NotRequired[pulumi.Input[str]]
        """
        The Elasticsearch resource HTTP endpoint
        """
        https_endpoint: NotRequired[pulumi.Input[str]]
        """
        The Elasticsearch resource HTTPs endpoint
        """
        keystore_contents: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['DeploymentElasticsearchKeystoreContentsArgsDict']]]]
        """
        Keystore contents that are controlled by the deployment resource.
        """
        master: NotRequired[pulumi.Input['DeploymentElasticsearchMasterArgsDict']]
        """
        'master' topology element
        """
        ml: NotRequired[pulumi.Input['DeploymentElasticsearchMlArgsDict']]
        """
        'ml' topology element
        """
        ref_id: NotRequired[pulumi.Input[str]]
        """
        A human readable reference for the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Elasticsearch Service (ESS) region where the deployment should be hosted. For Elastic Cloud Enterprise (ECE) installations, set to `"ece-region".
        """
        remote_clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgsDict']]]]
        """
        Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
        """
        resource_id: NotRequired[pulumi.Input[str]]
        """
        The Elasticsearch resource unique identifier
        """
        snapshot: NotRequired[pulumi.Input['DeploymentElasticsearchSnapshotArgsDict']]
        """
        (ECE only) Snapshot configuration settings for an Elasticsearch cluster.
        """
        snapshot_source: NotRequired[pulumi.Input['DeploymentElasticsearchSnapshotSourceArgsDict']]
        strategy: NotRequired[pulumi.Input[str]]
        """
        Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
        """
        trust_accounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgsDict']]]]
        """
        Optional Elasticsearch account trust settings.
        """
        trust_externals: NotRequired[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgsDict']]]]
        """
        Optional Elasticsearch external trust settings.
        """
        warm: NotRequired[pulumi.Input['DeploymentElasticsearchWarmArgsDict']]
        """
        'warm' topology element
        """
elif False:
    DeploymentElasticsearchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchArgs:
    def __init__(__self__, *,
                 hot: pulumi.Input['DeploymentElasticsearchHotArgs'],
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 cold: Optional[pulumi.Input['DeploymentElasticsearchColdArgs']] = None,
                 config: Optional[pulumi.Input['DeploymentElasticsearchConfigArgs']] = None,
                 coordinating: Optional[pulumi.Input['DeploymentElasticsearchCoordinatingArgs']] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]]] = None,
                 frozen: Optional[pulumi.Input['DeploymentElasticsearchFrozenArgs']] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 keystore_contents: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeploymentElasticsearchKeystoreContentsArgs']]]] = None,
                 master: Optional[pulumi.Input['DeploymentElasticsearchMasterArgs']] = None,
                 ml: Optional[pulumi.Input['DeploymentElasticsearchMlArgs']] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 remote_clusters: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 snapshot: Optional[pulumi.Input['DeploymentElasticsearchSnapshotArgs']] = None,
                 snapshot_source: Optional[pulumi.Input['DeploymentElasticsearchSnapshotSourceArgs']] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 trust_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]]] = None,
                 trust_externals: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]]] = None,
                 warm: Optional[pulumi.Input['DeploymentElasticsearchWarmArgs']] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchHotArgs'] hot: 'hot' topology element
        :param pulumi.Input[bool] autoscale: Enable or disable autoscaling. Defaults to the setting coming from the deployment template.
        :param pulumi.Input[str] cloud_id: The encoded Elasticsearch credentials to use in Beats or Logstash
        :param pulumi.Input['DeploymentElasticsearchColdArgs'] cold: 'cold' topology element
        :param pulumi.Input['DeploymentElasticsearchConfigArgs'] config: Elasticsearch settings which will be applied to all topologies
        :param pulumi.Input['DeploymentElasticsearchCoordinatingArgs'] coordinating: 'coordinating' topology element
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]] extensions: Optional Elasticsearch extensions such as custom bundles or plugins.
        :param pulumi.Input['DeploymentElasticsearchFrozenArgs'] frozen: 'frozen' topology element
        :param pulumi.Input[str] http_endpoint: The Elasticsearch resource HTTP endpoint
        :param pulumi.Input[str] https_endpoint: The Elasticsearch resource HTTPs endpoint
        :param pulumi.Input[Mapping[str, pulumi.Input['DeploymentElasticsearchKeystoreContentsArgs']]] keystore_contents: Keystore contents that are controlled by the deployment resource.
        :param pulumi.Input['DeploymentElasticsearchMasterArgs'] master: 'master' topology element
        :param pulumi.Input['DeploymentElasticsearchMlArgs'] ml: 'ml' topology element
        :param pulumi.Input[str] ref_id: A human readable reference for the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        :param pulumi.Input[str] region: Elasticsearch Service (ESS) region where the deployment should be hosted. For Elastic Cloud Enterprise (ECE) installations, set to `"ece-region".
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]] remote_clusters: Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
        :param pulumi.Input[str] resource_id: The Elasticsearch resource unique identifier
        :param pulumi.Input['DeploymentElasticsearchSnapshotArgs'] snapshot: (ECE only) Snapshot configuration settings for an Elasticsearch cluster.
        :param pulumi.Input[str] strategy: Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]] trust_accounts: Optional Elasticsearch account trust settings.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]] trust_externals: Optional Elasticsearch external trust settings.
        :param pulumi.Input['DeploymentElasticsearchWarmArgs'] warm: 'warm' topology element
        """
        pulumi.set(__self__, "hot", hot)
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if cold is not None:
            pulumi.set(__self__, "cold", cold)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if coordinating is not None:
            pulumi.set(__self__, "coordinating", coordinating)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if frozen is not None:
            pulumi.set(__self__, "frozen", frozen)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if keystore_contents is not None:
            pulumi.set(__self__, "keystore_contents", keystore_contents)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if ml is not None:
            pulumi.set(__self__, "ml", ml)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_clusters is not None:
            pulumi.set(__self__, "remote_clusters", remote_clusters)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)
        if snapshot_source is not None:
            pulumi.set(__self__, "snapshot_source", snapshot_source)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if trust_accounts is not None:
            pulumi.set(__self__, "trust_accounts", trust_accounts)
        if trust_externals is not None:
            pulumi.set(__self__, "trust_externals", trust_externals)
        if warm is not None:
            pulumi.set(__self__, "warm", warm)

    @property
    @pulumi.getter
    def hot(self) -> pulumi.Input['DeploymentElasticsearchHotArgs']:
        """
        'hot' topology element
        """
        return pulumi.get(self, "hot")

    @hot.setter
    def hot(self, value: pulumi.Input['DeploymentElasticsearchHotArgs']):
        pulumi.set(self, "hot", value)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable autoscaling. Defaults to the setting coming from the deployment template.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        """
        The encoded Elasticsearch credentials to use in Beats or Logstash
        """
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter
    def cold(self) -> Optional[pulumi.Input['DeploymentElasticsearchColdArgs']]:
        """
        'cold' topology element
        """
        return pulumi.get(self, "cold")

    @cold.setter
    def cold(self, value: Optional[pulumi.Input['DeploymentElasticsearchColdArgs']]):
        pulumi.set(self, "cold", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentElasticsearchConfigArgs']]:
        """
        Elasticsearch settings which will be applied to all topologies
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentElasticsearchConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def coordinating(self) -> Optional[pulumi.Input['DeploymentElasticsearchCoordinatingArgs']]:
        """
        'coordinating' topology element
        """
        return pulumi.get(self, "coordinating")

    @coordinating.setter
    def coordinating(self, value: Optional[pulumi.Input['DeploymentElasticsearchCoordinatingArgs']]):
        pulumi.set(self, "coordinating", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]]]:
        """
        Optional Elasticsearch extensions such as custom bundles or plugins.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def frozen(self) -> Optional[pulumi.Input['DeploymentElasticsearchFrozenArgs']]:
        """
        'frozen' topology element
        """
        return pulumi.get(self, "frozen")

    @frozen.setter
    def frozen(self, value: Optional[pulumi.Input['DeploymentElasticsearchFrozenArgs']]):
        pulumi.set(self, "frozen", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The Elasticsearch resource HTTP endpoint
        """
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The Elasticsearch resource HTTPs endpoint
        """
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="keystoreContents")
    def keystore_contents(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeploymentElasticsearchKeystoreContentsArgs']]]]:
        """
        Keystore contents that are controlled by the deployment resource.
        """
        return pulumi.get(self, "keystore_contents")

    @keystore_contents.setter
    def keystore_contents(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeploymentElasticsearchKeystoreContentsArgs']]]]):
        pulumi.set(self, "keystore_contents", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input['DeploymentElasticsearchMasterArgs']]:
        """
        'master' topology element
        """
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input['DeploymentElasticsearchMasterArgs']]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter
    def ml(self) -> Optional[pulumi.Input['DeploymentElasticsearchMlArgs']]:
        """
        'ml' topology element
        """
        return pulumi.get(self, "ml")

    @ml.setter
    def ml(self, value: Optional[pulumi.Input['DeploymentElasticsearchMlArgs']]):
        pulumi.set(self, "ml", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable reference for the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch Service (ESS) region where the deployment should be hosted. For Elastic Cloud Enterprise (ECE) installations, set to `"ece-region".
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="remoteClusters")
    def remote_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]]]:
        """
        Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
        """
        return pulumi.get(self, "remote_clusters")

    @remote_clusters.setter
    def remote_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]]]):
        pulumi.set(self, "remote_clusters", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Elasticsearch resource unique identifier
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def snapshot(self) -> Optional[pulumi.Input['DeploymentElasticsearchSnapshotArgs']]:
        """
        (ECE only) Snapshot configuration settings for an Elasticsearch cluster.
        """
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: Optional[pulumi.Input['DeploymentElasticsearchSnapshotArgs']]):
        pulumi.set(self, "snapshot", value)

    @property
    @pulumi.getter(name="snapshotSource")
    def snapshot_source(self) -> Optional[pulumi.Input['DeploymentElasticsearchSnapshotSourceArgs']]:
        return pulumi.get(self, "snapshot_source")

    @snapshot_source.setter
    def snapshot_source(self, value: Optional[pulumi.Input['DeploymentElasticsearchSnapshotSourceArgs']]):
        pulumi.set(self, "snapshot_source", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter(name="trustAccounts")
    def trust_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]]]:
        """
        Optional Elasticsearch account trust settings.
        """
        return pulumi.get(self, "trust_accounts")

    @trust_accounts.setter
    def trust_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]]]):
        pulumi.set(self, "trust_accounts", value)

    @property
    @pulumi.getter(name="trustExternals")
    def trust_externals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]]]:
        """
        Optional Elasticsearch external trust settings.
        """
        return pulumi.get(self, "trust_externals")

    @trust_externals.setter
    def trust_externals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]]]):
        pulumi.set(self, "trust_externals", value)

    @property
    @pulumi.getter
    def warm(self) -> Optional[pulumi.Input['DeploymentElasticsearchWarmArgs']]:
        """
        'warm' topology element
        """
        return pulumi.get(self, "warm")

    @warm.setter
    def warm(self, value: Optional[pulumi.Input['DeploymentElasticsearchWarmArgs']]):
        pulumi.set(self, "warm", value)


if not MYPY:
    class DeploymentElasticsearchColdArgsDict(TypedDict):
        autoscaling: pulumi.Input['DeploymentElasticsearchColdAutoscalingArgsDict']
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Instance Configuration ID of the topology element
        """
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Instance Configuration version of the topology element
        """
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        node_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The computed list of node roles for the current topology element
        """
        node_type_data: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        node_type_ingest: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        node_type_master: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        node_type_ml: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        size: NotRequired[pulumi.Input[str]]
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
elif False:
    DeploymentElasticsearchColdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchColdArgs:
    def __init__(__self__, *,
                 autoscaling: pulumi.Input['DeploymentElasticsearchColdAutoscalingArgs'],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchColdAutoscalingArgs'] autoscaling: Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        :param pulumi.Input[str] instance_configuration_id: Instance Configuration ID of the topology element
        :param pulumi.Input[int] instance_configuration_version: Instance Configuration version of the topology element
        :param pulumi.Input[str] latest_instance_configuration_id: Latest Instance Configuration ID available on the deployment template for the topology element
        :param pulumi.Input[int] latest_instance_configuration_version: Latest version available for the Instance Configuration with the latest*instance*configuration_id
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_roles: The computed list of node roles for the current topology element
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch Topology element (data node)
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch Topology element (ingest node)
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch Topology element (master node)
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch Topology element (machine learning node)
        :param pulumi.Input[str] size: Amount of "size_resource" per node in the "\\n\\ng" notation
        :param pulumi.Input[str] size_resource: Size type, defaults to "memory".
        :param pulumi.Input[int] zone_count: Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        pulumi.set(__self__, "autoscaling", autoscaling)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Input['DeploymentElasticsearchColdAutoscalingArgs']:
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: pulumi.Input['DeploymentElasticsearchColdAutoscalingArgs']):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Configuration ID of the topology element
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance Configuration version of the topology element
        """
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The computed list of node roles for the current topology element
        """
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentElasticsearchColdAutoscalingArgsDict(TypedDict):
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        max_size: NotRequired[pulumi.Input[str]]
        """
        Maximum size value for the maximum autoscaling setting.
        """
        max_size_resource: NotRequired[pulumi.Input[str]]
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        min_size: NotRequired[pulumi.Input[str]]
        """
        Minimum size value for the minimum autoscaling setting.
        """
        min_size_resource: NotRequired[pulumi.Input[str]]
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        policy_override_json: NotRequired[pulumi.Input[str]]
        """
        Computed policy overrides set directly via the API or other clients.
        """
elif False:
    DeploymentElasticsearchColdAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchColdAutoscalingArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        :param pulumi.Input[str] max_size: Maximum size value for the maximum autoscaling setting.
        :param pulumi.Input[str] max_size_resource: Maximum resource type for the maximum autoscaling setting.
        :param pulumi.Input[str] min_size: Minimum size value for the minimum autoscaling setting.
        :param pulumi.Input[str] min_size_resource: Minimum resource type for the minimum autoscaling setting.
        :param pulumi.Input[str] policy_override_json: Computed policy overrides set directly via the API or other clients.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size value for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum size value for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        Computed policy overrides set directly via the API or other clients.
        """
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


if not MYPY:
    class DeploymentElasticsearchConfigArgsDict(TypedDict):
        docker_image: NotRequired[pulumi.Input[str]]
        """
        Overrides the docker image the Elasticsearch nodes will use. Note that this field will only work for internal users only.
        """
        plugins: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of Elasticsearch supported plugins, which vary from version to version. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html)
        """
        user_settings_json: NotRequired[pulumi.Input[str]]
        """
        JSON-formatted user level "elasticsearch.yml" setting overrides
        """
        user_settings_override_json: NotRequired[pulumi.Input[str]]
        """
        JSON-formatted admin (ECE) level "elasticsearch.yml" setting overrides
        """
        user_settings_override_yaml: NotRequired[pulumi.Input[str]]
        """
        YAML-formatted admin (ECE) level "elasticsearch.yml" setting overrides
        """
        user_settings_yaml: NotRequired[pulumi.Input[str]]
        """
        YAML-formatted user level "elasticsearch.yml" setting overrides
        """
elif False:
    DeploymentElasticsearchConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchConfigArgs:
    def __init__(__self__, *,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] docker_image: Overrides the docker image the Elasticsearch nodes will use. Note that this field will only work for internal users only.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] plugins: List of Elasticsearch supported plugins, which vary from version to version. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html)
        :param pulumi.Input[str] user_settings_json: JSON-formatted user level "elasticsearch.yml" setting overrides
        :param pulumi.Input[str] user_settings_override_json: JSON-formatted admin (ECE) level "elasticsearch.yml" setting overrides
        :param pulumi.Input[str] user_settings_override_yaml: YAML-formatted admin (ECE) level "elasticsearch.yml" setting overrides
        :param pulumi.Input[str] user_settings_yaml: YAML-formatted user level "elasticsearch.yml" setting overrides
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        """
        Overrides the docker image the Elasticsearch nodes will use. Note that this field will only work for internal users only.
        """
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Elasticsearch supported plugins, which vary from version to version. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html)
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted user level "elasticsearch.yml" setting overrides
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted admin (ECE) level "elasticsearch.yml" setting overrides
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted admin (ECE) level "elasticsearch.yml" setting overrides
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted user level "elasticsearch.yml" setting overrides
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


if not MYPY:
    class DeploymentElasticsearchCoordinatingArgsDict(TypedDict):
        autoscaling: pulumi.Input['DeploymentElasticsearchCoordinatingAutoscalingArgsDict']
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Instance Configuration ID of the topology element
        """
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Instance Configuration version of the topology element
        """
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        node_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The computed list of node roles for the current topology element
        """
        node_type_data: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        node_type_ingest: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        node_type_master: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        node_type_ml: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        size: NotRequired[pulumi.Input[str]]
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
elif False:
    DeploymentElasticsearchCoordinatingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchCoordinatingArgs:
    def __init__(__self__, *,
                 autoscaling: pulumi.Input['DeploymentElasticsearchCoordinatingAutoscalingArgs'],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchCoordinatingAutoscalingArgs'] autoscaling: Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        :param pulumi.Input[str] instance_configuration_id: Instance Configuration ID of the topology element
        :param pulumi.Input[int] instance_configuration_version: Instance Configuration version of the topology element
        :param pulumi.Input[str] latest_instance_configuration_id: Latest Instance Configuration ID available on the deployment template for the topology element
        :param pulumi.Input[int] latest_instance_configuration_version: Latest version available for the Instance Configuration with the latest*instance*configuration_id
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_roles: The computed list of node roles for the current topology element
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch Topology element (data node)
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch Topology element (ingest node)
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch Topology element (master node)
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch Topology element (machine learning node)
        :param pulumi.Input[str] size: Amount of "size_resource" per node in the "\\n\\ng" notation
        :param pulumi.Input[str] size_resource: Size type, defaults to "memory".
        :param pulumi.Input[int] zone_count: Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        pulumi.set(__self__, "autoscaling", autoscaling)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Input['DeploymentElasticsearchCoordinatingAutoscalingArgs']:
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: pulumi.Input['DeploymentElasticsearchCoordinatingAutoscalingArgs']):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Configuration ID of the topology element
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance Configuration version of the topology element
        """
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The computed list of node roles for the current topology element
        """
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentElasticsearchCoordinatingAutoscalingArgsDict(TypedDict):
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        max_size: NotRequired[pulumi.Input[str]]
        """
        Maximum size value for the maximum autoscaling setting.
        """
        max_size_resource: NotRequired[pulumi.Input[str]]
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        min_size: NotRequired[pulumi.Input[str]]
        """
        Minimum size value for the minimum autoscaling setting.
        """
        min_size_resource: NotRequired[pulumi.Input[str]]
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        policy_override_json: NotRequired[pulumi.Input[str]]
        """
        Computed policy overrides set directly via the API or other clients.
        """
elif False:
    DeploymentElasticsearchCoordinatingAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchCoordinatingAutoscalingArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        :param pulumi.Input[str] max_size: Maximum size value for the maximum autoscaling setting.
        :param pulumi.Input[str] max_size_resource: Maximum resource type for the maximum autoscaling setting.
        :param pulumi.Input[str] min_size: Minimum size value for the minimum autoscaling setting.
        :param pulumi.Input[str] min_size_resource: Minimum resource type for the minimum autoscaling setting.
        :param pulumi.Input[str] policy_override_json: Computed policy overrides set directly via the API or other clients.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size value for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum size value for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        Computed policy overrides set directly via the API or other clients.
        """
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


if not MYPY:
    class DeploymentElasticsearchExtensionArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Extension name.
        """
        type: pulumi.Input[str]
        """
        Extension type, only `bundle` or `plugin` are supported.
        """
        url: pulumi.Input[str]
        """
        Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
        """
        version: pulumi.Input[str]
        """
        Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as `7.*` or `*` but **plugins must use full version notation down to the patch level**, such as `7.10.1` and wildcards are not allowed.
        """
elif False:
    DeploymentElasticsearchExtensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchExtensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 url: pulumi.Input[str],
                 version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Extension name.
        :param pulumi.Input[str] type: Extension type, only `bundle` or `plugin` are supported.
        :param pulumi.Input[str] url: Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
        :param pulumi.Input[str] version: Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as `7.*` or `*` but **plugins must use full version notation down to the patch level**, such as `7.10.1` and wildcards are not allowed.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Extension name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Extension type, only `bundle` or `plugin` are supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as `7.*` or `*` but **plugins must use full version notation down to the patch level**, such as `7.10.1` and wildcards are not allowed.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class DeploymentElasticsearchFrozenArgsDict(TypedDict):
        autoscaling: pulumi.Input['DeploymentElasticsearchFrozenAutoscalingArgsDict']
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Instance Configuration ID of the topology element
        """
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Instance Configuration version of the topology element
        """
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        node_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The computed list of node roles for the current topology element
        """
        node_type_data: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        node_type_ingest: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        node_type_master: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        node_type_ml: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        size: NotRequired[pulumi.Input[str]]
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
elif False:
    DeploymentElasticsearchFrozenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchFrozenArgs:
    def __init__(__self__, *,
                 autoscaling: pulumi.Input['DeploymentElasticsearchFrozenAutoscalingArgs'],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchFrozenAutoscalingArgs'] autoscaling: Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        :param pulumi.Input[str] instance_configuration_id: Instance Configuration ID of the topology element
        :param pulumi.Input[int] instance_configuration_version: Instance Configuration version of the topology element
        :param pulumi.Input[str] latest_instance_configuration_id: Latest Instance Configuration ID available on the deployment template for the topology element
        :param pulumi.Input[int] latest_instance_configuration_version: Latest version available for the Instance Configuration with the latest*instance*configuration_id
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_roles: The computed list of node roles for the current topology element
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch Topology element (data node)
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch Topology element (ingest node)
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch Topology element (master node)
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch Topology element (machine learning node)
        :param pulumi.Input[str] size: Amount of "size_resource" per node in the "\\n\\ng" notation
        :param pulumi.Input[str] size_resource: Size type, defaults to "memory".
        :param pulumi.Input[int] zone_count: Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        pulumi.set(__self__, "autoscaling", autoscaling)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Input['DeploymentElasticsearchFrozenAutoscalingArgs']:
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: pulumi.Input['DeploymentElasticsearchFrozenAutoscalingArgs']):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Configuration ID of the topology element
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance Configuration version of the topology element
        """
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The computed list of node roles for the current topology element
        """
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentElasticsearchFrozenAutoscalingArgsDict(TypedDict):
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        max_size: NotRequired[pulumi.Input[str]]
        """
        Maximum size value for the maximum autoscaling setting.
        """
        max_size_resource: NotRequired[pulumi.Input[str]]
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        min_size: NotRequired[pulumi.Input[str]]
        """
        Minimum size value for the minimum autoscaling setting.
        """
        min_size_resource: NotRequired[pulumi.Input[str]]
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        policy_override_json: NotRequired[pulumi.Input[str]]
        """
        Computed policy overrides set directly via the API or other clients.
        """
elif False:
    DeploymentElasticsearchFrozenAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchFrozenAutoscalingArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        :param pulumi.Input[str] max_size: Maximum size value for the maximum autoscaling setting.
        :param pulumi.Input[str] max_size_resource: Maximum resource type for the maximum autoscaling setting.
        :param pulumi.Input[str] min_size: Minimum size value for the minimum autoscaling setting.
        :param pulumi.Input[str] min_size_resource: Minimum resource type for the minimum autoscaling setting.
        :param pulumi.Input[str] policy_override_json: Computed policy overrides set directly via the API or other clients.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size value for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum size value for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        Computed policy overrides set directly via the API or other clients.
        """
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


if not MYPY:
    class DeploymentElasticsearchHotArgsDict(TypedDict):
        autoscaling: pulumi.Input['DeploymentElasticsearchHotAutoscalingArgsDict']
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Instance Configuration ID of the topology element
        """
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Instance Configuration version of the topology element
        """
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        node_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The computed list of node roles for the current topology element
        """
        node_type_data: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        node_type_ingest: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        node_type_master: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        node_type_ml: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        size: NotRequired[pulumi.Input[str]]
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
elif False:
    DeploymentElasticsearchHotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchHotArgs:
    def __init__(__self__, *,
                 autoscaling: pulumi.Input['DeploymentElasticsearchHotAutoscalingArgs'],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchHotAutoscalingArgs'] autoscaling: Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        :param pulumi.Input[str] instance_configuration_id: Instance Configuration ID of the topology element
        :param pulumi.Input[int] instance_configuration_version: Instance Configuration version of the topology element
        :param pulumi.Input[str] latest_instance_configuration_id: Latest Instance Configuration ID available on the deployment template for the topology element
        :param pulumi.Input[int] latest_instance_configuration_version: Latest version available for the Instance Configuration with the latest*instance*configuration_id
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_roles: The computed list of node roles for the current topology element
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch Topology element (data node)
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch Topology element (ingest node)
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch Topology element (master node)
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch Topology element (machine learning node)
        :param pulumi.Input[str] size: Amount of "size_resource" per node in the "\\n\\ng" notation
        :param pulumi.Input[str] size_resource: Size type, defaults to "memory".
        :param pulumi.Input[int] zone_count: Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        pulumi.set(__self__, "autoscaling", autoscaling)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Input['DeploymentElasticsearchHotAutoscalingArgs']:
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: pulumi.Input['DeploymentElasticsearchHotAutoscalingArgs']):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Configuration ID of the topology element
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance Configuration version of the topology element
        """
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The computed list of node roles for the current topology element
        """
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentElasticsearchHotAutoscalingArgsDict(TypedDict):
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        max_size: NotRequired[pulumi.Input[str]]
        """
        Maximum size value for the maximum autoscaling setting.
        """
        max_size_resource: NotRequired[pulumi.Input[str]]
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        min_size: NotRequired[pulumi.Input[str]]
        """
        Minimum size value for the minimum autoscaling setting.
        """
        min_size_resource: NotRequired[pulumi.Input[str]]
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        policy_override_json: NotRequired[pulumi.Input[str]]
        """
        Computed policy overrides set directly via the API or other clients.
        """
elif False:
    DeploymentElasticsearchHotAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchHotAutoscalingArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        :param pulumi.Input[str] max_size: Maximum size value for the maximum autoscaling setting.
        :param pulumi.Input[str] max_size_resource: Maximum resource type for the maximum autoscaling setting.
        :param pulumi.Input[str] min_size: Minimum size value for the minimum autoscaling setting.
        :param pulumi.Input[str] min_size_resource: Minimum resource type for the minimum autoscaling setting.
        :param pulumi.Input[str] policy_override_json: Computed policy overrides set directly via the API or other clients.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size value for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum size value for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        Computed policy overrides set directly via the API or other clients.
        """
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


if not MYPY:
    class DeploymentElasticsearchKeystoreContentsArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        Secret value. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
        """
        as_file: NotRequired[pulumi.Input[bool]]
        """
        If true, the secret is handled as a file. Otherwise, it's handled as a plain string.
        """
elif False:
    DeploymentElasticsearchKeystoreContentsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchKeystoreContentsArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 as_file: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] value: Secret value. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
        :param pulumi.Input[bool] as_file: If true, the secret is handled as a file. Otherwise, it's handled as a plain string.
        """
        pulumi.set(__self__, "value", value)
        if as_file is not None:
            pulumi.set(__self__, "as_file", as_file)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Secret value. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="asFile")
    def as_file(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the secret is handled as a file. Otherwise, it's handled as a plain string.
        """
        return pulumi.get(self, "as_file")

    @as_file.setter
    def as_file(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "as_file", value)


if not MYPY:
    class DeploymentElasticsearchMasterArgsDict(TypedDict):
        autoscaling: pulumi.Input['DeploymentElasticsearchMasterAutoscalingArgsDict']
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Instance Configuration ID of the topology element
        """
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Instance Configuration version of the topology element
        """
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        node_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The computed list of node roles for the current topology element
        """
        node_type_data: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        node_type_ingest: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        node_type_master: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        node_type_ml: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        size: NotRequired[pulumi.Input[str]]
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
elif False:
    DeploymentElasticsearchMasterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchMasterArgs:
    def __init__(__self__, *,
                 autoscaling: pulumi.Input['DeploymentElasticsearchMasterAutoscalingArgs'],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchMasterAutoscalingArgs'] autoscaling: Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        :param pulumi.Input[str] instance_configuration_id: Instance Configuration ID of the topology element
        :param pulumi.Input[int] instance_configuration_version: Instance Configuration version of the topology element
        :param pulumi.Input[str] latest_instance_configuration_id: Latest Instance Configuration ID available on the deployment template for the topology element
        :param pulumi.Input[int] latest_instance_configuration_version: Latest version available for the Instance Configuration with the latest*instance*configuration_id
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_roles: The computed list of node roles for the current topology element
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch Topology element (data node)
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch Topology element (ingest node)
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch Topology element (master node)
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch Topology element (machine learning node)
        :param pulumi.Input[str] size: Amount of "size_resource" per node in the "\\n\\ng" notation
        :param pulumi.Input[str] size_resource: Size type, defaults to "memory".
        :param pulumi.Input[int] zone_count: Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        pulumi.set(__self__, "autoscaling", autoscaling)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Input['DeploymentElasticsearchMasterAutoscalingArgs']:
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: pulumi.Input['DeploymentElasticsearchMasterAutoscalingArgs']):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Configuration ID of the topology element
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance Configuration version of the topology element
        """
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The computed list of node roles for the current topology element
        """
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentElasticsearchMasterAutoscalingArgsDict(TypedDict):
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        max_size: NotRequired[pulumi.Input[str]]
        """
        Maximum size value for the maximum autoscaling setting.
        """
        max_size_resource: NotRequired[pulumi.Input[str]]
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        min_size: NotRequired[pulumi.Input[str]]
        """
        Minimum size value for the minimum autoscaling setting.
        """
        min_size_resource: NotRequired[pulumi.Input[str]]
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        policy_override_json: NotRequired[pulumi.Input[str]]
        """
        Computed policy overrides set directly via the API or other clients.
        """
elif False:
    DeploymentElasticsearchMasterAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchMasterAutoscalingArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        :param pulumi.Input[str] max_size: Maximum size value for the maximum autoscaling setting.
        :param pulumi.Input[str] max_size_resource: Maximum resource type for the maximum autoscaling setting.
        :param pulumi.Input[str] min_size: Minimum size value for the minimum autoscaling setting.
        :param pulumi.Input[str] min_size_resource: Minimum resource type for the minimum autoscaling setting.
        :param pulumi.Input[str] policy_override_json: Computed policy overrides set directly via the API or other clients.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size value for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum size value for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        Computed policy overrides set directly via the API or other clients.
        """
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


if not MYPY:
    class DeploymentElasticsearchMlArgsDict(TypedDict):
        autoscaling: pulumi.Input['DeploymentElasticsearchMlAutoscalingArgsDict']
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Instance Configuration ID of the topology element
        """
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Instance Configuration version of the topology element
        """
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        node_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The computed list of node roles for the current topology element
        """
        node_type_data: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        node_type_ingest: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        node_type_master: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        node_type_ml: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        size: NotRequired[pulumi.Input[str]]
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
elif False:
    DeploymentElasticsearchMlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchMlArgs:
    def __init__(__self__, *,
                 autoscaling: pulumi.Input['DeploymentElasticsearchMlAutoscalingArgs'],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchMlAutoscalingArgs'] autoscaling: Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        :param pulumi.Input[str] instance_configuration_id: Instance Configuration ID of the topology element
        :param pulumi.Input[int] instance_configuration_version: Instance Configuration version of the topology element
        :param pulumi.Input[str] latest_instance_configuration_id: Latest Instance Configuration ID available on the deployment template for the topology element
        :param pulumi.Input[int] latest_instance_configuration_version: Latest version available for the Instance Configuration with the latest*instance*configuration_id
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_roles: The computed list of node roles for the current topology element
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch Topology element (data node)
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch Topology element (ingest node)
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch Topology element (master node)
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch Topology element (machine learning node)
        :param pulumi.Input[str] size: Amount of "size_resource" per node in the "\\n\\ng" notation
        :param pulumi.Input[str] size_resource: Size type, defaults to "memory".
        :param pulumi.Input[int] zone_count: Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        pulumi.set(__self__, "autoscaling", autoscaling)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Input['DeploymentElasticsearchMlAutoscalingArgs']:
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: pulumi.Input['DeploymentElasticsearchMlAutoscalingArgs']):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Configuration ID of the topology element
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance Configuration version of the topology element
        """
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The computed list of node roles for the current topology element
        """
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentElasticsearchMlAutoscalingArgsDict(TypedDict):
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        max_size: NotRequired[pulumi.Input[str]]
        """
        Maximum size value for the maximum autoscaling setting.
        """
        max_size_resource: NotRequired[pulumi.Input[str]]
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        min_size: NotRequired[pulumi.Input[str]]
        """
        Minimum size value for the minimum autoscaling setting.
        """
        min_size_resource: NotRequired[pulumi.Input[str]]
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        policy_override_json: NotRequired[pulumi.Input[str]]
        """
        Computed policy overrides set directly via the API or other clients.
        """
elif False:
    DeploymentElasticsearchMlAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchMlAutoscalingArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        :param pulumi.Input[str] max_size: Maximum size value for the maximum autoscaling setting.
        :param pulumi.Input[str] max_size_resource: Maximum resource type for the maximum autoscaling setting.
        :param pulumi.Input[str] min_size: Minimum size value for the minimum autoscaling setting.
        :param pulumi.Input[str] min_size_resource: Minimum resource type for the minimum autoscaling setting.
        :param pulumi.Input[str] policy_override_json: Computed policy overrides set directly via the API or other clients.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size value for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum size value for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        Computed policy overrides set directly via the API or other clients.
        """
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


if not MYPY:
    class DeploymentElasticsearchRemoteClusterArgsDict(TypedDict):
        alias: pulumi.Input[str]
        """
        Alias for this Cross Cluster Search binding
        """
        deployment_id: pulumi.Input[str]
        """
        Remote deployment ID
        """
        ref_id: NotRequired[pulumi.Input[str]]
        """
        Remote elasticsearch "ref_id", it is best left to the default value
        """
        skip_unavailable: NotRequired[pulumi.Input[bool]]
        """
        If true, skip the cluster during search when disconnected
        """
elif False:
    DeploymentElasticsearchRemoteClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchRemoteClusterArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[str],
                 deployment_id: pulumi.Input[str],
                 ref_id: Optional[pulumi.Input[str]] = None,
                 skip_unavailable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] alias: Alias for this Cross Cluster Search binding
        :param pulumi.Input[str] deployment_id: Remote deployment ID
        :param pulumi.Input[str] ref_id: Remote elasticsearch "ref_id", it is best left to the default value
        :param pulumi.Input[bool] skip_unavailable: If true, skip the cluster during search when disconnected
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "deployment_id", deployment_id)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if skip_unavailable is not None:
            pulumi.set(__self__, "skip_unavailable", skip_unavailable)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Input[str]:
        """
        Alias for this Cross Cluster Search binding
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[str]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        """
        Remote deployment ID
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Remote elasticsearch "ref_id", it is best left to the default value
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter(name="skipUnavailable")
    def skip_unavailable(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, skip the cluster during search when disconnected
        """
        return pulumi.get(self, "skip_unavailable")

    @skip_unavailable.setter
    def skip_unavailable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_unavailable", value)


if not MYPY:
    class DeploymentElasticsearchSnapshotArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        """
        Indicates if Snapshotting is enabled.
        """
        repository: NotRequired[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryArgsDict']]
        """
        Snapshot repository configuration
        """
elif False:
    DeploymentElasticsearchSnapshotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchSnapshotArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 repository: Optional[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Indicates if Snapshotting is enabled.
        :param pulumi.Input['DeploymentElasticsearchSnapshotRepositoryArgs'] repository: Snapshot repository configuration
        """
        pulumi.set(__self__, "enabled", enabled)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Indicates if Snapshotting is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryArgs']]:
        """
        Snapshot repository configuration
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryArgs']]):
        pulumi.set(self, "repository", value)


if not MYPY:
    class DeploymentElasticsearchSnapshotRepositoryArgsDict(TypedDict):
        reference: NotRequired[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryReferenceArgsDict']]
        """
        Cluster snapshot reference repository settings, containing the repository name in ECE fashion
        """
elif False:
    DeploymentElasticsearchSnapshotRepositoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchSnapshotRepositoryArgs:
    def __init__(__self__, *,
                 reference: Optional[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryReferenceArgs']] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchSnapshotRepositoryReferenceArgs'] reference: Cluster snapshot reference repository settings, containing the repository name in ECE fashion
        """
        if reference is not None:
            pulumi.set(__self__, "reference", reference)

    @property
    @pulumi.getter
    def reference(self) -> Optional[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryReferenceArgs']]:
        """
        Cluster snapshot reference repository settings, containing the repository name in ECE fashion
        """
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: Optional[pulumi.Input['DeploymentElasticsearchSnapshotRepositoryReferenceArgs']]):
        pulumi.set(self, "reference", value)


if not MYPY:
    class DeploymentElasticsearchSnapshotRepositoryReferenceArgsDict(TypedDict):
        repository_name: pulumi.Input[str]
        """
        ECE snapshot repository name, from the '/platform/configuration/snapshots/repositories' endpoint
        """
elif False:
    DeploymentElasticsearchSnapshotRepositoryReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchSnapshotRepositoryReferenceArgs:
    def __init__(__self__, *,
                 repository_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] repository_name: ECE snapshot repository name, from the '/platform/configuration/snapshots/repositories' endpoint
        """
        pulumi.set(__self__, "repository_name", repository_name)

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> pulumi.Input[str]:
        """
        ECE snapshot repository name, from the '/platform/configuration/snapshots/repositories' endpoint
        """
        return pulumi.get(self, "repository_name")

    @repository_name.setter
    def repository_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_name", value)


if not MYPY:
    class DeploymentElasticsearchSnapshotSourceArgsDict(TypedDict):
        source_elasticsearch_cluster_id: pulumi.Input[str]
        """
        ID of the Elasticsearch cluster that will be used as the source of the snapshot
        """
        snapshot_name: NotRequired[pulumi.Input[str]]
        """
        Name of the snapshot to restore. Use '**latest_success**' to get the most recent successful snapshot.
        """
elif False:
    DeploymentElasticsearchSnapshotSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchSnapshotSourceArgs:
    def __init__(__self__, *,
                 source_elasticsearch_cluster_id: pulumi.Input[str],
                 snapshot_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_elasticsearch_cluster_id: ID of the Elasticsearch cluster that will be used as the source of the snapshot
        :param pulumi.Input[str] snapshot_name: Name of the snapshot to restore. Use '**latest_success**' to get the most recent successful snapshot.
        """
        pulumi.set(__self__, "source_elasticsearch_cluster_id", source_elasticsearch_cluster_id)
        if snapshot_name is not None:
            pulumi.set(__self__, "snapshot_name", snapshot_name)

    @property
    @pulumi.getter(name="sourceElasticsearchClusterId")
    def source_elasticsearch_cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the Elasticsearch cluster that will be used as the source of the snapshot
        """
        return pulumi.get(self, "source_elasticsearch_cluster_id")

    @source_elasticsearch_cluster_id.setter
    def source_elasticsearch_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_elasticsearch_cluster_id", value)

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the snapshot to restore. Use '**latest_success**' to get the most recent successful snapshot.
        """
        return pulumi.get(self, "snapshot_name")

    @snapshot_name.setter
    def snapshot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_name", value)


if not MYPY:
    class DeploymentElasticsearchTrustAccountArgsDict(TypedDict):
        account_id: pulumi.Input[str]
        """
        The ID of the Account.
        """
        trust_all: pulumi.Input[bool]
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        trust_allowlists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of clusters to trust. Only used when `trust_all` is false.
        """
elif False:
    DeploymentElasticsearchTrustAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchTrustAccountArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 trust_all: pulumi.Input[bool],
                 trust_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] account_id: The ID of the Account.
        :param pulumi.Input[bool] trust_all: If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trust_allowlists: The list of clusters to trust. Only used when `trust_all` is false.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "trust_all", trust_all)
        if trust_allowlists is not None:
            pulumi.set(__self__, "trust_allowlists", trust_allowlists)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The ID of the Account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="trustAll")
    def trust_all(self) -> pulumi.Input[bool]:
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        return pulumi.get(self, "trust_all")

    @trust_all.setter
    def trust_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "trust_all", value)

    @property
    @pulumi.getter(name="trustAllowlists")
    def trust_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of clusters to trust. Only used when `trust_all` is false.
        """
        return pulumi.get(self, "trust_allowlists")

    @trust_allowlists.setter
    def trust_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trust_allowlists", value)


if not MYPY:
    class DeploymentElasticsearchTrustExternalArgsDict(TypedDict):
        relationship_id: pulumi.Input[str]
        """
        The ID of the external trust relationship.
        """
        trust_all: pulumi.Input[bool]
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        trust_allowlists: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of clusters to trust. Only used when `trust_all` is false.
        """
elif False:
    DeploymentElasticsearchTrustExternalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchTrustExternalArgs:
    def __init__(__self__, *,
                 relationship_id: pulumi.Input[str],
                 trust_all: pulumi.Input[bool],
                 trust_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] relationship_id: The ID of the external trust relationship.
        :param pulumi.Input[bool] trust_all: If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trust_allowlists: The list of clusters to trust. Only used when `trust_all` is false.
        """
        pulumi.set(__self__, "relationship_id", relationship_id)
        pulumi.set(__self__, "trust_all", trust_all)
        if trust_allowlists is not None:
            pulumi.set(__self__, "trust_allowlists", trust_allowlists)

    @property
    @pulumi.getter(name="relationshipId")
    def relationship_id(self) -> pulumi.Input[str]:
        """
        The ID of the external trust relationship.
        """
        return pulumi.get(self, "relationship_id")

    @relationship_id.setter
    def relationship_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "relationship_id", value)

    @property
    @pulumi.getter(name="trustAll")
    def trust_all(self) -> pulumi.Input[bool]:
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        return pulumi.get(self, "trust_all")

    @trust_all.setter
    def trust_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "trust_all", value)

    @property
    @pulumi.getter(name="trustAllowlists")
    def trust_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of clusters to trust. Only used when `trust_all` is false.
        """
        return pulumi.get(self, "trust_allowlists")

    @trust_allowlists.setter
    def trust_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trust_allowlists", value)


if not MYPY:
    class DeploymentElasticsearchWarmArgsDict(TypedDict):
        autoscaling: pulumi.Input['DeploymentElasticsearchWarmAutoscalingArgsDict']
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Instance Configuration ID of the topology element
        """
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Instance Configuration version of the topology element
        """
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        node_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The computed list of node roles for the current topology element
        """
        node_type_data: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        node_type_ingest: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        node_type_master: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        node_type_ml: NotRequired[pulumi.Input[str]]
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        size: NotRequired[pulumi.Input[str]]
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
elif False:
    DeploymentElasticsearchWarmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchWarmArgs:
    def __init__(__self__, *,
                 autoscaling: pulumi.Input['DeploymentElasticsearchWarmAutoscalingArgs'],
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentElasticsearchWarmAutoscalingArgs'] autoscaling: Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        :param pulumi.Input[str] instance_configuration_id: Instance Configuration ID of the topology element
        :param pulumi.Input[int] instance_configuration_version: Instance Configuration version of the topology element
        :param pulumi.Input[str] latest_instance_configuration_id: Latest Instance Configuration ID available on the deployment template for the topology element
        :param pulumi.Input[int] latest_instance_configuration_version: Latest version available for the Instance Configuration with the latest*instance*configuration_id
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_roles: The computed list of node roles for the current topology element
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch Topology element (data node)
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch Topology element (ingest node)
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch Topology element (master node)
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch Topology element (machine learning node)
        :param pulumi.Input[str] size: Amount of "size_resource" per node in the "\\n\\ng" notation
        :param pulumi.Input[str] size_resource: Size type, defaults to "memory".
        :param pulumi.Input[int] zone_count: Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        pulumi.set(__self__, "autoscaling", autoscaling)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def autoscaling(self) -> pulumi.Input['DeploymentElasticsearchWarmAutoscalingArgs']:
        """
        Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: pulumi.Input['DeploymentElasticsearchWarmAutoscalingArgs']):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Configuration ID of the topology element
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance Configuration version of the topology element
        """
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Latest Instance Configuration ID available on the deployment template for the topology element
        """
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        """
        Latest version available for the Instance Configuration with the latest*instance*configuration_id
        """
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The computed list of node roles for the current topology element
        """
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (data node)
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (ingest node)
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (master node)
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch Topology element (machine learning node)
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of "size_resource" per node in the "\\n\\ng" notation
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones that the Elasticsearch cluster will span. This is used to set HA
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentElasticsearchWarmAutoscalingArgsDict(TypedDict):
        autoscale: NotRequired[pulumi.Input[bool]]
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        max_size: NotRequired[pulumi.Input[str]]
        """
        Maximum size value for the maximum autoscaling setting.
        """
        max_size_resource: NotRequired[pulumi.Input[str]]
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        min_size: NotRequired[pulumi.Input[str]]
        """
        Minimum size value for the minimum autoscaling setting.
        """
        min_size_resource: NotRequired[pulumi.Input[str]]
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        policy_override_json: NotRequired[pulumi.Input[str]]
        """
        Computed policy overrides set directly via the API or other clients.
        """
elif False:
    DeploymentElasticsearchWarmAutoscalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentElasticsearchWarmAutoscalingArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        :param pulumi.Input[str] max_size: Maximum size value for the maximum autoscaling setting.
        :param pulumi.Input[str] max_size_resource: Maximum resource type for the maximum autoscaling setting.
        :param pulumi.Input[str] min_size: Minimum size value for the minimum autoscaling setting.
        :param pulumi.Input[str] min_size_resource: Minimum resource type for the minimum autoscaling setting.
        :param pulumi.Input[str] policy_override_json: Computed policy overrides set directly via the API or other clients.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this specific tier should be auto-scaled, overrides deployment-wide setting. Allowed for `ml` tier only.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum size value for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum resource type for the maximum autoscaling setting.
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum size value for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum resource type for the minimum autoscaling setting.
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        Computed policy overrides set directly via the API or other clients.
        """
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


if not MYPY:
    class DeploymentEnterpriseSearchArgsDict(TypedDict):
        config: NotRequired[pulumi.Input['DeploymentEnterpriseSearchConfigArgsDict']]
        """
        Optionally define the Enterprise Search configuration options for the Enterprise Search Server
        """
        elasticsearch_cluster_ref_id: NotRequired[pulumi.Input[str]]
        http_endpoint: NotRequired[pulumi.Input[str]]
        https_endpoint: NotRequired[pulumi.Input[str]]
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        node_type_appserver: NotRequired[pulumi.Input[bool]]
        node_type_connector: NotRequired[pulumi.Input[bool]]
        node_type_worker: NotRequired[pulumi.Input[bool]]
        ref_id: NotRequired[pulumi.Input[str]]
        region: NotRequired[pulumi.Input[str]]
        resource_id: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Optional size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
elif False:
    DeploymentEnterpriseSearchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentEnterpriseSearchArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentEnterpriseSearchConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 node_type_appserver: Optional[pulumi.Input[bool]] = None,
                 node_type_connector: Optional[pulumi.Input[bool]] = None,
                 node_type_worker: Optional[pulumi.Input[bool]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentEnterpriseSearchConfigArgs'] config: Optionally define the Enterprise Search configuration options for the Enterprise Search Server
        :param pulumi.Input[str] size_resource: Optional size type, defaults to "memory".
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if node_type_appserver is not None:
            pulumi.set(__self__, "node_type_appserver", node_type_appserver)
        if node_type_connector is not None:
            pulumi.set(__self__, "node_type_connector", node_type_connector)
        if node_type_worker is not None:
            pulumi.set(__self__, "node_type_worker", node_type_worker)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentEnterpriseSearchConfigArgs']]:
        """
        Optionally define the Enterprise Search configuration options for the Enterprise Search Server
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentEnterpriseSearchConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="nodeTypeAppserver")
    def node_type_appserver(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_appserver")

    @node_type_appserver.setter
    def node_type_appserver(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_appserver", value)

    @property
    @pulumi.getter(name="nodeTypeConnector")
    def node_type_connector(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_connector")

    @node_type_connector.setter
    def node_type_connector(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_connector", value)

    @property
    @pulumi.getter(name="nodeTypeWorker")
    def node_type_worker(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_worker")

    @node_type_worker.setter
    def node_type_worker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_worker", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Optional size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentEnterpriseSearchConfigArgsDict(TypedDict):
        docker_image: NotRequired[pulumi.Input[str]]
        """
        Optionally override the docker image the Enterprise Search nodes will use. Note that this field will only work for internal users only.
        """
        user_settings_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        user_settings_override_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_override_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
elif False:
    DeploymentEnterpriseSearchConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentEnterpriseSearchConfigArgs:
    def __init__(__self__, *,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] docker_image: Optionally override the docker image the Enterprise Search nodes will use. Note that this field will only work for internal users only.
        :param pulumi.Input[str] user_settings_json: An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_json: An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_yaml: An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_yaml: An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally override the docker image the Enterprise Search nodes will use. Note that this field will only work for internal users only.
        """
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


if not MYPY:
    class DeploymentIntegrationsServerArgsDict(TypedDict):
        config: NotRequired[pulumi.Input['DeploymentIntegrationsServerConfigArgsDict']]
        """
        Optionally define the Integrations Server configuration options for the IntegrationsServer Server
        """
        elasticsearch_cluster_ref_id: NotRequired[pulumi.Input[str]]
        endpoints: NotRequired[pulumi.Input['DeploymentIntegrationsServerEndpointsArgsDict']]
        """
        URLs for the accessing the Fleet and APM API's within this Integrations Server resource.
        """
        http_endpoint: NotRequired[pulumi.Input[str]]
        https_endpoint: NotRequired[pulumi.Input[str]]
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        ref_id: NotRequired[pulumi.Input[str]]
        region: NotRequired[pulumi.Input[str]]
        resource_id: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Optional size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
elif False:
    DeploymentIntegrationsServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentIntegrationsServerArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentIntegrationsServerConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input['DeploymentIntegrationsServerEndpointsArgs']] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentIntegrationsServerConfigArgs'] config: Optionally define the Integrations Server configuration options for the IntegrationsServer Server
        :param pulumi.Input['DeploymentIntegrationsServerEndpointsArgs'] endpoints: URLs for the accessing the Fleet and APM API's within this Integrations Server resource.
        :param pulumi.Input[str] size_resource: Optional size type, defaults to "memory".
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentIntegrationsServerConfigArgs']]:
        """
        Optionally define the Integrations Server configuration options for the IntegrationsServer Server
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentIntegrationsServerConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input['DeploymentIntegrationsServerEndpointsArgs']]:
        """
        URLs for the accessing the Fleet and APM API's within this Integrations Server resource.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input['DeploymentIntegrationsServerEndpointsArgs']]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Optional size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentIntegrationsServerConfigArgsDict(TypedDict):
        debug_enabled: NotRequired[pulumi.Input[bool]]
        """
        Optionally enable debug mode for Integrations Server instances - defaults to false
        """
        docker_image: NotRequired[pulumi.Input[str]]
        """
        Optionally override the docker image the Integrations Server nodes will use. Note that this field will only work for internal users only.
        """
        user_settings_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        user_settings_override_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_override_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
elif False:
    DeploymentIntegrationsServerConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentIntegrationsServerConfigArgs:
    def __init__(__self__, *,
                 debug_enabled: Optional[pulumi.Input[bool]] = None,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] debug_enabled: Optionally enable debug mode for Integrations Server instances - defaults to false
        :param pulumi.Input[str] docker_image: Optionally override the docker image the Integrations Server nodes will use. Note that this field will only work for internal users only.
        :param pulumi.Input[str] user_settings_json: An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_json: An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_yaml: An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_yaml: An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Optionally enable debug mode for Integrations Server instances - defaults to false
        """
        return pulumi.get(self, "debug_enabled")

    @debug_enabled.setter
    def debug_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug_enabled", value)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally override the docker image the Integrations Server nodes will use. Note that this field will only work for internal users only.
        """
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


if not MYPY:
    class DeploymentIntegrationsServerEndpointsArgsDict(TypedDict):
        apm: pulumi.Input[str]
        fleet: pulumi.Input[str]
        profiling: pulumi.Input[str]
        symbols: pulumi.Input[str]
elif False:
    DeploymentIntegrationsServerEndpointsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentIntegrationsServerEndpointsArgs:
    def __init__(__self__, *,
                 apm: pulumi.Input[str],
                 fleet: pulumi.Input[str],
                 profiling: pulumi.Input[str],
                 symbols: pulumi.Input[str]):
        pulumi.set(__self__, "apm", apm)
        pulumi.set(__self__, "fleet", fleet)
        pulumi.set(__self__, "profiling", profiling)
        pulumi.set(__self__, "symbols", symbols)

    @property
    @pulumi.getter
    def apm(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apm")

    @apm.setter
    def apm(self, value: pulumi.Input[str]):
        pulumi.set(self, "apm", value)

    @property
    @pulumi.getter
    def fleet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fleet")

    @fleet.setter
    def fleet(self, value: pulumi.Input[str]):
        pulumi.set(self, "fleet", value)

    @property
    @pulumi.getter
    def profiling(self) -> pulumi.Input[str]:
        return pulumi.get(self, "profiling")

    @profiling.setter
    def profiling(self, value: pulumi.Input[str]):
        pulumi.set(self, "profiling", value)

    @property
    @pulumi.getter
    def symbols(self) -> pulumi.Input[str]:
        return pulumi.get(self, "symbols")

    @symbols.setter
    def symbols(self, value: pulumi.Input[str]):
        pulumi.set(self, "symbols", value)


if not MYPY:
    class DeploymentKibanaArgsDict(TypedDict):
        config: NotRequired[pulumi.Input['DeploymentKibanaConfigArgsDict']]
        """
        Optionally define the Kibana configuration options for the Kibana Server
        """
        elasticsearch_cluster_ref_id: NotRequired[pulumi.Input[str]]
        http_endpoint: NotRequired[pulumi.Input[str]]
        https_endpoint: NotRequired[pulumi.Input[str]]
        instance_configuration_id: NotRequired[pulumi.Input[str]]
        instance_configuration_version: NotRequired[pulumi.Input[int]]
        latest_instance_configuration_id: NotRequired[pulumi.Input[str]]
        latest_instance_configuration_version: NotRequired[pulumi.Input[int]]
        ref_id: NotRequired[pulumi.Input[str]]
        region: NotRequired[pulumi.Input[str]]
        resource_id: NotRequired[pulumi.Input[str]]
        size: NotRequired[pulumi.Input[str]]
        size_resource: NotRequired[pulumi.Input[str]]
        """
        Optional size type, defaults to "memory".
        """
        zone_count: NotRequired[pulumi.Input[int]]
elif False:
    DeploymentKibanaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentKibanaArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentKibanaConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 latest_instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 latest_instance_configuration_version: Optional[pulumi.Input[int]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['DeploymentKibanaConfigArgs'] config: Optionally define the Kibana configuration options for the Kibana Server
        :param pulumi.Input[str] size_resource: Optional size type, defaults to "memory".
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if instance_configuration_version is not None:
            pulumi.set(__self__, "instance_configuration_version", instance_configuration_version)
        if latest_instance_configuration_id is not None:
            pulumi.set(__self__, "latest_instance_configuration_id", latest_instance_configuration_id)
        if latest_instance_configuration_version is not None:
            pulumi.set(__self__, "latest_instance_configuration_version", latest_instance_configuration_version)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentKibanaConfigArgs']]:
        """
        Optionally define the Kibana configuration options for the Kibana Server
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentKibanaConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="instanceConfigurationVersion")
    def instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "instance_configuration_version")

    @instance_configuration_version.setter
    def instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_configuration_version", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationId")
    def latest_instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_instance_configuration_id")

    @latest_instance_configuration_id.setter
    def latest_instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_instance_configuration_id", value)

    @property
    @pulumi.getter(name="latestInstanceConfigurationVersion")
    def latest_instance_configuration_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latest_instance_configuration_version")

    @latest_instance_configuration_version.setter
    def latest_instance_configuration_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latest_instance_configuration_version", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Optional size type, defaults to "memory".
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


if not MYPY:
    class DeploymentKibanaConfigArgsDict(TypedDict):
        docker_image: NotRequired[pulumi.Input[str]]
        """
        Optionally override the docker image the Kibana nodes will use. Note that this field will only work for internal users only.
        """
        user_settings_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        user_settings_override_json: NotRequired[pulumi.Input[str]]
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_override_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        user_settings_yaml: NotRequired[pulumi.Input[str]]
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
elif False:
    DeploymentKibanaConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentKibanaConfigArgs:
    def __init__(__self__, *,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] docker_image: Optionally override the docker image the Kibana nodes will use. Note that this field will only work for internal users only.
        :param pulumi.Input[str] user_settings_json: An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_json: An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_override_yaml: An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        :param pulumi.Input[str] user_settings_yaml: An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally override the docker image the Kibana nodes will use. Note that this field will only work for internal users only.
        """
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*yaml' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (This field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*yaml' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user*settings*override*json' is allowed), ie in addition to the documented 'system*settings'. (This field together with 'system*settings' and 'user*settings*' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user*settings*json' is allowed), provided they are on the whitelist ('user*settings*whitelist') and not on the blacklist ('user*settings*blacklist'). (These field together with 'user*settings*override*' and 'system_settings' defines the total set of resource settings)
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


if not MYPY:
    class DeploymentObservabilityArgsDict(TypedDict):
        deployment_id: pulumi.Input[str]
        logs: NotRequired[pulumi.Input[bool]]
        metrics: NotRequired[pulumi.Input[bool]]
        ref_id: NotRequired[pulumi.Input[str]]
elif False:
    DeploymentObservabilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentObservabilityArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str],
                 logs: Optional[pulumi.Input[bool]] = None,
                 metrics: Optional[pulumi.Input[bool]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "deployment_id", deployment_id)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)


if not MYPY:
    class DeploymentTrafficFilterRuleArgsDict(TypedDict):
        azure_endpoint_guid: NotRequired[pulumi.Input[str]]
        """
        Azure endpoint GUID. Only applicable when the ruleset type is set to `azure_private_endpoint`
        """
        azure_endpoint_name: NotRequired[pulumi.Input[str]]
        """
        Azure endpoint name. Only applicable when the ruleset type is set to `azure_private_endpoint`
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description of this individual rule
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Computed rule ID
        """
        source: NotRequired[pulumi.Input[str]]
        """
        Traffic filter source: IP address, CIDR mask, or VPC endpoint ID, **only required** when the type is not `azure_private_endpoint`
        """
elif False:
    DeploymentTrafficFilterRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DeploymentTrafficFilterRuleArgs:
    def __init__(__self__, *,
                 azure_endpoint_guid: Optional[pulumi.Input[str]] = None,
                 azure_endpoint_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] azure_endpoint_guid: Azure endpoint GUID. Only applicable when the ruleset type is set to `azure_private_endpoint`
        :param pulumi.Input[str] azure_endpoint_name: Azure endpoint name. Only applicable when the ruleset type is set to `azure_private_endpoint`
        :param pulumi.Input[str] description: Description of this individual rule
        :param pulumi.Input[str] id: Computed rule ID
        :param pulumi.Input[str] source: Traffic filter source: IP address, CIDR mask, or VPC endpoint ID, **only required** when the type is not `azure_private_endpoint`
        """
        if azure_endpoint_guid is not None:
            pulumi.set(__self__, "azure_endpoint_guid", azure_endpoint_guid)
        if azure_endpoint_name is not None:
            pulumi.set(__self__, "azure_endpoint_name", azure_endpoint_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="azureEndpointGuid")
    def azure_endpoint_guid(self) -> Optional[pulumi.Input[str]]:
        """
        Azure endpoint GUID. Only applicable when the ruleset type is set to `azure_private_endpoint`
        """
        return pulumi.get(self, "azure_endpoint_guid")

    @azure_endpoint_guid.setter
    def azure_endpoint_guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_endpoint_guid", value)

    @property
    @pulumi.getter(name="azureEndpointName")
    def azure_endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        Azure endpoint name. Only applicable when the ruleset type is set to `azure_private_endpoint`
        """
        return pulumi.get(self, "azure_endpoint_name")

    @azure_endpoint_name.setter
    def azure_endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_endpoint_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this individual rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Computed rule ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic filter source: IP address, CIDR mask, or VPC endpoint ID, **only required** when the type is not `azure_private_endpoint`
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


if not MYPY:
    class ElasticsearchProjectCredentialsArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[str]]
        """
        Basic auth password that can be used to access the Elasticsearch API.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        Basic auth username that can be used to access the Elasticsearch API.
        """
elif False:
    ElasticsearchProjectCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ElasticsearchProjectCredentialsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: Basic auth password that can be used to access the Elasticsearch API.
        :param pulumi.Input[str] username: Basic auth username that can be used to access the Elasticsearch API.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Basic auth password that can be used to access the Elasticsearch API.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Basic auth username that can be used to access the Elasticsearch API.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ElasticsearchProjectEndpointsArgsDict(TypedDict):
        elasticsearch: NotRequired[pulumi.Input[str]]
        """
        The endpoint to access elasticsearch.
        """
        kibana: NotRequired[pulumi.Input[str]]
        """
        The endpoint to access kibana.
        """
elif False:
    ElasticsearchProjectEndpointsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ElasticsearchProjectEndpointsArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] elasticsearch: The endpoint to access elasticsearch.
        :param pulumi.Input[str] kibana: The endpoint to access kibana.
        """
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access elasticsearch.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access kibana.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)


if not MYPY:
    class ElasticsearchProjectMetadataArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[str]]
        """
        Date and time when the project was created.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        ID of the user.
        """
        organization_id: NotRequired[pulumi.Input[str]]
        """
        The Organization ID who owns the project.
        """
        suspended_at: NotRequired[pulumi.Input[str]]
        """
        Date and time when the project was suspended.
        """
        suspended_reason: NotRequired[pulumi.Input[str]]
        """
        Reason why the project was suspended.
        """
elif False:
    ElasticsearchProjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ElasticsearchProjectMetadataArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 suspended_at: Optional[pulumi.Input[str]] = None,
                 suspended_reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created_at: Date and time when the project was created.
        :param pulumi.Input[str] created_by: ID of the user.
        :param pulumi.Input[str] organization_id: The Organization ID who owns the project.
        :param pulumi.Input[str] suspended_at: Date and time when the project was suspended.
        :param pulumi.Input[str] suspended_reason: Reason why the project was suspended.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if suspended_at is not None:
            pulumi.set(__self__, "suspended_at", suspended_at)
        if suspended_reason is not None:
            pulumi.set(__self__, "suspended_reason", suspended_reason)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when the project was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the user.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Organization ID who owns the project.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="suspendedAt")
    def suspended_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when the project was suspended.
        """
        return pulumi.get(self, "suspended_at")

    @suspended_at.setter
    def suspended_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_at", value)

    @property
    @pulumi.getter(name="suspendedReason")
    def suspended_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason why the project was suspended.
        """
        return pulumi.get(self, "suspended_reason")

    @suspended_reason.setter
    def suspended_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_reason", value)


if not MYPY:
    class ElasticsearchProjectSearchLakeArgsDict(TypedDict):
        boost_window: NotRequired[pulumi.Input[int]]
        """
        Determines how much data can benefit from faster search. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. The system dynamically adjusts the cache allocated to your project based on how much data you ingest during the period defined by your Search Boost Window.
        """
        search_power: NotRequired[pulumi.Input[int]]
        """
        Controls how fast searches are against your project data. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. You can either increase the performance of searches on cached data by adding replicas, or reduce the quantity of cached data by a static factor to save on costs.
        """
elif False:
    ElasticsearchProjectSearchLakeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ElasticsearchProjectSearchLakeArgs:
    def __init__(__self__, *,
                 boost_window: Optional[pulumi.Input[int]] = None,
                 search_power: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] boost_window: Determines how much data can benefit from faster search. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. The system dynamically adjusts the cache allocated to your project based on how much data you ingest during the period defined by your Search Boost Window.
        :param pulumi.Input[int] search_power: Controls how fast searches are against your project data. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. You can either increase the performance of searches on cached data by adding replicas, or reduce the quantity of cached data by a static factor to save on costs.
        """
        if boost_window is not None:
            pulumi.set(__self__, "boost_window", boost_window)
        if search_power is not None:
            pulumi.set(__self__, "search_power", search_power)

    @property
    @pulumi.getter(name="boostWindow")
    def boost_window(self) -> Optional[pulumi.Input[int]]:
        """
        Determines how much data can benefit from faster search. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. The system dynamically adjusts the cache allocated to your project based on how much data you ingest during the period defined by your Search Boost Window.
        """
        return pulumi.get(self, "boost_window")

    @boost_window.setter
    def boost_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "boost_window", value)

    @property
    @pulumi.getter(name="searchPower")
    def search_power(self) -> Optional[pulumi.Input[int]]:
        """
        Controls how fast searches are against your project data. When ingested, a certain amount of data is loaded into a cache that makes it super fast to query. You can either increase the performance of searches on cached data by adding replicas, or reduce the quantity of cached data by a static factor to save on costs.
        """
        return pulumi.get(self, "search_power")

    @search_power.setter
    def search_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "search_power", value)


if not MYPY:
    class ObservabilityProjectCredentialsArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[str]]
        """
        Basic auth password that can be used to access the Elasticsearch API.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        Basic auth username that can be used to access the Elasticsearch API.
        """
elif False:
    ObservabilityProjectCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ObservabilityProjectCredentialsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: Basic auth password that can be used to access the Elasticsearch API.
        :param pulumi.Input[str] username: Basic auth username that can be used to access the Elasticsearch API.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Basic auth password that can be used to access the Elasticsearch API.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Basic auth username that can be used to access the Elasticsearch API.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ObservabilityProjectEndpointsArgsDict(TypedDict):
        apm: NotRequired[pulumi.Input[str]]
        """
        The endpoint to access apm.
        """
        elasticsearch: NotRequired[pulumi.Input[str]]
        """
        The endpoint to access elasticsearch.
        """
        kibana: NotRequired[pulumi.Input[str]]
        """
        The endpoint to access kibana.
        """
elif False:
    ObservabilityProjectEndpointsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ObservabilityProjectEndpointsArgs:
    def __init__(__self__, *,
                 apm: Optional[pulumi.Input[str]] = None,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] apm: The endpoint to access apm.
        :param pulumi.Input[str] elasticsearch: The endpoint to access elasticsearch.
        :param pulumi.Input[str] kibana: The endpoint to access kibana.
        """
        if apm is not None:
            pulumi.set(__self__, "apm", apm)
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)

    @property
    @pulumi.getter
    def apm(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access apm.
        """
        return pulumi.get(self, "apm")

    @apm.setter
    def apm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apm", value)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access elasticsearch.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access kibana.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)


if not MYPY:
    class ObservabilityProjectMetadataArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[str]]
        """
        Date and time when the project was created.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        ID of the user.
        """
        organization_id: NotRequired[pulumi.Input[str]]
        """
        The Organization ID who owns the project.
        """
        suspended_at: NotRequired[pulumi.Input[str]]
        """
        Date and time when the project was suspended.
        """
        suspended_reason: NotRequired[pulumi.Input[str]]
        """
        Reason why the project was suspended.
        """
elif False:
    ObservabilityProjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ObservabilityProjectMetadataArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 suspended_at: Optional[pulumi.Input[str]] = None,
                 suspended_reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created_at: Date and time when the project was created.
        :param pulumi.Input[str] created_by: ID of the user.
        :param pulumi.Input[str] organization_id: The Organization ID who owns the project.
        :param pulumi.Input[str] suspended_at: Date and time when the project was suspended.
        :param pulumi.Input[str] suspended_reason: Reason why the project was suspended.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if suspended_at is not None:
            pulumi.set(__self__, "suspended_at", suspended_at)
        if suspended_reason is not None:
            pulumi.set(__self__, "suspended_reason", suspended_reason)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when the project was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the user.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Organization ID who owns the project.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="suspendedAt")
    def suspended_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when the project was suspended.
        """
        return pulumi.get(self, "suspended_at")

    @suspended_at.setter
    def suspended_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_at", value)

    @property
    @pulumi.getter(name="suspendedReason")
    def suspended_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason why the project was suspended.
        """
        return pulumi.get(self, "suspended_reason")

    @suspended_reason.setter
    def suspended_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_reason", value)


if not MYPY:
    class OrganizationMembersArgsDict(TypedDict):
        deployment_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersDeploymentRoleArgsDict']]]]
        """
        Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
        """
        email: NotRequired[pulumi.Input[str]]
        """
        Email address of the user.
        """
        invitation_pending: NotRequired[pulumi.Input[bool]]
        """
        Set to true while the user has not yet accepted their invitation to the organization.
        """
        organization_role: NotRequired[pulumi.Input[str]]
        """
        The optional organization role for the member. Can be one of `organization-admin`, `billing-admin`. For more info see: [Organization roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_organization_level_roles)
        """
        project_elasticsearch_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectElasticsearchRoleArgsDict']]]]
        """
        Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
        """
        project_observability_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectObservabilityRoleArgsDict']]]]
        """
        Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
        """
        project_security_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectSecurityRoleArgsDict']]]]
        """
        Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
        """
        user_id: NotRequired[pulumi.Input[str]]
        """
        User ID.
        """
elif False:
    OrganizationMembersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationMembersArgs:
    def __init__(__self__, *,
                 deployment_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersDeploymentRoleArgs']]]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 invitation_pending: Optional[pulumi.Input[bool]] = None,
                 organization_role: Optional[pulumi.Input[str]] = None,
                 project_elasticsearch_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectElasticsearchRoleArgs']]]] = None,
                 project_observability_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectObservabilityRoleArgs']]]] = None,
                 project_security_roles: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectSecurityRoleArgs']]]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMembersDeploymentRoleArgs']]] deployment_roles: Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
        :param pulumi.Input[str] email: Email address of the user.
        :param pulumi.Input[bool] invitation_pending: Set to true while the user has not yet accepted their invitation to the organization.
        :param pulumi.Input[str] organization_role: The optional organization role for the member. Can be one of `organization-admin`, `billing-admin`. For more info see: [Organization roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_organization_level_roles)
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectElasticsearchRoleArgs']]] project_elasticsearch_roles: Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectObservabilityRoleArgs']]] project_observability_roles: Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectSecurityRoleArgs']]] project_security_roles: Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
        :param pulumi.Input[str] user_id: User ID.
        """
        if deployment_roles is not None:
            pulumi.set(__self__, "deployment_roles", deployment_roles)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if invitation_pending is not None:
            pulumi.set(__self__, "invitation_pending", invitation_pending)
        if organization_role is not None:
            pulumi.set(__self__, "organization_role", organization_role)
        if project_elasticsearch_roles is not None:
            pulumi.set(__self__, "project_elasticsearch_roles", project_elasticsearch_roles)
        if project_observability_roles is not None:
            pulumi.set(__self__, "project_observability_roles", project_observability_roles)
        if project_security_roles is not None:
            pulumi.set(__self__, "project_security_roles", project_security_roles)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="deploymentRoles")
    def deployment_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersDeploymentRoleArgs']]]]:
        """
        Grant access to one or more deployments. For more info see: [Deployment instance roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_instance_access_roles).
        """
        return pulumi.get(self, "deployment_roles")

    @deployment_roles.setter
    def deployment_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersDeploymentRoleArgs']]]]):
        pulumi.set(self, "deployment_roles", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="invitationPending")
    def invitation_pending(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true while the user has not yet accepted their invitation to the organization.
        """
        return pulumi.get(self, "invitation_pending")

    @invitation_pending.setter
    def invitation_pending(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invitation_pending", value)

    @property
    @pulumi.getter(name="organizationRole")
    def organization_role(self) -> Optional[pulumi.Input[str]]:
        """
        The optional organization role for the member. Can be one of `organization-admin`, `billing-admin`. For more info see: [Organization roles](https://www.elastic.co/guide/en/cloud/current/ec-user-privileges.html#ec_organization_level_roles)
        """
        return pulumi.get(self, "organization_role")

    @organization_role.setter
    def organization_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_role", value)

    @property
    @pulumi.getter(name="projectElasticsearchRoles")
    def project_elasticsearch_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectElasticsearchRoleArgs']]]]:
        """
        Roles assigned for elasticsearch projects. For more info see: [Serverless elasticsearch roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#es)
        """
        return pulumi.get(self, "project_elasticsearch_roles")

    @project_elasticsearch_roles.setter
    def project_elasticsearch_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectElasticsearchRoleArgs']]]]):
        pulumi.set(self, "project_elasticsearch_roles", value)

    @property
    @pulumi.getter(name="projectObservabilityRoles")
    def project_observability_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectObservabilityRoleArgs']]]]:
        """
        Roles assigned for observability projects. For more info see: [Serverless observability roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#observability)
        """
        return pulumi.get(self, "project_observability_roles")

    @project_observability_roles.setter
    def project_observability_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectObservabilityRoleArgs']]]]):
        pulumi.set(self, "project_observability_roles", value)

    @property
    @pulumi.getter(name="projectSecurityRoles")
    def project_security_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectSecurityRoleArgs']]]]:
        """
        Roles assigned for security projects. For more info see: [Serverless security roles](https://www.elastic.co/docs/current/serverless/general/assign-user-roles#security)
        """
        return pulumi.get(self, "project_security_roles")

    @project_security_roles.setter
    def project_security_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMembersProjectSecurityRoleArgs']]]]):
        pulumi.set(self, "project_security_roles", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


if not MYPY:
    class OrganizationMembersDeploymentRoleArgsDict(TypedDict):
        role: pulumi.Input[str]
        """
        Assigned role. Must be on of `viewer`, `editor` or `admin`.
        """
        all_deployments: NotRequired[pulumi.Input[bool]]
        """
        Role applies to all deployments in the organization.
        """
        application_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
        """
        deployment_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Role applies to deployments listed here.
        """
elif False:
    OrganizationMembersDeploymentRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationMembersDeploymentRoleArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 all_deployments: Optional[pulumi.Input[bool]] = None,
                 application_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deployment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] role: Assigned role. Must be on of `viewer`, `editor` or `admin`.
        :param pulumi.Input[bool] all_deployments: Role applies to all deployments in the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_roles: If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deployment_ids: Role applies to deployments listed here.
        """
        pulumi.set(__self__, "role", role)
        if all_deployments is not None:
            pulumi.set(__self__, "all_deployments", all_deployments)
        if application_roles is not None:
            pulumi.set(__self__, "application_roles", application_roles)
        if deployment_ids is not None:
            pulumi.set(__self__, "deployment_ids", deployment_ids)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Assigned role. Must be on of `viewer`, `editor` or `admin`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="allDeployments")
    def all_deployments(self) -> Optional[pulumi.Input[bool]]:
        """
        Role applies to all deployments in the organization.
        """
        return pulumi.get(self, "all_deployments")

    @all_deployments.setter
    def all_deployments(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_deployments", value)

    @property
    @pulumi.getter(name="applicationRoles")
    def application_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the deployment(s) specified in the role assignment.
        """
        return pulumi.get(self, "application_roles")

    @application_roles.setter
    def application_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_roles", value)

    @property
    @pulumi.getter(name="deploymentIds")
    def deployment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Role applies to deployments listed here.
        """
        return pulumi.get(self, "deployment_ids")

    @deployment_ids.setter
    def deployment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deployment_ids", value)


if not MYPY:
    class OrganizationMembersProjectElasticsearchRoleArgsDict(TypedDict):
        role: pulumi.Input[str]
        """
        Assigned role. (Allowed values: `admin`, `developer`, `viewer`)
        """
        all_projects: NotRequired[pulumi.Input[bool]]
        """
        Role applies to all projects in the organization.
        """
        application_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        """
        project_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Role applies to projects listed here.
        """
elif False:
    OrganizationMembersProjectElasticsearchRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationMembersProjectElasticsearchRoleArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 all_projects: Optional[pulumi.Input[bool]] = None,
                 application_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] role: Assigned role. (Allowed values: `admin`, `developer`, `viewer`)
        :param pulumi.Input[bool] all_projects: Role applies to all projects in the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_roles: If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] project_ids: Role applies to projects listed here.
        """
        pulumi.set(__self__, "role", role)
        if all_projects is not None:
            pulumi.set(__self__, "all_projects", all_projects)
        if application_roles is not None:
            pulumi.set(__self__, "application_roles", application_roles)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Assigned role. (Allowed values: `admin`, `developer`, `viewer`)
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> Optional[pulumi.Input[bool]]:
        """
        Role applies to all projects in the organization.
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="applicationRoles")
    def application_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        """
        return pulumi.get(self, "application_roles")

    @application_roles.setter
    def application_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_roles", value)

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Role applies to projects listed here.
        """
        return pulumi.get(self, "project_ids")

    @project_ids.setter
    def project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ids", value)


if not MYPY:
    class OrganizationMembersProjectObservabilityRoleArgsDict(TypedDict):
        role: pulumi.Input[str]
        """
        Assigned role. (Allowed values: `admin`, `editor`, `viewer`)
        """
        all_projects: NotRequired[pulumi.Input[bool]]
        """
        Role applies to all projects in the organization.
        """
        application_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        """
        project_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Role applies to projects listed here.
        """
elif False:
    OrganizationMembersProjectObservabilityRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationMembersProjectObservabilityRoleArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 all_projects: Optional[pulumi.Input[bool]] = None,
                 application_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] role: Assigned role. (Allowed values: `admin`, `editor`, `viewer`)
        :param pulumi.Input[bool] all_projects: Role applies to all projects in the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_roles: If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] project_ids: Role applies to projects listed here.
        """
        pulumi.set(__self__, "role", role)
        if all_projects is not None:
            pulumi.set(__self__, "all_projects", all_projects)
        if application_roles is not None:
            pulumi.set(__self__, "application_roles", application_roles)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Assigned role. (Allowed values: `admin`, `editor`, `viewer`)
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> Optional[pulumi.Input[bool]]:
        """
        Role applies to all projects in the organization.
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="applicationRoles")
    def application_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        """
        return pulumi.get(self, "application_roles")

    @application_roles.setter
    def application_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_roles", value)

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Role applies to projects listed here.
        """
        return pulumi.get(self, "project_ids")

    @project_ids.setter
    def project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ids", value)


if not MYPY:
    class OrganizationMembersProjectSecurityRoleArgsDict(TypedDict):
        role: pulumi.Input[str]
        """
        Assigned role. (Allowed values: `admin`, `editor`, `viewer`, `t1-analyst`, `t2-analyst`, `t3-analyst`, `threat-intel-analyst`, `rule-author`, `soc-manager`, `endpoint-operations-analyst`, `platform-engineer`, `detections-admin`, `endpoint-policy-manager`)
        """
        all_projects: NotRequired[pulumi.Input[bool]]
        """
        Role applies to all projects in the organization.
        """
        application_roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        """
        project_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Role applies to projects listed here.
        """
elif False:
    OrganizationMembersProjectSecurityRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationMembersProjectSecurityRoleArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 all_projects: Optional[pulumi.Input[bool]] = None,
                 application_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] role: Assigned role. (Allowed values: `admin`, `editor`, `viewer`, `t1-analyst`, `t2-analyst`, `t3-analyst`, `threat-intel-analyst`, `rule-author`, `soc-manager`, `endpoint-operations-analyst`, `platform-engineer`, `detections-admin`, `endpoint-policy-manager`)
        :param pulumi.Input[bool] all_projects: Role applies to all projects in the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_roles: If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] project_ids: Role applies to projects listed here.
        """
        pulumi.set(__self__, "role", role)
        if all_projects is not None:
            pulumi.set(__self__, "all_projects", all_projects)
        if application_roles is not None:
            pulumi.set(__self__, "application_roles", application_roles)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Assigned role. (Allowed values: `admin`, `editor`, `viewer`, `t1-analyst`, `t2-analyst`, `t3-analyst`, `threat-intel-analyst`, `rule-author`, `soc-manager`, `endpoint-operations-analyst`, `platform-engineer`, `detections-admin`, `endpoint-policy-manager`)
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="allProjects")
    def all_projects(self) -> Optional[pulumi.Input[bool]]:
        """
        Role applies to all projects in the organization.
        """
        return pulumi.get(self, "all_projects")

    @all_projects.setter
    def all_projects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_projects", value)

    @property
    @pulumi.getter(name="applicationRoles")
    def application_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If provided, the user assigned this role assignment will be granted this application role when signing in to the project(s) specified in the role assignment.
        """
        return pulumi.get(self, "application_roles")

    @application_roles.setter
    def application_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_roles", value)

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Role applies to projects listed here.
        """
        return pulumi.get(self, "project_ids")

    @project_ids.setter
    def project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ids", value)


if not MYPY:
    class SecurityProjectCredentialsArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[str]]
        """
        Basic auth password that can be used to access the Elasticsearch API.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        Basic auth username that can be used to access the Elasticsearch API.
        """
elif False:
    SecurityProjectCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProjectCredentialsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: Basic auth password that can be used to access the Elasticsearch API.
        :param pulumi.Input[str] username: Basic auth username that can be used to access the Elasticsearch API.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Basic auth password that can be used to access the Elasticsearch API.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Basic auth username that can be used to access the Elasticsearch API.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class SecurityProjectEndpointsArgsDict(TypedDict):
        elasticsearch: NotRequired[pulumi.Input[str]]
        """
        The endpoint to access elasticsearch.
        """
        kibana: NotRequired[pulumi.Input[str]]
        """
        The endpoint to access kibana.
        """
elif False:
    SecurityProjectEndpointsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProjectEndpointsArgs:
    def __init__(__self__, *,
                 elasticsearch: Optional[pulumi.Input[str]] = None,
                 kibana: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] elasticsearch: The endpoint to access elasticsearch.
        :param pulumi.Input[str] kibana: The endpoint to access kibana.
        """
        if elasticsearch is not None:
            pulumi.set(__self__, "elasticsearch", elasticsearch)
        if kibana is not None:
            pulumi.set(__self__, "kibana", kibana)

    @property
    @pulumi.getter
    def elasticsearch(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access elasticsearch.
        """
        return pulumi.get(self, "elasticsearch")

    @elasticsearch.setter
    def elasticsearch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch", value)

    @property
    @pulumi.getter
    def kibana(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint to access kibana.
        """
        return pulumi.get(self, "kibana")

    @kibana.setter
    def kibana(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana", value)


if not MYPY:
    class SecurityProjectMetadataArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[str]]
        """
        Date and time when the project was created.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        ID of the user.
        """
        organization_id: NotRequired[pulumi.Input[str]]
        """
        The Organization ID who owns the project.
        """
        suspended_at: NotRequired[pulumi.Input[str]]
        """
        Date and time when the project was suspended.
        """
        suspended_reason: NotRequired[pulumi.Input[str]]
        """
        Reason why the project was suspended.
        """
elif False:
    SecurityProjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProjectMetadataArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 suspended_at: Optional[pulumi.Input[str]] = None,
                 suspended_reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created_at: Date and time when the project was created.
        :param pulumi.Input[str] created_by: ID of the user.
        :param pulumi.Input[str] organization_id: The Organization ID who owns the project.
        :param pulumi.Input[str] suspended_at: Date and time when the project was suspended.
        :param pulumi.Input[str] suspended_reason: Reason why the project was suspended.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if suspended_at is not None:
            pulumi.set(__self__, "suspended_at", suspended_at)
        if suspended_reason is not None:
            pulumi.set(__self__, "suspended_reason", suspended_reason)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when the project was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the user.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Organization ID who owns the project.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="suspendedAt")
    def suspended_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when the project was suspended.
        """
        return pulumi.get(self, "suspended_at")

    @suspended_at.setter
    def suspended_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_at", value)

    @property
    @pulumi.getter(name="suspendedReason")
    def suspended_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason why the project was suspended.
        """
        return pulumi.get(self, "suspended_reason")

    @suspended_reason.setter
    def suspended_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspended_reason", value)


if not MYPY:
    class SecurityProjectProductTypeArgsDict(TypedDict):
        product_line: pulumi.Input[str]
        """
        The identifier of the Security Solution product line.
        """
        product_tier: pulumi.Input[str]
        """
        The identifier of the Security Solution product tier.
        """
elif False:
    SecurityProjectProductTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProjectProductTypeArgs:
    def __init__(__self__, *,
                 product_line: pulumi.Input[str],
                 product_tier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] product_line: The identifier of the Security Solution product line.
        :param pulumi.Input[str] product_tier: The identifier of the Security Solution product tier.
        """
        pulumi.set(__self__, "product_line", product_line)
        pulumi.set(__self__, "product_tier", product_tier)

    @property
    @pulumi.getter(name="productLine")
    def product_line(self) -> pulumi.Input[str]:
        """
        The identifier of the Security Solution product line.
        """
        return pulumi.get(self, "product_line")

    @product_line.setter
    def product_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_line", value)

    @property
    @pulumi.getter(name="productTier")
    def product_tier(self) -> pulumi.Input[str]:
        """
        The identifier of the Security Solution product tier.
        """
        return pulumi.get(self, "product_tier")

    @product_tier.setter
    def product_tier(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_tier", value)


if not MYPY:
    class SnapshotRepositoryGenericArgsDict(TypedDict):
        settings: pulumi.Input[str]
        """
        An arbitrary JSON object containing the repository settings.
        """
        type: pulumi.Input[str]
        """
        Repository type
        """
elif False:
    SnapshotRepositoryGenericArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SnapshotRepositoryGenericArgs:
    def __init__(__self__, *,
                 settings: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] settings: An arbitrary JSON object containing the repository settings.
        :param pulumi.Input[str] type: Repository type
        """
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Input[str]:
        """
        An arbitrary JSON object containing the repository settings.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: pulumi.Input[str]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Repository type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class SnapshotRepositoryS3ArgsDict(TypedDict):
        bucket: pulumi.Input[str]
        """
        Name of the S3 bucket to use for snapshots.
        """
        access_key: NotRequired[pulumi.Input[str]]
        """
        An S3 access key. If set, the secret_key setting must also be specified. If unset, the client will use the instance or container role instead.
        """
        endpoint: NotRequired[pulumi.Input[str]]
        """
        The S3 service endpoint to connect to. This defaults to s3.amazonaws.com but the AWS documentation lists alternative S3 endpoints. If you are using an S3-compatible service then you should set this to the service’s endpoint.
        """
        path_style_access: NotRequired[pulumi.Input[bool]]
        """
        Whether to force the use of the path style access pattern. If true, the path style access pattern will be used. If false, the access pattern will be automatically determined by the AWS Java SDK (See AWS documentation for details). Defaults to false.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Allows specifying the signing region to use. Specifying this setting manually should not be necessary for most use cases. Generally, the SDK will correctly guess the signing region to use. It should be considered an expert level setting to support S3-compatible APIs that require v4 signatures and use a region other than the default us-east-1. Defaults to empty string which means that the SDK will try to automatically determine the correct signing region.
        """
        secret_key: NotRequired[pulumi.Input[str]]
        """
        An S3 secret key. If set, the access_key setting must also be specified.
        """
        server_side_encryption: NotRequired[pulumi.Input[bool]]
        """
        When set to true files are encrypted on server side using AES256 algorithm. Defaults to false.
        """
elif False:
    SnapshotRepositoryS3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SnapshotRepositoryS3Args:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 path_style_access: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket: Name of the S3 bucket to use for snapshots.
        :param pulumi.Input[str] access_key: An S3 access key. If set, the secret_key setting must also be specified. If unset, the client will use the instance or container role instead.
        :param pulumi.Input[str] endpoint: The S3 service endpoint to connect to. This defaults to s3.amazonaws.com but the AWS documentation lists alternative S3 endpoints. If you are using an S3-compatible service then you should set this to the service’s endpoint.
        :param pulumi.Input[bool] path_style_access: Whether to force the use of the path style access pattern. If true, the path style access pattern will be used. If false, the access pattern will be automatically determined by the AWS Java SDK (See AWS documentation for details). Defaults to false.
        :param pulumi.Input[str] region: Allows specifying the signing region to use. Specifying this setting manually should not be necessary for most use cases. Generally, the SDK will correctly guess the signing region to use. It should be considered an expert level setting to support S3-compatible APIs that require v4 signatures and use a region other than the default us-east-1. Defaults to empty string which means that the SDK will try to automatically determine the correct signing region.
        :param pulumi.Input[str] secret_key: An S3 secret key. If set, the access_key setting must also be specified.
        :param pulumi.Input[bool] server_side_encryption: When set to true files are encrypted on server side using AES256 algorithm. Defaults to false.
        """
        pulumi.set(__self__, "bucket", bucket)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if path_style_access is not None:
            pulumi.set(__self__, "path_style_access", path_style_access)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if server_side_encryption is not None:
            pulumi.set(__self__, "server_side_encryption", server_side_encryption)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Name of the S3 bucket to use for snapshots.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        An S3 access key. If set, the secret_key setting must also be specified. If unset, the client will use the instance or container role instead.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The S3 service endpoint to connect to. This defaults to s3.amazonaws.com but the AWS documentation lists alternative S3 endpoints. If you are using an S3-compatible service then you should set this to the service’s endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="pathStyleAccess")
    def path_style_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force the use of the path style access pattern. If true, the path style access pattern will be used. If false, the access pattern will be automatically determined by the AWS Java SDK (See AWS documentation for details). Defaults to false.
        """
        return pulumi.get(self, "path_style_access")

    @path_style_access.setter
    def path_style_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "path_style_access", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Allows specifying the signing region to use. Specifying this setting manually should not be necessary for most use cases. Generally, the SDK will correctly guess the signing region to use. It should be considered an expert level setting to support S3-compatible APIs that require v4 signatures and use a region other than the default us-east-1. Defaults to empty string which means that the SDK will try to automatically determine the correct signing region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        An S3 secret key. If set, the access_key setting must also be specified.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="serverSideEncryption")
    def server_side_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true files are encrypted on server side using AES256 algorithm. Defaults to false.
        """
        return pulumi.get(self, "server_side_encryption")

    @server_side_encryption.setter
    def server_side_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_side_encryption", value)


if not MYPY:
    class GetDeploymentsApmArgsDict(TypedDict):
        healthy: NotRequired[str]
        """
        Overall health status of the resource instances.
        """
        status: NotRequired[str]
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        version: NotRequired[str]
        """
        Elastic stack version.
        """
elif False:
    GetDeploymentsApmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeploymentsApmArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the resource instances.
        :param str status: Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        :param str version: Elastic stack version.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the resource instances.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Elastic stack version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class GetDeploymentsElasticsearchArgsDict(TypedDict):
        healthy: NotRequired[str]
        """
        Overall health status of the resource instances.
        """
        status: NotRequired[str]
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        version: NotRequired[str]
        """
        Elastic stack version.
        """
elif False:
    GetDeploymentsElasticsearchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeploymentsElasticsearchArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the resource instances.
        :param str status: Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        :param str version: Elastic stack version.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the resource instances.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Elastic stack version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class GetDeploymentsEnterpriseSearchArgsDict(TypedDict):
        healthy: NotRequired[str]
        """
        Overall health status of the resource instances.
        """
        status: NotRequired[str]
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        version: NotRequired[str]
        """
        Elastic stack version.
        """
elif False:
    GetDeploymentsEnterpriseSearchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeploymentsEnterpriseSearchArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the resource instances.
        :param str status: Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        :param str version: Elastic stack version.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the resource instances.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Elastic stack version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class GetDeploymentsIntegrationsServerArgsDict(TypedDict):
        healthy: NotRequired[str]
        """
        Overall health status of the resource instances.
        """
        status: NotRequired[str]
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        version: NotRequired[str]
        """
        Elastic stack version.
        """
elif False:
    GetDeploymentsIntegrationsServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeploymentsIntegrationsServerArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the resource instances.
        :param str status: Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        :param str version: Elastic stack version.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the resource instances.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Elastic stack version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class GetDeploymentsKibanaArgsDict(TypedDict):
        healthy: NotRequired[str]
        """
        Overall health status of the resource instances.
        """
        status: NotRequired[str]
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        version: NotRequired[str]
        """
        Elastic stack version.
        """
elif False:
    GetDeploymentsKibanaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeploymentsKibanaArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the resource instances.
        :param str status: Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        :param str version: Elastic stack version.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the resource instances.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Resource kind status. Can be one of `initializing`, `stopping`, `stopped`, `rebooting`, `restarting`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Elastic stack version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


