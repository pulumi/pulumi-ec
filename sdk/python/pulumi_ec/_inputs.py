# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'DeploymentApmArgs',
    'DeploymentApmConfigArgs',
    'DeploymentApmTopologyArgs',
    'DeploymentElasticsearchArgs',
    'DeploymentElasticsearchConfigArgs',
    'DeploymentElasticsearchExtensionArgs',
    'DeploymentElasticsearchRemoteClusterArgs',
    'DeploymentElasticsearchSnapshotSourceArgs',
    'DeploymentElasticsearchTopologyArgs',
    'DeploymentElasticsearchTopologyAutoscalingArgs',
    'DeploymentElasticsearchTopologyConfigArgs',
    'DeploymentElasticsearchTrustAccountArgs',
    'DeploymentElasticsearchTrustExternalArgs',
    'DeploymentEnterpriseSearchArgs',
    'DeploymentEnterpriseSearchConfigArgs',
    'DeploymentEnterpriseSearchTopologyArgs',
    'DeploymentIntegrationsServerArgs',
    'DeploymentIntegrationsServerConfigArgs',
    'DeploymentIntegrationsServerTopologyArgs',
    'DeploymentKibanaArgs',
    'DeploymentKibanaConfigArgs',
    'DeploymentKibanaTopologyArgs',
    'DeploymentObservabilityArgs',
    'DeploymentTrafficFilterRuleArgs',
    'GetDeploymentsApmArgs',
    'GetDeploymentsElasticsearchArgs',
    'GetDeploymentsEnterpriseSearchArgs',
    'GetDeploymentsIntegrationsServerArgs',
    'GetDeploymentsKibanaArgs',
]

@pulumi.input_type
class DeploymentApmArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentApmConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentApmTopologyArgs']]]] = None):
        """
        :param pulumi.Input['DeploymentApmConfigArgs'] config: APM settings applied to all topologies unless overridden in the `topology` element.
        :param pulumi.Input[str] elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param pulumi.Input[str] ref_id: Can be set on the APM resource. The default value `main-apm` is recommended.
        :param pulumi.Input[str] region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentApmTopologyArgs']]] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentApmConfigArgs']]:
        """
        APM settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentApmConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Can be set on the APM resource. The default value `main-apm` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentApmTopologyArgs']]]]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentApmTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class DeploymentApmConfigArgs:
    def __init__(__self__, *,
                 debug_enabled: Optional[pulumi.Input[bool]] = None,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] debug_enabled: Enable debug mode for the component. Defaults to `false`.
        :param pulumi.Input[str] user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable debug mode for the component. Defaults to `false`.
        """
        return pulumi.get(self, "debug_enabled")

    @debug_enabled.setter
    def debug_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug_enabled", value)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class DeploymentApmTopologyArgs:
    def __init__(__self__, *,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param pulumi.Input[str] size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param pulumi.Input[str] size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param pulumi.Input[int] zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class DeploymentElasticsearchArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[str]] = None,
                 cloud_id: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input['DeploymentElasticsearchConfigArgs']] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 remote_clusters: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 snapshot_source: Optional[pulumi.Input['DeploymentElasticsearchSnapshotSourceArgs']] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyArgs']]]] = None,
                 trust_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]]] = None,
                 trust_externals: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]]] = None):
        """
        :param pulumi.Input[str] autoscale: Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are `"true"` or `"false"`.
        :param pulumi.Input['DeploymentElasticsearchConfigArgs'] config: Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]] extensions: Custom Elasticsearch bundles or plugins. Can be set multiple times.
        :param pulumi.Input[str] ref_id: Remote Elasticsearch `ref_id`. The default value `main-elasticsearch` is recommended.
        :param pulumi.Input[str] region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]] remote_clusters: Elasticsearch remote clusters to configure for the Elasticsearch resource. Can be set multiple times.
        :param pulumi.Input['DeploymentElasticsearchSnapshotSourceArgs'] snapshot_source: Restores data from a snapshot of another deployment.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyArgs']]] topologies: Can be set multiple times to compose complex topologies.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]] trust_accounts: The trust relationships with other ESS accounts.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]] trust_externals: The trust relationship with external entities (remote environments, remote accounts...).
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_clusters is not None:
            pulumi.set(__self__, "remote_clusters", remote_clusters)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if snapshot_source is not None:
            pulumi.set(__self__, "snapshot_source", snapshot_source)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)
        if trust_accounts is not None:
            pulumi.set(__self__, "trust_accounts", trust_accounts)
        if trust_externals is not None:
            pulumi.set(__self__, "trust_externals", trust_externals)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are `"true"` or `"false"`.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentElasticsearchConfigArgs']]:
        """
        Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentElasticsearchConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]]]:
        """
        Custom Elasticsearch bundles or plugins. Can be set multiple times.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchExtensionArgs']]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Remote Elasticsearch `ref_id`. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="remoteClusters")
    def remote_clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]]]:
        """
        Elasticsearch remote clusters to configure for the Elasticsearch resource. Can be set multiple times.
        """
        return pulumi.get(self, "remote_clusters")

    @remote_clusters.setter
    def remote_clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchRemoteClusterArgs']]]]):
        pulumi.set(self, "remote_clusters", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="snapshotSource")
    def snapshot_source(self) -> Optional[pulumi.Input['DeploymentElasticsearchSnapshotSourceArgs']]:
        """
        Restores data from a snapshot of another deployment.
        """
        return pulumi.get(self, "snapshot_source")

    @snapshot_source.setter
    def snapshot_source(self, value: Optional[pulumi.Input['DeploymentElasticsearchSnapshotSourceArgs']]):
        pulumi.set(self, "snapshot_source", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyArgs']]]]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)

    @property
    @pulumi.getter(name="trustAccounts")
    def trust_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]]]:
        """
        The trust relationships with other ESS accounts.
        """
        return pulumi.get(self, "trust_accounts")

    @trust_accounts.setter
    def trust_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustAccountArgs']]]]):
        pulumi.set(self, "trust_accounts", value)

    @property
    @pulumi.getter(name="trustExternals")
    def trust_externals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]]]:
        """
        The trust relationship with external entities (remote environments, remote accounts...).
        """
        return pulumi.get(self, "trust_externals")

    @trust_externals.setter
    def trust_externals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTrustExternalArgs']]]]):
        pulumi.set(self, "trust_externals", value)


@pulumi.input_type
class DeploymentElasticsearchConfigArgs:
    def __init__(__self__, *,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] plugins: List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        :param pulumi.Input[str] user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class DeploymentElasticsearchExtensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 url: pulumi.Input[str],
                 version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of the deployment.
        :param pulumi.Input[str] type: Extension type, only `bundle` or `plugin` are supported.
        :param pulumi.Input[str] url: Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
        :param pulumi.Input[str] version: Elastic Stack version to use for all the deployment resources.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the deployment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Extension type, only `bundle` or `plugin` are supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Elastic Stack version to use for all the deployment resources.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentElasticsearchRemoteClusterArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[str],
                 deployment_id: pulumi.Input[str],
                 ref_id: Optional[pulumi.Input[str]] = None,
                 skip_unavailable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] alias: Deployment alias, affects the format of the resource URLs.
        :param pulumi.Input[str] deployment_id: Remote deployment ID.
        :param pulumi.Input[str] ref_id: Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        :param pulumi.Input[bool] skip_unavailable: If true, skip the cluster during search when disconnected. Defaults to `false`.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "deployment_id", deployment_id)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if skip_unavailable is not None:
            pulumi.set(__self__, "skip_unavailable", skip_unavailable)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Input[str]:
        """
        Deployment alias, affects the format of the resource URLs.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[str]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        """
        Remote deployment ID.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter(name="skipUnavailable")
    def skip_unavailable(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, skip the cluster during search when disconnected. Defaults to `false`.
        """
        return pulumi.get(self, "skip_unavailable")

    @skip_unavailable.setter
    def skip_unavailable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_unavailable", value)


@pulumi.input_type
class DeploymentElasticsearchSnapshotSourceArgs:
    def __init__(__self__, *,
                 source_elasticsearch_cluster_id: pulumi.Input[str],
                 snapshot_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_elasticsearch_cluster_id: ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
        :param pulumi.Input[str] snapshot_name: Name of the snapshot to restore. Use `__latest_success__` to get the most recent successful snapshot (Defaults to `__latest_success__`).
        """
        pulumi.set(__self__, "source_elasticsearch_cluster_id", source_elasticsearch_cluster_id)
        if snapshot_name is not None:
            pulumi.set(__self__, "snapshot_name", snapshot_name)

    @property
    @pulumi.getter(name="sourceElasticsearchClusterId")
    def source_elasticsearch_cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
        """
        return pulumi.get(self, "source_elasticsearch_cluster_id")

    @source_elasticsearch_cluster_id.setter
    def source_elasticsearch_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_elasticsearch_cluster_id", value)

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the snapshot to restore. Use `__latest_success__` to get the most recent successful snapshot (Defaults to `__latest_success__`).
        """
        return pulumi.get(self, "snapshot_name")

    @snapshot_name.setter
    def snapshot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_name", value)


@pulumi.input_type
class DeploymentElasticsearchTopologyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 autoscaling: Optional[pulumi.Input['DeploymentElasticsearchTopologyAutoscalingArgs']] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyConfigArgs']]]] = None,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 node_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_type_data: Optional[pulumi.Input[str]] = None,
                 node_type_ingest: Optional[pulumi.Input[str]] = None,
                 node_type_master: Optional[pulumi.Input[str]] = None,
                 node_type_ml: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: Unique topology identifier. It generally refers to an Elasticsearch data tier, such as `hot_content`, `warm`, `cold`, `coordinating`, `frozen`, `ml` or `master`.
        :param pulumi.Input['DeploymentElasticsearchTopologyAutoscalingArgs'] autoscaling: Autoscaling policy defining the maximum and / or minimum total size for this topology element. For more information refer to the `autoscaling` block.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyConfigArgs']]] configs: Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        :param pulumi.Input[str] instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param pulumi.Input[str] node_type_data: The node type for the Elasticsearch cluster (data node).
        :param pulumi.Input[str] node_type_ingest: The node type for the Elasticsearch cluster (ingest node).
        :param pulumi.Input[str] node_type_master: The node type for the Elasticsearch cluster (master node).
        :param pulumi.Input[str] node_type_ml: The node type for the Elasticsearch cluster (machine learning node).
        :param pulumi.Input[str] size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param pulumi.Input[str] size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param pulumi.Input[int] zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        pulumi.set(__self__, "id", id)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Unique topology identifier. It generally refers to an Elasticsearch data tier, such as `hot_content`, `warm`, `cold`, `coordinating`, `frozen`, `ml` or `master`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['DeploymentElasticsearchTopologyAutoscalingArgs']]:
        """
        Autoscaling policy defining the maximum and / or minimum total size for this topology element. For more information refer to the `autoscaling` block.
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['DeploymentElasticsearchTopologyAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyConfigArgs']]]]:
        """
        Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentElasticsearchTopologyConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "node_roles")

    @node_roles.setter
    def node_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_roles", value)

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch cluster (data node).
        """
        return pulumi.get(self, "node_type_data")

    @node_type_data.setter
    def node_type_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_data", value)

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch cluster (ingest node).
        """
        return pulumi.get(self, "node_type_ingest")

    @node_type_ingest.setter
    def node_type_ingest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ingest", value)

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch cluster (master node).
        """
        return pulumi.get(self, "node_type_master")

    @node_type_master.setter
    def node_type_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_master", value)

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[pulumi.Input[str]]:
        """
        The node type for the Elasticsearch cluster (machine learning node).
        """
        return pulumi.get(self, "node_type_ml")

    @node_type_ml.setter
    def node_type_ml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type_ml", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class DeploymentElasticsearchTopologyAutoscalingArgs:
    def __init__(__self__, *,
                 max_size: Optional[pulumi.Input[str]] = None,
                 max_size_resource: Optional[pulumi.Input[str]] = None,
                 min_size: Optional[pulumi.Input[str]] = None,
                 min_size_resource: Optional[pulumi.Input[str]] = None,
                 policy_override_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] max_size: Defines the maximum size the deployment will scale up to. When set, scaling up will be enabled. All tiers should support this option.
        :param pulumi.Input[str] max_size_resource: Defines the resource type the scale up will use (Defaults to `"memory"`).
        :param pulumi.Input[str] min_size: Defines the minimum size the deployment will scale down to. When set, scale down will be enabled, please note that not all the tiers support this option.
        :param pulumi.Input[str] min_size_resource: Defines the resource type the scale down will use (Defaults to `"memory"`).
        """
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the maximum size the deployment will scale up to. When set, scaling up will be enabled. All tiers should support this option.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the resource type the scale up will use (Defaults to `"memory"`).
        """
        return pulumi.get(self, "max_size_resource")

    @max_size_resource.setter
    def max_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_size_resource", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the minimum size the deployment will scale down to. When set, scale down will be enabled, please note that not all the tiers support this option.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the resource type the scale down will use (Defaults to `"memory"`).
        """
        return pulumi.get(self, "min_size_resource")

    @min_size_resource.setter
    def min_size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_size_resource", value)

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_override_json")

    @policy_override_json.setter
    def policy_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_override_json", value)


@pulumi.input_type
class DeploymentElasticsearchTopologyConfigArgs:
    def __init__(__self__, *,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] plugins: List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        :param pulumi.Input[str] user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class DeploymentElasticsearchTrustAccountArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 trust_all: pulumi.Input[bool],
                 trust_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] account_id: The account identifier to establish the new trust with.
        :param pulumi.Input[bool] trust_all: If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trust_allowlists: The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "trust_all", trust_all)
        if trust_allowlists is not None:
            pulumi.set(__self__, "trust_allowlists", trust_allowlists)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The account identifier to establish the new trust with.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="trustAll")
    def trust_all(self) -> pulumi.Input[bool]:
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        return pulumi.get(self, "trust_all")

    @trust_all.setter
    def trust_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "trust_all", value)

    @property
    @pulumi.getter(name="trustAllowlists")
    def trust_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        return pulumi.get(self, "trust_allowlists")

    @trust_allowlists.setter
    def trust_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trust_allowlists", value)


@pulumi.input_type
class DeploymentElasticsearchTrustExternalArgs:
    def __init__(__self__, *,
                 relationship_id: pulumi.Input[str],
                 trust_all: pulumi.Input[bool],
                 trust_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] relationship_id: Identifier of the the trust relationship with external entities (remote environments, remote accounts...).
        :param pulumi.Input[bool] trust_all: If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trust_allowlists: The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        pulumi.set(__self__, "relationship_id", relationship_id)
        pulumi.set(__self__, "trust_all", trust_all)
        if trust_allowlists is not None:
            pulumi.set(__self__, "trust_allowlists", trust_allowlists)

    @property
    @pulumi.getter(name="relationshipId")
    def relationship_id(self) -> pulumi.Input[str]:
        """
        Identifier of the the trust relationship with external entities (remote environments, remote accounts...).
        """
        return pulumi.get(self, "relationship_id")

    @relationship_id.setter
    def relationship_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "relationship_id", value)

    @property
    @pulumi.getter(name="trustAll")
    def trust_all(self) -> pulumi.Input[bool]:
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        return pulumi.get(self, "trust_all")

    @trust_all.setter
    def trust_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "trust_all", value)

    @property
    @pulumi.getter(name="trustAllowlists")
    def trust_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        return pulumi.get(self, "trust_allowlists")

    @trust_allowlists.setter
    def trust_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trust_allowlists", value)


@pulumi.input_type
class DeploymentEnterpriseSearchArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentEnterpriseSearchConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnterpriseSearchTopologyArgs']]]] = None):
        """
        :param pulumi.Input['DeploymentEnterpriseSearchConfigArgs'] config: Enterprise Search settings applied to all topologies unless overridden in the `topology` element.
        :param pulumi.Input[str] elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param pulumi.Input[str] ref_id: Can be set on the Enterprise Search resource. The default value `main-enterprise_search` is recommended.
        :param pulumi.Input[str] region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentEnterpriseSearchTopologyArgs']]] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentEnterpriseSearchConfigArgs']]:
        """
        Enterprise Search settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentEnterpriseSearchConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Can be set on the Enterprise Search resource. The default value `main-enterprise_search` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnterpriseSearchTopologyArgs']]]]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentEnterpriseSearchTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class DeploymentEnterpriseSearchConfigArgs:
    def __init__(__self__, *,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class DeploymentEnterpriseSearchTopologyArgs:
    def __init__(__self__, *,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 node_type_appserver: Optional[pulumi.Input[bool]] = None,
                 node_type_connector: Optional[pulumi.Input[bool]] = None,
                 node_type_worker: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param pulumi.Input[str] size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param pulumi.Input[str] size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param pulumi.Input[int] zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_type_appserver is not None:
            pulumi.set(__self__, "node_type_appserver", node_type_appserver)
        if node_type_connector is not None:
            pulumi.set(__self__, "node_type_connector", node_type_connector)
        if node_type_worker is not None:
            pulumi.set(__self__, "node_type_worker", node_type_worker)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter(name="nodeTypeAppserver")
    def node_type_appserver(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_appserver")

    @node_type_appserver.setter
    def node_type_appserver(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_appserver", value)

    @property
    @pulumi.getter(name="nodeTypeConnector")
    def node_type_connector(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_connector")

    @node_type_connector.setter
    def node_type_connector(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_connector", value)

    @property
    @pulumi.getter(name="nodeTypeWorker")
    def node_type_worker(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_type_worker")

    @node_type_worker.setter
    def node_type_worker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_type_worker", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class DeploymentIntegrationsServerArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentIntegrationsServerConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentIntegrationsServerTopologyArgs']]]] = None):
        """
        :param pulumi.Input['DeploymentIntegrationsServerConfigArgs'] config: Integrations Server settings applied to all topologies unless overridden in the `topology` element.
        :param pulumi.Input[str] elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param pulumi.Input[str] ref_id: Can be set on the Integrations Server resource. The default value `main-integrations_server` is recommended.
        :param pulumi.Input[str] region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentIntegrationsServerTopologyArgs']]] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentIntegrationsServerConfigArgs']]:
        """
        Integrations Server settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentIntegrationsServerConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Can be set on the Integrations Server resource. The default value `main-integrations_server` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentIntegrationsServerTopologyArgs']]]]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentIntegrationsServerTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class DeploymentIntegrationsServerConfigArgs:
    def __init__(__self__, *,
                 debug_enabled: Optional[pulumi.Input[bool]] = None,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] debug_enabled: Enable debug mode for the component. Defaults to `false`.
        :param pulumi.Input[str] user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable debug mode for the component. Defaults to `false`.
        """
        return pulumi.get(self, "debug_enabled")

    @debug_enabled.setter
    def debug_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug_enabled", value)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class DeploymentIntegrationsServerTopologyArgs:
    def __init__(__self__, *,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param pulumi.Input[str] size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param pulumi.Input[str] size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param pulumi.Input[int] zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class DeploymentKibanaArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DeploymentKibanaConfigArgs']] = None,
                 elasticsearch_cluster_ref_id: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 https_endpoint: Optional[pulumi.Input[str]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 topologies: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentKibanaTopologyArgs']]]] = None):
        """
        :param pulumi.Input['DeploymentKibanaConfigArgs'] config: Kibana settings applied to all topologies unless overridden in the `topology` element.
        :param pulumi.Input[str] elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param pulumi.Input[str] ref_id: Can be set on the Kibana resource. The default value `main-kibana` is recommended.
        :param pulumi.Input[str] region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentKibanaTopologyArgs']]] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DeploymentKibanaConfigArgs']]:
        """
        Kibana settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DeploymentKibanaConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @elasticsearch_cluster_ref_id.setter
    def elasticsearch_cluster_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_cluster_ref_id", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_endpoint")

    @https_endpoint.setter
    def https_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_endpoint", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Can be set on the Kibana resource. The default value `main-kibana` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentKibanaTopologyArgs']]]]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")

    @topologies.setter
    def topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentKibanaTopologyArgs']]]]):
        pulumi.set(self, "topologies", value)


@pulumi.input_type
class DeploymentKibanaConfigArgs:
    def __init__(__self__, *,
                 docker_image: Optional[pulumi.Input[str]] = None,
                 user_settings_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_json: Optional[pulumi.Input[str]] = None,
                 user_settings_override_yaml: Optional[pulumi.Input[str]] = None,
                 user_settings_yaml: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param pulumi.Input[str] user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_image")

    @docker_image.setter
    def docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_image", value)

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @user_settings_json.setter
    def user_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[pulumi.Input[str]]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @user_settings_override_json.setter
    def user_settings_override_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_json", value)

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @user_settings_override_yaml.setter
    def user_settings_override_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_override_yaml", value)

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[pulumi.Input[str]]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")

    @user_settings_yaml.setter
    def user_settings_yaml(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_settings_yaml", value)


@pulumi.input_type
class DeploymentKibanaTopologyArgs:
    def __init__(__self__, *,
                 instance_configuration_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 size_resource: Optional[pulumi.Input[str]] = None,
                 zone_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param pulumi.Input[str] size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param pulumi.Input[str] size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param pulumi.Input[int] zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @instance_configuration_id.setter
    def instance_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_configuration_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[pulumi.Input[str]]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @size_resource.setter
    def size_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_resource", value)

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")

    @zone_count.setter
    def zone_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_count", value)


@pulumi.input_type
class DeploymentObservabilityArgs:
    def __init__(__self__, *,
                 deployment_id: pulumi.Input[str],
                 logs: Optional[pulumi.Input[bool]] = None,
                 metrics: Optional[pulumi.Input[bool]] = None,
                 ref_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] deployment_id: Remote deployment ID.
        :param pulumi.Input[str] ref_id: Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Input[str]:
        """
        Remote deployment ID.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_id", value)


@pulumi.input_type
class DeploymentTrafficFilterRuleArgs:
    def __init__(__self__, *,
                 azure_endpoint_guid: Optional[pulumi.Input[str]] = None,
                 azure_endpoint_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] azure_endpoint_guid: Azure endpoint GUID. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        :param pulumi.Input[str] azure_endpoint_name: Azure endpoint name. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        :param pulumi.Input[str] description: Description of this individual rule.
        :param pulumi.Input[str] id: The ruleset ID.
        :param pulumi.Input[str] source: traffic filter source: IP address, CIDR mask, or VPC endpoint ID, **only required** when the type is not `"azure_private_endpoint"`.
        """
        if azure_endpoint_guid is not None:
            pulumi.set(__self__, "azure_endpoint_guid", azure_endpoint_guid)
        if azure_endpoint_name is not None:
            pulumi.set(__self__, "azure_endpoint_name", azure_endpoint_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="azureEndpointGuid")
    def azure_endpoint_guid(self) -> Optional[pulumi.Input[str]]:
        """
        Azure endpoint GUID. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        """
        return pulumi.get(self, "azure_endpoint_guid")

    @azure_endpoint_guid.setter
    def azure_endpoint_guid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_endpoint_guid", value)

    @property
    @pulumi.getter(name="azureEndpointName")
    def azure_endpoint_name(self) -> Optional[pulumi.Input[str]]:
        """
        Azure endpoint name. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        """
        return pulumi.get(self, "azure_endpoint_name")

    @azure_endpoint_name.setter
    def azure_endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_endpoint_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of this individual rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ruleset ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        traffic filter source: IP address, CIDR mask, or VPC endpoint ID, **only required** when the type is not `"azure_private_endpoint"`.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class GetDeploymentsApmArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetDeploymentsElasticsearchArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetDeploymentsEnterpriseSearchArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetDeploymentsIntegrationsServerArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GetDeploymentsKibanaArgs:
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[str]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


