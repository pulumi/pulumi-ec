# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'DeploymentApm',
    'DeploymentApmConfig',
    'DeploymentApmTopology',
    'DeploymentElasticsearch',
    'DeploymentElasticsearchConfig',
    'DeploymentElasticsearchExtension',
    'DeploymentElasticsearchRemoteCluster',
    'DeploymentElasticsearchSnapshotSource',
    'DeploymentElasticsearchTopology',
    'DeploymentElasticsearchTopologyAutoscaling',
    'DeploymentElasticsearchTopologyConfig',
    'DeploymentElasticsearchTrustAccount',
    'DeploymentElasticsearchTrustExternal',
    'DeploymentEnterpriseSearch',
    'DeploymentEnterpriseSearchConfig',
    'DeploymentEnterpriseSearchTopology',
    'DeploymentIntegrationsServer',
    'DeploymentIntegrationsServerConfig',
    'DeploymentIntegrationsServerTopology',
    'DeploymentKibana',
    'DeploymentKibanaConfig',
    'DeploymentKibanaTopology',
    'DeploymentObservability',
    'DeploymentTrafficFilterRule',
    'GetDeploymentApmResult',
    'GetDeploymentApmTopologyResult',
    'GetDeploymentElasticsearchResult',
    'GetDeploymentElasticsearchTopologyResult',
    'GetDeploymentElasticsearchTopologyAutoscalingResult',
    'GetDeploymentEnterpriseSearchResult',
    'GetDeploymentEnterpriseSearchTopologyResult',
    'GetDeploymentIntegrationsServerResult',
    'GetDeploymentIntegrationsServerTopologyResult',
    'GetDeploymentKibanaResult',
    'GetDeploymentKibanaTopologyResult',
    'GetDeploymentObservabilityResult',
    'GetDeploymentsApmResult',
    'GetDeploymentsDeploymentResult',
    'GetDeploymentsElasticsearchResult',
    'GetDeploymentsEnterpriseSearchResult',
    'GetDeploymentsIntegrationsServerResult',
    'GetDeploymentsKibanaResult',
    'GetStackApmResult',
    'GetStackElasticsearchResult',
    'GetStackEnterpriseSearchResult',
    'GetStackKibanaResult',
]

@pulumi.output_type
class DeploymentApm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticsearchClusterRefId":
            suggest = "elasticsearch_cluster_ref_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentApm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentApm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentApm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional['outputs.DeploymentApmConfig'] = None,
                 elasticsearch_cluster_ref_id: Optional[str] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 topologies: Optional[Sequence['outputs.DeploymentApmTopology']] = None):
        """
        :param 'DeploymentApmConfigArgs' config: APM settings applied to all topologies unless overridden in the `topology` element.
        :param str elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param str ref_id: Can be set on the APM resource. The default value `main-apm` is recommended.
        :param str region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param Sequence['DeploymentApmTopologyArgs'] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.DeploymentApmConfig']:
        """
        APM settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[str]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        """
        Can be set on the APM resource. The default value `main-apm` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.DeploymentApmTopology']]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")


@pulumi.output_type
class DeploymentApmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "debugEnabled":
            suggest = "debug_enabled"
        elif key == "dockerImage":
            suggest = "docker_image"
        elif key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentApmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentApmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentApmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 debug_enabled: Optional[bool] = None,
                 docker_image: Optional[str] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        """
        :param bool debug_enabled: Enable debug mode for the component. Defaults to `false`.
        :param str user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[bool]:
        """
        Enable debug mode for the component. Defaults to `false`.
        """
        return pulumi.get(self, "debug_enabled")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[str]:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class DeploymentApmTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentApmTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentApmTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentApmTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: Optional[str] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        """
        :param str instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param str size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param str size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param int zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class DeploymentElasticsearch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudId":
            suggest = "cloud_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "remoteClusters":
            suggest = "remote_clusters"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "snapshotSource":
            suggest = "snapshot_source"
        elif key == "trustAccounts":
            suggest = "trust_accounts"
        elif key == "trustExternals":
            suggest = "trust_externals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoscale: Optional[str] = None,
                 cloud_id: Optional[str] = None,
                 config: Optional['outputs.DeploymentElasticsearchConfig'] = None,
                 extensions: Optional[Sequence['outputs.DeploymentElasticsearchExtension']] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 remote_clusters: Optional[Sequence['outputs.DeploymentElasticsearchRemoteCluster']] = None,
                 resource_id: Optional[str] = None,
                 snapshot_source: Optional['outputs.DeploymentElasticsearchSnapshotSource'] = None,
                 topologies: Optional[Sequence['outputs.DeploymentElasticsearchTopology']] = None,
                 trust_accounts: Optional[Sequence['outputs.DeploymentElasticsearchTrustAccount']] = None,
                 trust_externals: Optional[Sequence['outputs.DeploymentElasticsearchTrustExternal']] = None):
        """
        :param str autoscale: Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are `"true"` or `"false"`.
        :param 'DeploymentElasticsearchConfigArgs' config: Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        :param Sequence['DeploymentElasticsearchExtensionArgs'] extensions: Custom Elasticsearch bundles or plugins. Can be set multiple times.
        :param str ref_id: Remote Elasticsearch `ref_id`. The default value `main-elasticsearch` is recommended.
        :param str region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param Sequence['DeploymentElasticsearchRemoteClusterArgs'] remote_clusters: Elasticsearch remote clusters to configure for the Elasticsearch resource. Can be set multiple times.
        :param 'DeploymentElasticsearchSnapshotSourceArgs' snapshot_source: Restores data from a snapshot of another deployment.
        :param Sequence['DeploymentElasticsearchTopologyArgs'] topologies: Can be set multiple times to compose complex topologies.
        :param Sequence['DeploymentElasticsearchTrustAccountArgs'] trust_accounts: The trust relationships with other ESS accounts.
        :param Sequence['DeploymentElasticsearchTrustExternalArgs'] trust_externals: The trust relationship with external entities (remote environments, remote accounts...).
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if cloud_id is not None:
            pulumi.set(__self__, "cloud_id", cloud_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remote_clusters is not None:
            pulumi.set(__self__, "remote_clusters", remote_clusters)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if snapshot_source is not None:
            pulumi.set(__self__, "snapshot_source", snapshot_source)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)
        if trust_accounts is not None:
            pulumi.set(__self__, "trust_accounts", trust_accounts)
        if trust_externals is not None:
            pulumi.set(__self__, "trust_externals", trust_externals)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[str]:
        """
        Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are `"true"` or `"false"`.
        """
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> Optional[str]:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.DeploymentElasticsearchConfig']:
        """
        Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.DeploymentElasticsearchExtension']]:
        """
        Custom Elasticsearch bundles or plugins. Can be set multiple times.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        """
        Remote Elasticsearch `ref_id`. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="remoteClusters")
    def remote_clusters(self) -> Optional[Sequence['outputs.DeploymentElasticsearchRemoteCluster']]:
        """
        Elasticsearch remote clusters to configure for the Elasticsearch resource. Can be set multiple times.
        """
        return pulumi.get(self, "remote_clusters")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="snapshotSource")
    def snapshot_source(self) -> Optional['outputs.DeploymentElasticsearchSnapshotSource']:
        """
        Restores data from a snapshot of another deployment.
        """
        return pulumi.get(self, "snapshot_source")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.DeploymentElasticsearchTopology']]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter(name="trustAccounts")
    def trust_accounts(self) -> Optional[Sequence['outputs.DeploymentElasticsearchTrustAccount']]:
        """
        The trust relationships with other ESS accounts.
        """
        return pulumi.get(self, "trust_accounts")

    @property
    @pulumi.getter(name="trustExternals")
    def trust_externals(self) -> Optional[Sequence['outputs.DeploymentElasticsearchTrustExternal']]:
        """
        The trust relationship with external entities (remote environments, remote accounts...).
        """
        return pulumi.get(self, "trust_externals")


@pulumi.output_type
class DeploymentElasticsearchConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerImage":
            suggest = "docker_image"
        elif key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docker_image: Optional[str] = None,
                 plugins: Optional[Sequence[str]] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        """
        :param Sequence[str] plugins: List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        :param str user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[str]:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Optional[Sequence[str]]:
        """
        List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        """
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class DeploymentElasticsearchExtension(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 url: str,
                 version: str):
        """
        :param str name: Name of the deployment.
        :param str type: Extension type, only `bundle` or `plugin` are supported.
        :param str url: Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
        :param str version: Elastic Stack version to use for all the deployment resources.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the deployment.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Extension type, only `bundle` or `plugin` are supported.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Elastic Stack version to use for all the deployment resources.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentElasticsearchRemoteCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "skipUnavailable":
            suggest = "skip_unavailable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchRemoteCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchRemoteCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchRemoteCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias: str,
                 deployment_id: str,
                 ref_id: Optional[str] = None,
                 skip_unavailable: Optional[bool] = None):
        """
        :param str alias: Deployment alias, affects the format of the resource URLs.
        :param str deployment_id: Remote deployment ID.
        :param str ref_id: Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        :param bool skip_unavailable: If true, skip the cluster during search when disconnected. Defaults to `false`.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "deployment_id", deployment_id)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if skip_unavailable is not None:
            pulumi.set(__self__, "skip_unavailable", skip_unavailable)

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        Deployment alias, affects the format of the resource URLs.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        Remote deployment ID.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        """
        Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="skipUnavailable")
    def skip_unavailable(self) -> Optional[bool]:
        """
        If true, skip the cluster during search when disconnected. Defaults to `false`.
        """
        return pulumi.get(self, "skip_unavailable")


@pulumi.output_type
class DeploymentElasticsearchSnapshotSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceElasticsearchClusterId":
            suggest = "source_elasticsearch_cluster_id"
        elif key == "snapshotName":
            suggest = "snapshot_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchSnapshotSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchSnapshotSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchSnapshotSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_elasticsearch_cluster_id: str,
                 snapshot_name: Optional[str] = None):
        """
        :param str source_elasticsearch_cluster_id: ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
        :param str snapshot_name: Name of the snapshot to restore. Use `__latest_success__` to get the most recent successful snapshot (Defaults to `__latest_success__`).
        """
        pulumi.set(__self__, "source_elasticsearch_cluster_id", source_elasticsearch_cluster_id)
        if snapshot_name is not None:
            pulumi.set(__self__, "snapshot_name", snapshot_name)

    @property
    @pulumi.getter(name="sourceElasticsearchClusterId")
    def source_elasticsearch_cluster_id(self) -> str:
        """
        ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
        """
        return pulumi.get(self, "source_elasticsearch_cluster_id")

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> Optional[str]:
        """
        Name of the snapshot to restore. Use `__latest_success__` to get the most recent successful snapshot (Defaults to `__latest_success__`).
        """
        return pulumi.get(self, "snapshot_name")


@pulumi.output_type
class DeploymentElasticsearchTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "nodeRoles":
            suggest = "node_roles"
        elif key == "nodeTypeData":
            suggest = "node_type_data"
        elif key == "nodeTypeIngest":
            suggest = "node_type_ingest"
        elif key == "nodeTypeMaster":
            suggest = "node_type_master"
        elif key == "nodeTypeMl":
            suggest = "node_type_ml"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 autoscaling: Optional['outputs.DeploymentElasticsearchTopologyAutoscaling'] = None,
                 configs: Optional[Sequence['outputs.DeploymentElasticsearchTopologyConfig']] = None,
                 instance_configuration_id: Optional[str] = None,
                 node_roles: Optional[Sequence[str]] = None,
                 node_type_data: Optional[str] = None,
                 node_type_ingest: Optional[str] = None,
                 node_type_master: Optional[str] = None,
                 node_type_ml: Optional[str] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        """
        :param str id: Unique topology identifier. It generally refers to an Elasticsearch data tier, such as `hot_content`, `warm`, `cold`, `coordinating`, `frozen`, `ml` or `master`.
        :param 'DeploymentElasticsearchTopologyAutoscalingArgs' autoscaling: Autoscaling policy defining the maximum and / or minimum total size for this topology element. For more information refer to the `autoscaling` block.
        :param Sequence['DeploymentElasticsearchTopologyConfigArgs'] configs: Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        :param str instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param str node_type_data: The node type for the Elasticsearch cluster (data node).
        :param str node_type_ingest: The node type for the Elasticsearch cluster (ingest node).
        :param str node_type_master: The node type for the Elasticsearch cluster (master node).
        :param str node_type_ml: The node type for the Elasticsearch cluster (machine learning node).
        :param str size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param str size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param int zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        pulumi.set(__self__, "id", id)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_roles is not None:
            pulumi.set(__self__, "node_roles", node_roles)
        if node_type_data is not None:
            pulumi.set(__self__, "node_type_data", node_type_data)
        if node_type_ingest is not None:
            pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        if node_type_master is not None:
            pulumi.set(__self__, "node_type_master", node_type_master)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique topology identifier. It generally refers to an Elasticsearch data tier, such as `hot_content`, `warm`, `cold`, `coordinating`, `frozen`, `ml` or `master`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional['outputs.DeploymentElasticsearchTopologyAutoscaling']:
        """
        Autoscaling policy defining the maximum and / or minimum total size for this topology element. For more information refer to the `autoscaling` block.
        """
        return pulumi.get(self, "autoscaling")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.DeploymentElasticsearchTopologyConfig']]:
        """
        Elasticsearch settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "node_roles")

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> Optional[str]:
        """
        The node type for the Elasticsearch cluster (data node).
        """
        return pulumi.get(self, "node_type_data")

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> Optional[str]:
        """
        The node type for the Elasticsearch cluster (ingest node).
        """
        return pulumi.get(self, "node_type_ingest")

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> Optional[str]:
        """
        The node type for the Elasticsearch cluster (master node).
        """
        return pulumi.get(self, "node_type_master")

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[str]:
        """
        The node type for the Elasticsearch cluster (machine learning node).
        """
        return pulumi.get(self, "node_type_ml")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class DeploymentElasticsearchTopologyAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"
        elif key == "maxSizeResource":
            suggest = "max_size_resource"
        elif key == "minSize":
            suggest = "min_size"
        elif key == "minSizeResource":
            suggest = "min_size_resource"
        elif key == "policyOverrideJson":
            suggest = "policy_override_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchTopologyAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchTopologyAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchTopologyAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_size: Optional[str] = None,
                 max_size_resource: Optional[str] = None,
                 min_size: Optional[str] = None,
                 min_size_resource: Optional[str] = None,
                 policy_override_json: Optional[str] = None):
        """
        :param str max_size: Defines the maximum size the deployment will scale up to. When set, scaling up will be enabled. All tiers should support this option.
        :param str max_size_resource: Defines the resource type the scale up will use (Defaults to `"memory"`).
        :param str min_size: Defines the minimum size the deployment will scale down to. When set, scale down will be enabled, please note that not all the tiers support this option.
        :param str min_size_resource: Defines the resource type the scale down will use (Defaults to `"memory"`).
        """
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if max_size_resource is not None:
            pulumi.set(__self__, "max_size_resource", max_size_resource)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if min_size_resource is not None:
            pulumi.set(__self__, "min_size_resource", min_size_resource)
        if policy_override_json is not None:
            pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[str]:
        """
        Defines the maximum size the deployment will scale up to. When set, scaling up will be enabled. All tiers should support this option.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> Optional[str]:
        """
        Defines the resource type the scale up will use (Defaults to `"memory"`).
        """
        return pulumi.get(self, "max_size_resource")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[str]:
        """
        Defines the minimum size the deployment will scale down to. When set, scale down will be enabled, please note that not all the tiers support this option.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> Optional[str]:
        """
        Defines the resource type the scale down will use (Defaults to `"memory"`).
        """
        return pulumi.get(self, "min_size_resource")

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> Optional[str]:
        return pulumi.get(self, "policy_override_json")


@pulumi.output_type
class DeploymentElasticsearchTopologyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchTopologyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchTopologyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchTopologyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plugins: Optional[Sequence[str]] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        """
        :param Sequence[str] plugins: List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        :param str user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[Sequence[str]]:
        """
        List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html).
        """
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class DeploymentElasticsearchTrustAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "trustAll":
            suggest = "trust_all"
        elif key == "trustAllowlists":
            suggest = "trust_allowlists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchTrustAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchTrustAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchTrustAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 trust_all: bool,
                 trust_allowlists: Optional[Sequence[str]] = None):
        """
        :param str account_id: The account identifier to establish the new trust with.
        :param bool trust_all: If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        :param Sequence[str] trust_allowlists: The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "trust_all", trust_all)
        if trust_allowlists is not None:
            pulumi.set(__self__, "trust_allowlists", trust_allowlists)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account identifier to establish the new trust with.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="trustAll")
    def trust_all(self) -> bool:
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        return pulumi.get(self, "trust_all")

    @property
    @pulumi.getter(name="trustAllowlists")
    def trust_allowlists(self) -> Optional[Sequence[str]]:
        """
        The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        return pulumi.get(self, "trust_allowlists")


@pulumi.output_type
class DeploymentElasticsearchTrustExternal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relationshipId":
            suggest = "relationship_id"
        elif key == "trustAll":
            suggest = "trust_all"
        elif key == "trustAllowlists":
            suggest = "trust_allowlists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentElasticsearchTrustExternal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentElasticsearchTrustExternal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentElasticsearchTrustExternal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relationship_id: str,
                 trust_all: bool,
                 trust_allowlists: Optional[Sequence[str]] = None):
        """
        :param str relationship_id: Identifier of the the trust relationship with external entities (remote environments, remote accounts...).
        :param bool trust_all: If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        :param Sequence[str] trust_allowlists: The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        pulumi.set(__self__, "relationship_id", relationship_id)
        pulumi.set(__self__, "trust_all", trust_all)
        if trust_allowlists is not None:
            pulumi.set(__self__, "trust_allowlists", trust_allowlists)

    @property
    @pulumi.getter(name="relationshipId")
    def relationship_id(self) -> str:
        """
        Identifier of the the trust relationship with external entities (remote environments, remote accounts...).
        """
        return pulumi.get(self, "relationship_id")

    @property
    @pulumi.getter(name="trustAll")
    def trust_all(self) -> bool:
        """
        If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
        """
        return pulumi.get(self, "trust_all")

    @property
    @pulumi.getter(name="trustAllowlists")
    def trust_allowlists(self) -> Optional[Sequence[str]]:
        """
        The list of clusters to trust. Only used when `trust_all` is `false`.
        """
        return pulumi.get(self, "trust_allowlists")


@pulumi.output_type
class DeploymentEnterpriseSearch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticsearchClusterRefId":
            suggest = "elasticsearch_cluster_ref_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentEnterpriseSearch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentEnterpriseSearch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentEnterpriseSearch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional['outputs.DeploymentEnterpriseSearchConfig'] = None,
                 elasticsearch_cluster_ref_id: Optional[str] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 topologies: Optional[Sequence['outputs.DeploymentEnterpriseSearchTopology']] = None):
        """
        :param 'DeploymentEnterpriseSearchConfigArgs' config: Enterprise Search settings applied to all topologies unless overridden in the `topology` element.
        :param str elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param str ref_id: Can be set on the Enterprise Search resource. The default value `main-enterprise_search` is recommended.
        :param str region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param Sequence['DeploymentEnterpriseSearchTopologyArgs'] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.DeploymentEnterpriseSearchConfig']:
        """
        Enterprise Search settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[str]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        """
        Can be set on the Enterprise Search resource. The default value `main-enterprise_search` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.DeploymentEnterpriseSearchTopology']]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")


@pulumi.output_type
class DeploymentEnterpriseSearchConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerImage":
            suggest = "docker_image"
        elif key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentEnterpriseSearchConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentEnterpriseSearchConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentEnterpriseSearchConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docker_image: Optional[str] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        """
        :param str user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[str]:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class DeploymentEnterpriseSearchTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "nodeTypeAppserver":
            suggest = "node_type_appserver"
        elif key == "nodeTypeConnector":
            suggest = "node_type_connector"
        elif key == "nodeTypeWorker":
            suggest = "node_type_worker"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentEnterpriseSearchTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentEnterpriseSearchTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentEnterpriseSearchTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: Optional[str] = None,
                 node_type_appserver: Optional[bool] = None,
                 node_type_connector: Optional[bool] = None,
                 node_type_worker: Optional[bool] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        """
        :param str instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param str size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param str size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param int zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if node_type_appserver is not None:
            pulumi.set(__self__, "node_type_appserver", node_type_appserver)
        if node_type_connector is not None:
            pulumi.set(__self__, "node_type_connector", node_type_connector)
        if node_type_worker is not None:
            pulumi.set(__self__, "node_type_worker", node_type_worker)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeTypeAppserver")
    def node_type_appserver(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_appserver")

    @property
    @pulumi.getter(name="nodeTypeConnector")
    def node_type_connector(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_connector")

    @property
    @pulumi.getter(name="nodeTypeWorker")
    def node_type_worker(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_worker")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class DeploymentIntegrationsServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticsearchClusterRefId":
            suggest = "elasticsearch_cluster_ref_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIntegrationsServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIntegrationsServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIntegrationsServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional['outputs.DeploymentIntegrationsServerConfig'] = None,
                 elasticsearch_cluster_ref_id: Optional[str] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 topologies: Optional[Sequence['outputs.DeploymentIntegrationsServerTopology']] = None):
        """
        :param 'DeploymentIntegrationsServerConfigArgs' config: Integrations Server settings applied to all topologies unless overridden in the `topology` element.
        :param str elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param str ref_id: Can be set on the Integrations Server resource. The default value `main-integrations_server` is recommended.
        :param str region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param Sequence['DeploymentIntegrationsServerTopologyArgs'] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.DeploymentIntegrationsServerConfig']:
        """
        Integrations Server settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[str]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        """
        Can be set on the Integrations Server resource. The default value `main-integrations_server` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.DeploymentIntegrationsServerTopology']]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")


@pulumi.output_type
class DeploymentIntegrationsServerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "debugEnabled":
            suggest = "debug_enabled"
        elif key == "dockerImage":
            suggest = "docker_image"
        elif key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIntegrationsServerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIntegrationsServerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIntegrationsServerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 debug_enabled: Optional[bool] = None,
                 docker_image: Optional[str] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        """
        :param bool debug_enabled: Enable debug mode for the component. Defaults to `false`.
        :param str user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if debug_enabled is not None:
            pulumi.set(__self__, "debug_enabled", debug_enabled)
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="debugEnabled")
    def debug_enabled(self) -> Optional[bool]:
        """
        Enable debug mode for the component. Defaults to `false`.
        """
        return pulumi.get(self, "debug_enabled")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[str]:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class DeploymentIntegrationsServerTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIntegrationsServerTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIntegrationsServerTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIntegrationsServerTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: Optional[str] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        """
        :param str instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param str size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param str size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param int zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class DeploymentKibana(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "elasticsearchClusterRefId":
            suggest = "elasticsearch_cluster_ref_id"
        elif key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpsEndpoint":
            suggest = "https_endpoint"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentKibana. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentKibana.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentKibana.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional['outputs.DeploymentKibanaConfig'] = None,
                 elasticsearch_cluster_ref_id: Optional[str] = None,
                 http_endpoint: Optional[str] = None,
                 https_endpoint: Optional[str] = None,
                 ref_id: Optional[str] = None,
                 region: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 topologies: Optional[Sequence['outputs.DeploymentKibanaTopology']] = None):
        """
        :param 'DeploymentKibanaConfigArgs' config: Kibana settings applied to all topologies unless overridden in the `topology` element.
        :param str elasticsearch_cluster_ref_id: This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        :param str ref_id: Can be set on the Kibana resource. The default value `main-kibana` is recommended.
        :param str region: Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        :param Sequence['DeploymentKibanaTopologyArgs'] topologies: Can be set multiple times to compose complex topologies.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if elasticsearch_cluster_ref_id is not None:
            pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if https_endpoint is not None:
            pulumi.set(__self__, "https_endpoint", https_endpoint)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if topologies is not None:
            pulumi.set(__self__, "topologies", topologies)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.DeploymentKibanaConfig']:
        """
        Kibana settings applied to all topologies unless overridden in the `topology` element.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> Optional[str]:
        """
        This field references the `ref_id` of the deployment Elasticsearch cluster. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        """
        Can be set on the Kibana resource. The default value `main-kibana` is recommended.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set `"ece-region"`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def topologies(self) -> Optional[Sequence['outputs.DeploymentKibanaTopology']]:
        """
        Can be set multiple times to compose complex topologies.
        """
        return pulumi.get(self, "topologies")


@pulumi.output_type
class DeploymentKibanaConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerImage":
            suggest = "docker_image"
        elif key == "userSettingsJson":
            suggest = "user_settings_json"
        elif key == "userSettingsOverrideJson":
            suggest = "user_settings_override_json"
        elif key == "userSettingsOverrideYaml":
            suggest = "user_settings_override_yaml"
        elif key == "userSettingsYaml":
            suggest = "user_settings_yaml"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentKibanaConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentKibanaConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentKibanaConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docker_image: Optional[str] = None,
                 user_settings_json: Optional[str] = None,
                 user_settings_override_json: Optional[str] = None,
                 user_settings_override_yaml: Optional[str] = None,
                 user_settings_yaml: Optional[str] = None):
        """
        :param str user_settings_json: JSON-formatted user level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_json: JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_override_yaml: YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        :param str user_settings_yaml: YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        if docker_image is not None:
            pulumi.set(__self__, "docker_image", docker_image)
        if user_settings_json is not None:
            pulumi.set(__self__, "user_settings_json", user_settings_json)
        if user_settings_override_json is not None:
            pulumi.set(__self__, "user_settings_override_json", user_settings_override_json)
        if user_settings_override_yaml is not None:
            pulumi.set(__self__, "user_settings_override_yaml", user_settings_override_yaml)
        if user_settings_yaml is not None:
            pulumi.set(__self__, "user_settings_yaml", user_settings_yaml)

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> Optional[str]:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter(name="userSettingsJson")
    def user_settings_json(self) -> Optional[str]:
        """
        JSON-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_json")

    @property
    @pulumi.getter(name="userSettingsOverrideJson")
    def user_settings_override_json(self) -> Optional[str]:
        """
        JSON-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_json")

    @property
    @pulumi.getter(name="userSettingsOverrideYaml")
    def user_settings_override_yaml(self) -> Optional[str]:
        """
        YAML-formatted admin (ECE) level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_override_yaml")

    @property
    @pulumi.getter(name="userSettingsYaml")
    def user_settings_yaml(self) -> Optional[str]:
        """
        YAML-formatted user level `elasticsearch.yml` setting overrides.
        """
        return pulumi.get(self, "user_settings_yaml")


@pulumi.output_type
class DeploymentKibanaTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfigurationId":
            suggest = "instance_configuration_id"
        elif key == "sizeResource":
            suggest = "size_resource"
        elif key == "zoneCount":
            suggest = "zone_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentKibanaTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentKibanaTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentKibanaTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration_id: Optional[str] = None,
                 size: Optional[str] = None,
                 size_resource: Optional[str] = None,
                 zone_count: Optional[int] = None):
        """
        :param str instance_configuration_id: Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        :param str size: Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        :param str size_resource: Type of resource to which the size is assigned. Defaults to `"memory"`.
        :param int zone_count: Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        if instance_configuration_id is not None:
            pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_resource is not None:
            pulumi.set(__self__, "size_resource", size_resource)
        if zone_count is not None:
            pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> Optional[str]:
        """
        Default instance configuration of the deployment template. No need to change this value since Kibana has only one _instance type_.
        """
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Amount in Gigabytes per topology element in the `"<size in GB>g"` notation. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> Optional[str]:
        """
        Type of resource to which the size is assigned. Defaults to `"memory"`.
        """
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> Optional[int]:
        """
        Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
        """
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class DeploymentObservability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"
        elif key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentObservability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentObservability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentObservability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: str,
                 logs: Optional[bool] = None,
                 metrics: Optional[bool] = None,
                 ref_id: Optional[str] = None):
        """
        :param str deployment_id: Remote deployment ID.
        :param str ref_id: Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if ref_id is not None:
            pulumi.set(__self__, "ref_id", ref_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        """
        Remote deployment ID.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def logs(self) -> Optional[bool]:
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[bool]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> Optional[str]:
        """
        Can be set on the Elasticsearch resource. The default value `main-elasticsearch` is recommended.
        """
        return pulumi.get(self, "ref_id")


@pulumi.output_type
class DeploymentTrafficFilterRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureEndpointGuid":
            suggest = "azure_endpoint_guid"
        elif key == "azureEndpointName":
            suggest = "azure_endpoint_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentTrafficFilterRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentTrafficFilterRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentTrafficFilterRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_endpoint_guid: Optional[str] = None,
                 azure_endpoint_name: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 source: Optional[str] = None):
        """
        :param str azure_endpoint_guid: Azure endpoint GUID. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        :param str azure_endpoint_name: Azure endpoint name. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        :param str description: Description of this individual rule.
        :param str id: The ruleset ID.
        :param str source: traffic filter source: IP address, CIDR mask, or VPC endpoint ID, **only required** when the type is not `"azure_private_endpoint"`.
        """
        if azure_endpoint_guid is not None:
            pulumi.set(__self__, "azure_endpoint_guid", azure_endpoint_guid)
        if azure_endpoint_name is not None:
            pulumi.set(__self__, "azure_endpoint_name", azure_endpoint_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="azureEndpointGuid")
    def azure_endpoint_guid(self) -> Optional[str]:
        """
        Azure endpoint GUID. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        """
        return pulumi.get(self, "azure_endpoint_guid")

    @property
    @pulumi.getter(name="azureEndpointName")
    def azure_endpoint_name(self) -> Optional[str]:
        """
        Azure endpoint name. Only applicable when the ruleset type is set to `"azure_private_endpoint"`.
        """
        return pulumi.get(self, "azure_endpoint_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of this individual rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ruleset ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        traffic filter source: IP address, CIDR mask, or VPC endpoint ID, **only required** when the type is not `"azure_private_endpoint"`.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class GetDeploymentApmResult(dict):
    def __init__(__self__, *,
                 elasticsearch_cluster_ref_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetDeploymentApmTopologyResult'],
                 version: str):
        """
        :param bool healthy: Overall health status of the deployment.
        """
        pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetDeploymentApmTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentApmTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 size: str,
                 size_resource: str,
                 zone_count: int):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class GetDeploymentElasticsearchResult(dict):
    def __init__(__self__, *,
                 autoscale: str,
                 cloud_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetDeploymentElasticsearchTopologyResult'],
                 version: str):
        """
        :param bool healthy: Overall health status of the deployment.
        """
        pulumi.set(__self__, "autoscale", autoscale)
        pulumi.set(__self__, "cloud_id", cloud_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def autoscale(self) -> str:
        return pulumi.get(self, "autoscale")

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> str:
        return pulumi.get(self, "cloud_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetDeploymentElasticsearchTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentElasticsearchTopologyResult(dict):
    def __init__(__self__, *,
                 autoscalings: Sequence['outputs.GetDeploymentElasticsearchTopologyAutoscalingResult'],
                 instance_configuration_id: str,
                 node_roles: Sequence[str],
                 node_type_data: bool,
                 node_type_ingest: bool,
                 node_type_master: bool,
                 size: str,
                 size_resource: str,
                 zone_count: int,
                 node_type_ml: Optional[bool] = None):
        pulumi.set(__self__, "autoscalings", autoscalings)
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "node_roles", node_roles)
        pulumi.set(__self__, "node_type_data", node_type_data)
        pulumi.set(__self__, "node_type_ingest", node_type_ingest)
        pulumi.set(__self__, "node_type_master", node_type_master)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)
        if node_type_ml is not None:
            pulumi.set(__self__, "node_type_ml", node_type_ml)

    @property
    @pulumi.getter
    def autoscalings(self) -> Sequence['outputs.GetDeploymentElasticsearchTopologyAutoscalingResult']:
        return pulumi.get(self, "autoscalings")

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeRoles")
    def node_roles(self) -> Sequence[str]:
        return pulumi.get(self, "node_roles")

    @property
    @pulumi.getter(name="nodeTypeData")
    def node_type_data(self) -> bool:
        return pulumi.get(self, "node_type_data")

    @property
    @pulumi.getter(name="nodeTypeIngest")
    def node_type_ingest(self) -> bool:
        return pulumi.get(self, "node_type_ingest")

    @property
    @pulumi.getter(name="nodeTypeMaster")
    def node_type_master(self) -> bool:
        return pulumi.get(self, "node_type_master")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")

    @property
    @pulumi.getter(name="nodeTypeMl")
    def node_type_ml(self) -> Optional[bool]:
        return pulumi.get(self, "node_type_ml")


@pulumi.output_type
class GetDeploymentElasticsearchTopologyAutoscalingResult(dict):
    def __init__(__self__, *,
                 max_size: str,
                 max_size_resource: str,
                 min_size: str,
                 min_size_resource: str,
                 policy_override_json: str):
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "max_size_resource", max_size_resource)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "min_size_resource", min_size_resource)
        pulumi.set(__self__, "policy_override_json", policy_override_json)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> str:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="maxSizeResource")
    def max_size_resource(self) -> str:
        return pulumi.get(self, "max_size_resource")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> str:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="minSizeResource")
    def min_size_resource(self) -> str:
        return pulumi.get(self, "min_size_resource")

    @property
    @pulumi.getter(name="policyOverrideJson")
    def policy_override_json(self) -> str:
        return pulumi.get(self, "policy_override_json")


@pulumi.output_type
class GetDeploymentEnterpriseSearchResult(dict):
    def __init__(__self__, *,
                 elasticsearch_cluster_ref_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetDeploymentEnterpriseSearchTopologyResult'],
                 version: str):
        """
        :param bool healthy: Overall health status of the deployment.
        """
        pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetDeploymentEnterpriseSearchTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentEnterpriseSearchTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 node_type_appserver: bool,
                 node_type_connector: bool,
                 node_type_worker: bool,
                 size: str,
                 size_resource: str,
                 zone_count: int):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "node_type_appserver", node_type_appserver)
        pulumi.set(__self__, "node_type_connector", node_type_connector)
        pulumi.set(__self__, "node_type_worker", node_type_worker)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter(name="nodeTypeAppserver")
    def node_type_appserver(self) -> bool:
        return pulumi.get(self, "node_type_appserver")

    @property
    @pulumi.getter(name="nodeTypeConnector")
    def node_type_connector(self) -> bool:
        return pulumi.get(self, "node_type_connector")

    @property
    @pulumi.getter(name="nodeTypeWorker")
    def node_type_worker(self) -> bool:
        return pulumi.get(self, "node_type_worker")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class GetDeploymentIntegrationsServerResult(dict):
    def __init__(__self__, *,
                 elasticsearch_cluster_ref_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetDeploymentIntegrationsServerTopologyResult'],
                 version: str):
        """
        :param bool healthy: Overall health status of the deployment.
        """
        pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetDeploymentIntegrationsServerTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentIntegrationsServerTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 size: str,
                 size_resource: str,
                 zone_count: int):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class GetDeploymentKibanaResult(dict):
    def __init__(__self__, *,
                 elasticsearch_cluster_ref_id: str,
                 healthy: bool,
                 http_endpoint: str,
                 https_endpoint: str,
                 ref_id: str,
                 resource_id: str,
                 status: str,
                 topologies: Sequence['outputs.GetDeploymentKibanaTopologyResult'],
                 version: str):
        """
        :param bool healthy: Overall health status of the deployment.
        """
        pulumi.set(__self__, "elasticsearch_cluster_ref_id", elasticsearch_cluster_ref_id)
        pulumi.set(__self__, "healthy", healthy)
        pulumi.set(__self__, "http_endpoint", http_endpoint)
        pulumi.set(__self__, "https_endpoint", https_endpoint)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "topologies", topologies)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="elasticsearchClusterRefId")
    def elasticsearch_cluster_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_cluster_ref_id")

    @property
    @pulumi.getter
    def healthy(self) -> bool:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> str:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpsEndpoint")
    def https_endpoint(self) -> str:
        return pulumi.get(self, "https_endpoint")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def topologies(self) -> Sequence['outputs.GetDeploymentKibanaTopologyResult']:
        return pulumi.get(self, "topologies")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentKibanaTopologyResult(dict):
    def __init__(__self__, *,
                 instance_configuration_id: str,
                 size: str,
                 size_resource: str,
                 zone_count: int):
        pulumi.set(__self__, "instance_configuration_id", instance_configuration_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_resource", size_resource)
        pulumi.set(__self__, "zone_count", zone_count)

    @property
    @pulumi.getter(name="instanceConfigurationId")
    def instance_configuration_id(self) -> str:
        return pulumi.get(self, "instance_configuration_id")

    @property
    @pulumi.getter
    def size(self) -> str:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeResource")
    def size_resource(self) -> str:
        return pulumi.get(self, "size_resource")

    @property
    @pulumi.getter(name="zoneCount")
    def zone_count(self) -> int:
        return pulumi.get(self, "zone_count")


@pulumi.output_type
class GetDeploymentObservabilityResult(dict):
    def __init__(__self__, *,
                 deployment_id: str,
                 logs: bool,
                 metrics: bool,
                 ref_id: str):
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "logs", logs)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "ref_id", ref_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def logs(self) -> bool:
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def metrics(self) -> bool:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        return pulumi.get(self, "ref_id")


@pulumi.output_type
class GetDeploymentsApmResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentsDeploymentResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 apm_ref_id: str,
                 apm_resource_id: str,
                 deployment_id: str,
                 elasticsearch_ref_id: str,
                 elasticsearch_resource_id: str,
                 enterprise_search_ref_id: str,
                 enterprise_search_resource_id: str,
                 integrations_server_ref_id: str,
                 integrations_server_resource_id: str,
                 kibana_ref_id: str,
                 kibana_resource_id: str,
                 name: str):
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "apm_ref_id", apm_ref_id)
        pulumi.set(__self__, "apm_resource_id", apm_resource_id)
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "elasticsearch_ref_id", elasticsearch_ref_id)
        pulumi.set(__self__, "elasticsearch_resource_id", elasticsearch_resource_id)
        pulumi.set(__self__, "enterprise_search_ref_id", enterprise_search_ref_id)
        pulumi.set(__self__, "enterprise_search_resource_id", enterprise_search_resource_id)
        pulumi.set(__self__, "integrations_server_ref_id", integrations_server_ref_id)
        pulumi.set(__self__, "integrations_server_resource_id", integrations_server_resource_id)
        pulumi.set(__self__, "kibana_ref_id", kibana_ref_id)
        pulumi.set(__self__, "kibana_resource_id", kibana_resource_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="apmRefId")
    def apm_ref_id(self) -> str:
        return pulumi.get(self, "apm_ref_id")

    @property
    @pulumi.getter(name="apmResourceId")
    def apm_resource_id(self) -> str:
        return pulumi.get(self, "apm_resource_id")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> str:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="elasticsearchRefId")
    def elasticsearch_ref_id(self) -> str:
        return pulumi.get(self, "elasticsearch_ref_id")

    @property
    @pulumi.getter(name="elasticsearchResourceId")
    def elasticsearch_resource_id(self) -> str:
        return pulumi.get(self, "elasticsearch_resource_id")

    @property
    @pulumi.getter(name="enterpriseSearchRefId")
    def enterprise_search_ref_id(self) -> str:
        return pulumi.get(self, "enterprise_search_ref_id")

    @property
    @pulumi.getter(name="enterpriseSearchResourceId")
    def enterprise_search_resource_id(self) -> str:
        return pulumi.get(self, "enterprise_search_resource_id")

    @property
    @pulumi.getter(name="integrationsServerRefId")
    def integrations_server_ref_id(self) -> str:
        return pulumi.get(self, "integrations_server_ref_id")

    @property
    @pulumi.getter(name="integrationsServerResourceId")
    def integrations_server_resource_id(self) -> str:
        return pulumi.get(self, "integrations_server_resource_id")

    @property
    @pulumi.getter(name="kibanaRefId")
    def kibana_ref_id(self) -> str:
        return pulumi.get(self, "kibana_ref_id")

    @property
    @pulumi.getter(name="kibanaResourceId")
    def kibana_resource_id(self) -> str:
        return pulumi.get(self, "kibana_resource_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeploymentsElasticsearchResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentsEnterpriseSearchResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentsIntegrationsServerResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentsKibanaResult(dict):
    def __init__(__self__, *,
                 healthy: Optional[str] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str healthy: Overall health status of the deployment.
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[str]:
        """
        Overall health status of the deployment.
        """
        return pulumi.get(self, "healthy")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetStackApmResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


@pulumi.output_type
class GetStackElasticsearchResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


@pulumi.output_type
class GetStackEnterpriseSearchResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


@pulumi.output_type
class GetStackKibanaResult(dict):
    def __init__(__self__, *,
                 capacity_constraints_max: int,
                 capacity_constraints_min: int,
                 compatible_node_types: Sequence[str],
                 default_plugins: Sequence[str],
                 denylists: Sequence[str],
                 docker_image: str,
                 plugins: Sequence[str]):
        pulumi.set(__self__, "capacity_constraints_max", capacity_constraints_max)
        pulumi.set(__self__, "capacity_constraints_min", capacity_constraints_min)
        pulumi.set(__self__, "compatible_node_types", compatible_node_types)
        pulumi.set(__self__, "default_plugins", default_plugins)
        pulumi.set(__self__, "denylists", denylists)
        pulumi.set(__self__, "docker_image", docker_image)
        pulumi.set(__self__, "plugins", plugins)

    @property
    @pulumi.getter(name="capacityConstraintsMax")
    def capacity_constraints_max(self) -> int:
        return pulumi.get(self, "capacity_constraints_max")

    @property
    @pulumi.getter(name="capacityConstraintsMin")
    def capacity_constraints_min(self) -> int:
        return pulumi.get(self, "capacity_constraints_min")

    @property
    @pulumi.getter(name="compatibleNodeTypes")
    def compatible_node_types(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_node_types")

    @property
    @pulumi.getter(name="defaultPlugins")
    def default_plugins(self) -> Sequence[str]:
        return pulumi.get(self, "default_plugins")

    @property
    @pulumi.getter
    def denylists(self) -> Sequence[str]:
        return pulumi.get(self, "denylists")

    @property
    @pulumi.getter(name="dockerImage")
    def docker_image(self) -> str:
        return pulumi.get(self, "docker_image")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")


