// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 * import * as fs from "fs";
 *
 * const latest = ec.getStack({
 *     versionRegex: "latest",
 *     region: "us-east-1",
 * });
 * // Create an Elastic Cloud deployment
 * const exampleKeystore = new ec.Deployment("exampleKeystore", {
 *     region: "us-east-1",
 *     version: latest.then(latest => latest.version),
 *     deploymentTemplateId: "aws-io-optimized-v2",
 *     elasticsearch: {
 *         hot: {
 *             autoscaling: {},
 *         },
 *     },
 * });
 * // Create the keystore secret entry
 * const gcsCredential = new ec.DeploymentElasticsearchKeystore("gcsCredential", {
 *     deploymentId: exampleKeystore.id,
 *     settingName: "gcs.client.default.credentials_file",
 *     value: fs.readFileSync("service-account-key.json"),
 *     asFile: true,
 * });
 * ```
 * ### Adding credentials to use GCS as a snapshot repository
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 * import * as fs from "fs";
 *
 * const latest = ec.getStack({
 *     versionRegex: "latest",
 *     region: "us-east-1",
 * });
 * // Create an Elastic Cloud deployment
 * const exampleKeystore = new ec.Deployment("exampleKeystore", {
 *     region: "us-east-1",
 *     version: latest.then(latest => latest.version),
 *     deploymentTemplateId: "aws-io-optimized-v2",
 *     elasticsearch: {
 *         hot: {
 *             autoscaling: {},
 *         },
 *     },
 * });
 * // Create the keystore secret entry
 * const gcsCredential = new ec.DeploymentElasticsearchKeystore("gcsCredential", {
 *     deploymentId: exampleKeystore.id,
 *     settingName: "gcs.client.default.credentials_file",
 *     value: fs.readFileSync("service-account-key.json"),
 *     asFile: true,
 * });
 * ```
 *
 * ## Import
 *
 * This resource cannot be imported
 */
export class DeploymentElasticsearchKeystore extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentElasticsearchKeystore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentElasticsearchKeystoreState, opts?: pulumi.CustomResourceOptions): DeploymentElasticsearchKeystore {
        return new DeploymentElasticsearchKeystore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ec:index/deploymentElasticsearchKeystore:DeploymentElasticsearchKeystore';

    /**
     * Returns true if the given object is an instance of DeploymentElasticsearchKeystore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentElasticsearchKeystore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentElasticsearchKeystore.__pulumiType;
    }

    /**
     * Indicates the the remote keystore setting should be stored as a file. The default is false, which stores the keystore setting as string when value is a plain string.
     */
    public readonly asFile!: pulumi.Output<boolean>;
    /**
     * Deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * Name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden.
     */
    public readonly settingName!: pulumi.Output<string>;
    /**
     * Value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a DeploymentElasticsearchKeystore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentElasticsearchKeystoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentElasticsearchKeystoreArgs | DeploymentElasticsearchKeystoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentElasticsearchKeystoreState | undefined;
            resourceInputs["asFile"] = state ? state.asFile : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["settingName"] = state ? state.settingName : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as DeploymentElasticsearchKeystoreArgs | undefined;
            if ((!args || args.deploymentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentId'");
            }
            if ((!args || args.settingName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settingName'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["asFile"] = args ? args.asFile : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["settingName"] = args ? args.settingName : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DeploymentElasticsearchKeystore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeploymentElasticsearchKeystore resources.
 */
export interface DeploymentElasticsearchKeystoreState {
    /**
     * Indicates the the remote keystore setting should be stored as a file. The default is false, which stores the keystore setting as string when value is a plain string.
     */
    asFile?: pulumi.Input<boolean>;
    /**
     * Deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden.
     */
    settingName?: pulumi.Input<string>;
    /**
     * Value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeploymentElasticsearchKeystore resource.
 */
export interface DeploymentElasticsearchKeystoreArgs {
    /**
     * Indicates the the remote keystore setting should be stored as a file. The default is false, which stores the keystore setting as string when value is a plain string.
     */
    asFile?: pulumi.Input<boolean>;
    /**
     * Deployment ID of the Deployment that holds the Elasticsearch cluster where the keystore setting will be written to.
     */
    deploymentId: pulumi.Input<string>;
    /**
     * Name for the keystore setting, if the setting already exists in the Elasticsearch cluster, it will be overridden.
     */
    settingName: pulumi.Input<string>;
    /**
     * Value of this setting. This can either be a string or a JSON object that is stored as a JSON string in the keystore.
     */
    value: pulumi.Input<string>;
}
