// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about an existing Elastic Cloud stack.
 *
 *   > **Note on regions** Before you start, you might want to check the [full list](https://www.elastic.co/guide/en/cloud/current/ec-regions-templates-instances.html) of regions available in Elasticsearch Service (ESS).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 *
 * const latest = ec.getStack({
 *     versionRegex: "latest",
 *     region: "us-east-1",
 *     lock: true,
 * });
 * const latestPatch = ec.getStack({
 *     versionRegex: "7.9.?",
 *     region: "us-east-1",
 * });
 * ```
 */
export function getStack(args: GetStackArgs, opts?: pulumi.InvokeOptions): Promise<GetStackResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ec:index/getStack:getStack", {
        "lock": args.lock,
        "region": args.region,
        "versionRegex": args.versionRegex,
    }, opts);
}

/**
 * A collection of arguments for invoking getStack.
 */
export interface GetStackArgs {
    /**
     * Lock the `latest` `versionRegex` obtained, so that the new stack release doesn't cascade the changes down to the deployments. It can be changed at any time.
     */
    lock?: boolean;
    /**
     * Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `ece-region`.
     */
    region: string;
    /**
     * Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `latest` is also accepted to obtain the latest available stack version.
     */
    versionRegex: string;
}

/**
 * A collection of values returned by getStack.
 */
export interface GetStackResult {
    /**
     * To have this version accessible/not accessible by the calling user. This is only relevant for Elasticsearch Service (ESS), not for ECE.
     */
    readonly accessible: boolean;
    /**
     * To include/not include this version in the `allowlist`. This is only relevant for Elasticsearch Service (ESS), not for ECE.
     */
    readonly allowlisted: boolean;
    /**
     * Information for APM workloads on this stack version.
     */
    readonly apms: outputs.GetStackApm[];
    /**
     * Information for Elasticsearch workloads on this stack version.
     */
    readonly elasticsearches: outputs.GetStackElasticsearch[];
    /**
     * Information for Enterprise Search workloads on this stack version.
     */
    readonly enterpriseSearches: outputs.GetStackEnterpriseSearch[];
    /**
     * Unique identifier of this data source.
     */
    readonly id: string;
    /**
     * Information for Kibana workloads on this stack version.
     */
    readonly kibanas: outputs.GetStackKibana[];
    /**
     * Lock the `latest` `versionRegex` obtained, so that the new stack release doesn't cascade the changes down to the deployments. It can be changed at any time.
     */
    readonly lock?: boolean;
    /**
     * The minimum stack version which can be upgraded to this stack version.
     */
    readonly minUpgradableFrom: string;
    /**
     * Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `ece-region`.
     */
    readonly region: string;
    /**
     * A list of stack versions which this stack version can be upgraded to.
     */
    readonly upgradableTos: string[];
    /**
     * The stack version
     */
    readonly version: string;
    /**
     * Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `latest` is also accepted to obtain the latest available stack version.
     */
    readonly versionRegex: string;
}
/**
 * Use this data source to retrieve information about an existing Elastic Cloud stack.
 *
 *   > **Note on regions** Before you start, you might want to check the [full list](https://www.elastic.co/guide/en/cloud/current/ec-regions-templates-instances.html) of regions available in Elasticsearch Service (ESS).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 *
 * const latest = ec.getStack({
 *     versionRegex: "latest",
 *     region: "us-east-1",
 *     lock: true,
 * });
 * const latestPatch = ec.getStack({
 *     versionRegex: "7.9.?",
 *     region: "us-east-1",
 * });
 * ```
 */
export function getStackOutput(args: GetStackOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStackResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ec:index/getStack:getStack", {
        "lock": args.lock,
        "region": args.region,
        "versionRegex": args.versionRegex,
    }, opts);
}

/**
 * A collection of arguments for invoking getStack.
 */
export interface GetStackOutputArgs {
    /**
     * Lock the `latest` `versionRegex` obtained, so that the new stack release doesn't cascade the changes down to the deployments. It can be changed at any time.
     */
    lock?: pulumi.Input<boolean>;
    /**
     * Region where the stack pack is. For Elastic Cloud Enterprise (ECE) installations, use `ece-region`.
     */
    region: pulumi.Input<string>;
    /**
     * Regex to filter the available stacks. Can be any valid regex expression, when multiple stacks are matched through a regex, the latest version is returned. `latest` is also accepted to obtain the latest available stack version.
     */
    versionRegex: pulumi.Input<string>;
}
