// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about an existing Elastic Cloud deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 *
 * const example = ec.getDeployment({
 *     id: "f759065e5e64e9f3546f6c44f2743893",
 * });
 * ```
 */
export function getDeployment(args: GetDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ec:index/getDeployment:getDeployment", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getDeployment.
 */
export interface GetDeploymentArgs {
    /**
     * The unique ID of the deployment.
     */
    id: string;
}

/**
 * A collection of values returned by getDeployment.
 */
export interface GetDeploymentResult {
    /**
     * Deployment alias.
     */
    readonly alias: string;
    /**
     * Instance configuration of the APM type.
     */
    readonly apms: outputs.GetDeploymentApm[];
    /**
     * ID of the deployment template this deployment is based off.
     */
    readonly deploymentTemplateId: string;
    /**
     * Instance configuration of the Elasticsearch Elasticsearch resource.
     */
    readonly elasticsearches: outputs.GetDeploymentElasticsearch[];
    /**
     * Instance configuration of the Enterprise Search type.
     */
    readonly enterpriseSearches: outputs.GetDeploymentEnterpriseSearch[];
    /**
     * Overall health status of the deployment.
     */
    readonly healthy: boolean;
    /**
     * The unique ID of the deployment.
     */
    readonly id: string;
    /**
     * Instance configuration of the Integrations Server type.
     */
    readonly integrationsServers: outputs.GetDeploymentIntegrationsServer[];
    /**
     * Instance configuration of the Kibana type.
     */
    readonly kibanas: outputs.GetDeploymentKibana[];
    /**
     * The name of the deployment.
     */
    readonly name: string;
    /**
     * Observability settings. Information about logs and metrics shipped to a dedicated deployment.
     */
    readonly observabilities: outputs.GetDeploymentObservability[];
    /**
     * Region where the deployment is hosted.
     */
    readonly region: string;
    /**
     * Key value map of arbitrary string tags.
     */
    readonly tags: {[key: string]: string};
    /**
     * Traffic filter block, which contains a list of traffic filter rule identifiers.
     */
    readonly trafficFilters: string[];
}
/**
 * Use this data source to retrieve information about an existing Elastic Cloud deployment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 *
 * const example = ec.getDeployment({
 *     id: "f759065e5e64e9f3546f6c44f2743893",
 * });
 * ```
 */
export function getDeploymentOutput(args: GetDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentResult> {
    return pulumi.output(args).apply((a: any) => getDeployment(a, opts))
}

/**
 * A collection of arguments for invoking getDeployment.
 */
export interface GetDeploymentOutputArgs {
    /**
     * The unique ID of the deployment.
     */
    id: pulumi.Input<string>;
}
