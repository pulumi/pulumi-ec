// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Elastic Cloud extension resource, which allows extensions to be created, updated, and deleted.
 *
 *   Extensions allow users of Elastic Cloud to use custom plugins, scripts, or dictionaries to enhance the core functionality of Elasticsearch. Before you install an extension, be sure to check out the supported and official [Elasticsearch plugins](https://www.elastic.co/guide/en/elasticsearch/plugins/current/index.html) already available.
 *
 *   **Tip :** If you experience timeouts when uploading an extension through a slow network, you might need to increase the timeout setting.
 *
 * ## Example Usage
 *
 * ### With extension file
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 * import * as std from "@pulumi/std";
 *
 * const filePath = "/path/to/plugin.zip";
 * const exampleExtension = new ec.DeploymentExtension("example_extension", {
 *     name: "my_extension",
 *     description: "my extension",
 *     version: "*",
 *     extensionType: "bundle",
 *     filePath: filePath,
 *     fileHash: std.filebase64sha256({
 *         input: filePath,
 *     }).then(invoke => invoke.result),
 * });
 * const latest = ec.getStack({
 *     versionRegex: "latest",
 *     region: "us-east-1",
 * });
 * const withExtension = new ec.Deployment("with_extension", {
 *     name: "my_example_deployment",
 *     region: "us-east-1",
 *     version: latest.then(latest => latest.version),
 *     deploymentTemplateId: "aws-io-optimized-v2",
 *     elasticsearch: {
 *         hot: {
 *             autoscaling: {},
 *         },
 *         extension: [{
 *             name: exampleExtension.name,
 *             type: "bundle",
 *             version: latest.then(latest => latest.version),
 *             url: exampleExtension.url,
 *         }],
 *     },
 * });
 * ```
 *
 * ### With download URL
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ec from "@pulumi/ec";
 *
 * const exampleExtension = new ec.DeploymentExtension("example_extension", {
 *     name: "my_extension",
 *     description: "my extension",
 *     version: "*",
 *     extensionType: "bundle",
 *     downloadUrl: "https://example.net",
 * });
 * const latest = ec.getStack({
 *     versionRegex: "latest",
 *     region: "us-east-1",
 * });
 * const withExtension = new ec.Deployment("with_extension", {
 *     name: "my_example_deployment",
 *     region: "us-east-1",
 *     version: latest.then(latest => latest.version),
 *     deploymentTemplateId: "aws-io-optimized-v2",
 *     elasticsearch: {
 *         hot: {
 *             autoscaling: {},
 *         },
 *         extension: [{
 *             name: exampleExtension.name,
 *             type: "bundle",
 *             version: latest.then(latest => latest.version),
 *             url: exampleExtension.url,
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Extensions can be imported using the `id`, for example:
 *
 * ```sh
 * $ pulumi import ec:index/deploymentExtension:DeploymentExtension name 320b7b540dfc967a7a649c18e2fce4ed
 * ```
 */
export class DeploymentExtension extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentExtensionState, opts?: pulumi.CustomResourceOptions): DeploymentExtension {
        return new DeploymentExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ec:index/deploymentExtension:DeploymentExtension';

    /**
     * Returns true if the given object is an instance of DeploymentExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeploymentExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentExtension.__pulumiType;
    }

    /**
     * Description for the extension
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The URL to download the extension archive.
     */
    declare public readonly downloadUrl: pulumi.Output<string>;
    /**
     * Extension type. Must be `bundle` or `plugin`. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
     */
    declare public readonly extensionType: pulumi.Output<string>;
    /**
     * Hash value of the file. Triggers re-uploading the file on change.
     */
    declare public readonly fileHash: pulumi.Output<string | undefined>;
    /**
     * Local file path to upload as the extension.
     */
    declare public readonly filePath: pulumi.Output<string | undefined>;
    /**
     * The datatime the extension was last modified.
     */
    declare public /*out*/ readonly lastModified: pulumi.Output<string>;
    /**
     * Name of the extension
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The size of the extension file in bytes.
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * The extension URL which will be used in the Elastic Cloud deployment plan.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;
    /**
     * Elastic stack version. A full version (e.g 8.7.0) should be set for plugins. A wildcard (e.g 8.*) may be used for bundles.
     */
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a DeploymentExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentExtensionArgs | DeploymentExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentExtensionState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["downloadUrl"] = state?.downloadUrl;
            resourceInputs["extensionType"] = state?.extensionType;
            resourceInputs["fileHash"] = state?.fileHash;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["lastModified"] = state?.lastModified;
            resourceInputs["name"] = state?.name;
            resourceInputs["size"] = state?.size;
            resourceInputs["url"] = state?.url;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as DeploymentExtensionArgs | undefined;
            if (args?.extensionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'extensionType'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["downloadUrl"] = args?.downloadUrl;
            resourceInputs["extensionType"] = args?.extensionType;
            resourceInputs["fileHash"] = args?.fileHash;
            resourceInputs["filePath"] = args?.filePath;
            resourceInputs["name"] = args?.name;
            resourceInputs["version"] = args?.version;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeploymentExtension.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeploymentExtension resources.
 */
export interface DeploymentExtensionState {
    /**
     * Description for the extension
     */
    description?: pulumi.Input<string>;
    /**
     * The URL to download the extension archive.
     */
    downloadUrl?: pulumi.Input<string>;
    /**
     * Extension type. Must be `bundle` or `plugin`. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
     */
    extensionType?: pulumi.Input<string>;
    /**
     * Hash value of the file. Triggers re-uploading the file on change.
     */
    fileHash?: pulumi.Input<string>;
    /**
     * Local file path to upload as the extension.
     */
    filePath?: pulumi.Input<string>;
    /**
     * The datatime the extension was last modified.
     */
    lastModified?: pulumi.Input<string>;
    /**
     * Name of the extension
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the extension file in bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * The extension URL which will be used in the Elastic Cloud deployment plan.
     */
    url?: pulumi.Input<string>;
    /**
     * Elastic stack version. A full version (e.g 8.7.0) should be set for plugins. A wildcard (e.g 8.*) may be used for bundles.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeploymentExtension resource.
 */
export interface DeploymentExtensionArgs {
    /**
     * Description for the extension
     */
    description?: pulumi.Input<string>;
    /**
     * The URL to download the extension archive.
     */
    downloadUrl?: pulumi.Input<string>;
    /**
     * Extension type. Must be `bundle` or `plugin`. A `bundle` will usually contain a dictionary or script, where a `plugin` is compiled from source.
     */
    extensionType: pulumi.Input<string>;
    /**
     * Hash value of the file. Triggers re-uploading the file on change.
     */
    fileHash?: pulumi.Input<string>;
    /**
     * Local file path to upload as the extension.
     */
    filePath?: pulumi.Input<string>;
    /**
     * Name of the extension
     */
    name?: pulumi.Input<string>;
    /**
     * Elastic stack version. A full version (e.g 8.7.0) should be set for plugins. A wildcard (e.g 8.*) may be used for bundles.
     */
    version: pulumi.Input<string>;
}
